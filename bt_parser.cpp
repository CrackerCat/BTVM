/*
** 2000-05-29
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Driver template for the LEMON parser generator.
**
** The "lemon" program processes an LALR(1) input grammar file, then uses
** this template to construct a parser.  The "lemon" program inserts text
** at each "%%" line.  Also, any "P-a-r-s-e" identifer prefix (without the
** interstitial "-" characters) contained in this template is changed into
** the value of the %name directive from the grammar.  Otherwise, the content
** of this template is copied straight through into the generate parser
** source file.
**
** The following is the concatenation of all %include directives from the
** input grammar file:
*/
#include <stdio.h>
/************ Begin %include sections from the grammar ************************/
#line 3 "bt_parser.y"

    #include <cassert>
    #include "btvm/vm/vm_functions.h"
    #include "btvm/btvm.h"
    #include "bt_lexer.h"
#line 34 "bt_parser.c"
/**************** End of %include directives **********************************/
/* These constants specify the various numeric values for terminal symbols
** in a format understandable to "makeheaders".  This section is blank unless
** "lemon" is run with the "-m" command-line option.
***************** Begin makeheaders token definitions *************************/
/**************** End makeheaders token definitions ***************************/

/* The next sections is a series of control #defines.
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used to store the integer codes
**                       that represent terminal and non-terminal symbols.
**                       "unsigned char" is used if there are fewer than
**                       256 symbols.  Larger types otherwise.
**    YYNOCODE           is a number of type YYCODETYPE that is not used for
**                       any terminal or nonterminal symbol.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       (also known as: "terminal symbols") have fall-back
**                       values which should be used if the original symbol
**                       would not parse.  This permits keywords to sometimes
**                       be used as identifiers, for example.
**    YYACTIONTYPE       is the data type used for "action codes" - numbers
**                       that indicate what to do in response to the next
**                       token.
**    BTParserTOKENTYPE     is the data type used for minor type for terminal
**                       symbols.  Background: A "minor type" is a semantic
**                       value associated with a terminal or non-terminal
**                       symbols.  For example, for an "ID" terminal symbol,
**                       the minor type might be the name of the identifier.
**                       Each non-terminal can have a different minor type.
**                       Terminal symbols all have the same minor type, though.
**                       This macros defines the minor type for terminal 
**                       symbols.
**    YYMINORTYPE        is the data type used for all minor types.
**                       This is typically a union of many types, one of
**                       which is BTParserTOKENTYPE.  The entry in the union
**                       for terminal symbols is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    BTParserARG_SDECL     A static variable declaration for the %extra_argument
**    BTParserARG_PDECL     A parameter declaration for the %extra_argument
**    BTParserARG_STORE     Code to store %extra_argument into yypParser
**    BTParserARG_FETCH     Code to extract %extra_argument from yypParser
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YY_MAX_SHIFT       Maximum value for shift actions
**    YY_MIN_SHIFTREDUCE Minimum value for shift-reduce actions
**    YY_MAX_SHIFTREDUCE Maximum value for shift-reduce actions
**    YY_MIN_REDUCE      Maximum value for reduce actions
**    YY_ERROR_ACTION    The yy_action[] code for syntax error
**    YY_ACCEPT_ACTION   The yy_action[] code for accept
**    YY_NO_ACTION       The yy_action[] code for no-op
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/************* Begin control #defines *****************************************/
#define YYCODETYPE unsigned char
#define YYNOCODE 155
#define YYACTIONTYPE unsigned short int
#define BTParserTOKENTYPE  BTLexer::Token* 
typedef union {
  int yyinit;
  BTParserTOKENTYPE yy0;
  NIdentifier* yy68;
  NArgument* yy164;
  NBlock* yy165;
  NScalarType* yy173;
  NodeList* yy189;
  NVariable* yy267;
  int yy284;
  Node* yy293;
  NCustomVariable* yy294;
  NType* yy295;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define BTParserARG_SDECL  BTVM* btvm      ;
#define BTParserARG_PDECL , BTVM* btvm      
#define BTParserARG_FETCH  BTVM* btvm       = yypParser->btvm      
#define BTParserARG_STORE yypParser->btvm       = btvm      
#define YYNSTATE             268
#define YYNRULE              198
#define YY_MAX_SHIFT         267
#define YY_MIN_SHIFTREDUCE   410
#define YY_MAX_SHIFTREDUCE   607
#define YY_MIN_REDUCE        608
#define YY_MAX_REDUCE        805
#define YY_ERROR_ACTION      806
#define YY_ACCEPT_ACTION     807
#define YY_NO_ACTION         808
/************* End control #defines *******************************************/

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N <= YY_MAX_SHIFT             Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   N between YY_MIN_SHIFTREDUCE       Shift to an arbitrary state then
**     and YY_MAX_SHIFTREDUCE           reduce by rule N-YY_MIN_SHIFTREDUCE.
**
**   N between YY_MIN_REDUCE            Reduce by rule N-YY_MIN_REDUCE
**     and YY_MAX_REDUCE
**
**   N == YY_ERROR_ACTION               A syntax error has occurred.
**
**   N == YY_ACCEPT_ACTION              The parser accepts its input.
**
**   N == YY_NO_ACTION                  No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as either:
**
**    (A)   N = yy_action[ yy_shift_ofst[S] + X ]
**    (B)   N = yy_default[S]
**
** The (A) formula is preferred.  The B formula is used instead if:
**    (1)  The yy_shift_ofst[S]+X value is out of range, or
**    (2)  yy_lookahead[yy_shift_ofst[S]+X] is not equal to X, or
**    (3)  yy_shift_ofst[S] equal YY_SHIFT_USE_DFLT.
** (Implementation note: YY_SHIFT_USE_DFLT is chosen so that
** YY_SHIFT_USE_DFLT+X will be out of range for all possible lookaheads X.
** Hence only tests (1) and (2) need to be evaluated.)
**
** The formulas above are for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
**
*********** Begin parsing tables **********************************************/
#define YY_ACTTAB_COUNT (4814)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */    30,  607,  467,  465,  468,  524,  108,   10,  733,  107,
 /*    10 */   150,   48,  146,   91,   90,  517,  600,  123,  466,  607,
 /*    20 */   477,  478,  479,  480,  482,  483,  485,  486,  487,  488,
 /*    30 */   489,  490,  491,  469,  484,  470,  422,  599,  601,  602,
 /*    40 */   603,  604,  132,  128,   99,  249,  224,  240,  239,   28,
 /*    50 */   235,  232,  231,   42,  733,  733,  485,  486,  253,   38,
 /*    60 */   134,   94,  230,  492,  493,  494,  495,  496,  497,  498,
 /*    70 */   499,  500,  501,  502,  503,  118,   41,   86,  607,  166,
 /*    80 */   147,   88,   87,   85,   84,  258,   59,  598,  601,  602,
 /*    90 */   603,  604,  605,  606,   30,  607,   74,   73,  254,  524,
 /*   100 */   108,   10,  729,  107,  150,   94,  230,   91,   90,   89,
 /*   110 */    83,   82,  458,  607,  477,  478,  479,  480,  482,  483,
 /*   120 */   485,  486,  487,  488,  489,  490,  491,   58,   57,   56,
 /*   130 */    55,   54,   53,   52,   51,   50,   77,  189,  220,  249,
 /*   140 */   190,  240,  239,   28,  235,  232,  231,   42,  729,  729,
 /*   150 */   447,  122,  135,  607,  445,  607,  254,   72,   71,  254,
 /*   160 */   224,  584,  585,  598,  601,  602,  603,  604,  605,  606,
 /*   170 */   458,   86,  142,  458,  153,   88,   87,   85,   84,  258,
 /*   180 */   459,  598,  601,  602,  603,  604,  605,  606,   30,   49,
 /*   190 */   528,  226,   60,  524,  108,   10,  728,  107,  150,  455,
 /*   200 */   118,   91,   90,  607,  123,  119,   39,  607,  477,  478,
 /*   210 */   479,  480,  482,  483,  485,  486,  487,  488,  489,  490,
 /*   220 */   491,  598,  601,  602,  603,  604,  605,  606,   38,   29,
 /*   230 */   527,  144,  444,  249,  220,  240,  239,   28,  235,  232,
 /*   240 */   231,   42,  728,  728,  198,  119,   39,  607,  141,  254,
 /*   250 */   454,  469,  484,  470,  423,  123,  212,  469,  484,  470,
 /*   260 */   132,  128,   99,  457,  148,   86,  115,  113,   99,   88,
 /*   270 */    87,   85,   84,  258,  432,  598,  601,  602,  603,  604,
 /*   280 */   605,  606,  608,   30,  144,  213,  149,   92,  524,  102,
 /*   290 */    10,  123,  101,  133,  149,  140,   91,   90,  215,  124,
 /*   300 */   607,  156,  607,  477,  478,  479,  480,  482,  483,  485,
 /*   310 */   486,  487,  488,  489,  490,  491,  188,   97,  151,  593,
 /*   320 */    60,  234,   60,  108,  156,  464,  107,  150,  249,  607,
 /*   330 */   240,  239,   28,  235,  232,  231,   42,  477,  478,  479,
 /*   340 */   480,  482,  483,  485,  486,  487,  488,  489,  490,  491,
 /*   350 */   452,  152,  469,  484,  470,  116,  156,  156,  437,  250,
 /*   360 */    86,  117,  110,   99,   88,   87,   85,   84,  258,  105,
 /*   370 */   598,  601,  602,  603,  604,  605,  606,   30,  111,  451,
 /*   380 */   252,   92,  524,  102,   10,  156,  101,  133,  631,  157,
 /*   390 */    91,   90,   27,   60,  111,  156,  607,  477,  478,  479,
 /*   400 */   480,  482,  483,  485,  486,  487,  488,  489,  490,  491,
 /*   410 */   112,   60,   60,  255,  523,  520,  211,   12,   60,   14,
 /*   420 */    60,   60,  249,  251,  240,  239,   28,  235,  232,  231,
 /*   430 */    42,  155,  145,  469,  484,  470,  600,  591,  597,   15,
 /*   440 */    60,   93,  138,  592,   99,   76,   75,  607,  594,   60,
 /*   450 */    79,   78,  446,   60,   86,  168,  183,  599,   88,   87,
 /*   460 */    85,   84,  258,  125,  598,  601,  602,  603,  604,  605,
 /*   470 */   606,   30,  116,   70,   69,  439,  524,  108,   10,  704,
 /*   480 */   107,  150,  112,  112,   91,   90,  434,   80,  476,  473,
 /*   490 */   607,  477,  478,  479,  480,  482,  483,  485,  486,  487,
 /*   500 */   488,  489,  490,  491,  116,   62,   64,  438,   77,  116,
 /*   510 */   214,   60,  436,  217,  158,   80,  249,  251,  240,  239,
 /*   520 */    28,  235,  232,  231,   42,  216,  136,  448,  111,   39,
 /*   530 */   600,  137,  597,  469,  484,  470,   10,  592,  421,  114,
 /*   540 */   167,  221,  256,  427,   99,  143,  426,  104,   86,  184,
 /*   550 */   183,  599,   88,   87,   85,   84,  258,  129,  598,  601,
 /*   560 */   602,  603,  604,  605,  606,   30,  590,  463,  425,  130,
 /*   570 */   524,  108,   10,  733,  107,  150,  154,  131,   91,   90,
 /*   580 */   191,  257,  192,  424,  607,  477,  478,  479,  480,  482,
 /*   590 */   483,  485,  486,  487,  488,  489,  490,  491,  267,  209,
 /*   600 */   431,   96,  420,  430,    4,  429,    5,  428,   65,   81,
 /*   610 */   249,  251,  240,  239,   28,  235,  232,  231,   42,    6,
 /*   620 */     7,  588,  587,    8,  600,   25,  597,  516,   40,  227,
 /*   630 */     2,  592,   60,    3,  522,   43,  521,   26,   32,  103,
 /*   640 */    34,   44,   86,  193,  183,  599,   88,   87,   85,   84,
 /*   650 */   258,   33,  598,  601,  602,  603,  604,  605,  606,   30,
 /*   660 */    35,  713,   11,   36,  524,  108,   10,  126,  107,  150,
 /*   670 */    37,   45,   91,   90,   46,   47,   38,  441,  607,  477,
 /*   680 */   478,  479,  480,  482,  483,  485,  486,  487,  488,  489,
 /*   690 */   490,  491,  440,   13,   95,  120,   98,  461,    9,   31,
 /*   700 */    68,  610,   61,   67,  249,  251,  240,  239,   28,  235,
 /*   710 */   232,  231,   42,   66,  610,   63,  610,  610,  600,  610,
 /*   720 */   597,  610,  610,  610,  610,  592,  610,  610,  610,  610,
 /*   730 */   610,  610,  610,  610,  610,  610,   86,  199,  183,  599,
 /*   740 */    88,   87,   85,   84,  258,  610,  598,  601,  602,  603,
 /*   750 */   604,  605,  606,   30,  610,  610,  610,  610,  524,  108,
 /*   760 */    10,  127,  107,  150,  610,  610,   91,   90,  610,  610,
 /*   770 */   610,  610,  607,  477,  478,  479,  480,  482,  483,  485,
 /*   780 */   486,  487,  488,  489,  490,  491,  610,  610,  610,  610,
 /*   790 */   610,  610,  610,  610,  610,  610,  610,  610,  249,  251,
 /*   800 */   240,  239,   28,  235,  232,  231,   42,  610,  610,  610,
 /*   810 */   610,  610,  600,  610,  597,  610,  610,  610,  610,  592,
 /*   820 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   830 */    86,  200,  183,  599,   88,   87,   85,   84,  258,  610,
 /*   840 */   598,  601,  602,  603,  604,  605,  606,   30,  610,  610,
 /*   850 */   610,  610,  524,  108,   10,  532,  107,  150,  610,  610,
 /*   860 */    91,   90,  610,  610,  610,  610,  607,  477,  478,  479,
 /*   870 */   480,  482,  483,  485,  486,  487,  488,  489,  490,  491,
 /*   880 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   890 */   610,  610,  249,  251,  240,  239,   28,  235,  232,  231,
 /*   900 */    42,  610,  610,  610,  610,  610,  600,  610,  597,  610,
 /*   910 */   610,  610,  610,  592,  610,  610,  610,  610,  610,  610,
 /*   920 */   610,  610,  610,  610,   86,  201,  183,  599,   88,   87,
 /*   930 */    85,   84,  258,  610,  598,  601,  602,  603,  604,  605,
 /*   940 */   606,   30,  610,  610,  610,  610,  524,  108,   10,  474,
 /*   950 */   107,  150,  610,  610,   91,   90,  610,  610,  610,  610,
 /*   960 */   607,  477,  478,  479,  480,  482,  483,  485,  486,  487,
 /*   970 */   488,  489,  490,  491,  610,  610,  610,  610,  610,  610,
 /*   980 */   610,  610,  610,  610,  610,  610,  249,  251,  240,  239,
 /*   990 */    28,  235,  232,  231,   42,  610,  610,  610,  610,  610,
 /*  1000 */   600,  610,  597,  610,  610,  610,  610,  592,  610,  610,
 /*  1010 */   610,  610,  610,  610,  610,  610,  610,  610,   86,  202,
 /*  1020 */   183,  599,   88,   87,   85,   84,  258,  610,  598,  601,
 /*  1030 */   602,  603,  604,  605,  606,   30,  610,  610,  610,  610,
 /*  1040 */   524,  108,   10,  471,  107,  150,  610,  610,   91,   90,
 /*  1050 */   610,  610,  610,  610,  607,  477,  478,  479,  480,  482,
 /*  1060 */   483,  485,  486,  487,  488,  489,  490,  491,  610,  610,
 /*  1070 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*  1080 */   249,  251,  240,  239,   28,  235,  232,  231,   42,  610,
 /*  1090 */   610,  610,  610,  610,  600,  610,  597,  610,  610,  610,
 /*  1100 */   610,  592,  610,  610,  610,  610,  610,  610,  610,  610,
 /*  1110 */   610,  610,   86,  203,  183,  599,   88,   87,   85,   84,
 /*  1120 */   258,  610,  598,  601,  602,  603,  604,  605,  606,   30,
 /*  1130 */   610,  610,  610,  610,  524,  108,   10,  475,  107,  150,
 /*  1140 */   610,  610,   91,   90,  610,  610,  610,  610,  607,  477,
 /*  1150 */   478,  479,  480,  482,  483,  485,  486,  487,  488,  489,
 /*  1160 */   490,  491,  610,  610,  610,  610,  610,  610,  610,  610,
 /*  1170 */   610,  610,  610,  610,  249,  251,  240,  239,   28,  235,
 /*  1180 */   232,  231,   42,  610,  610,  610,  610,  610,  600,  610,
 /*  1190 */   597,  610,  610,  610,  610,  592,  610,  610,  610,  610,
 /*  1200 */   610,  610,  610,  610,  610,  610,   86,  204,  183,  599,
 /*  1210 */    88,   87,   85,   84,  258,  610,  598,  601,  602,  603,
 /*  1220 */   604,  605,  606,   30,  610,  610,  610,  610,  524,  108,
 /*  1230 */    10,  472,  107,  150,  610,  610,   91,   90,  610,  610,
 /*  1240 */   610,  610,  607,  477,  478,  479,  480,  482,  483,  485,
 /*  1250 */   486,  487,  488,  489,  490,  491,  610,  610,  610,  610,
 /*  1260 */   610,  610,  610,  610,  610,  610,  610,  610,  249,  251,
 /*  1270 */   240,  239,   28,  235,  232,  231,   42,  610,  610,  610,
 /*  1280 */   610,  610,  600,  610,  597,  610,  610,  610,  610,  233,
 /*  1290 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*  1300 */    86,  610,  610,  599,   88,   87,   85,   84,  258,  610,
 /*  1310 */   598,  601,  602,  603,  604,  605,  606,   30,  610,  610,
 /*  1320 */   610,  610,  524,  108,   10,  610,  107,  150,  610,  610,
 /*  1330 */    91,   90,  610,  610,  610,  610,  607,  477,  478,  479,
 /*  1340 */   480,  482,  483,  485,  486,  487,  488,  489,  490,  491,
 /*  1350 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*  1360 */   610,  610,  248,  610,  246,  245,   28,  235,  232,  231,
 /*  1370 */    42,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*  1380 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*  1390 */   610,  610,  610,  610,   86,  610,  610,  610,   88,   87,
 /*  1400 */    85,   84,  258,  610,  598,  601,  602,  603,  604,  605,
 /*  1410 */   606,   30,  610,  610,  610,  610,  524,  108,   10,  610,
 /*  1420 */   107,  150,  610,  610,   91,   90,  610,  610,  610,  610,
 /*  1430 */   607,  477,  478,  479,  480,  482,  483,  485,  486,  487,
 /*  1440 */   488,  489,  490,  491,  610,  610,  610,  610,  610,  610,
 /*  1450 */   610,  610,  610,  610,  610,  610,  249,  610,  240,  239,
 /*  1460 */    28,  235,  232,  231,   42,  610,  610,  610,  610,  610,
 /*  1470 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*  1480 */   610,  610,  610,  610,  610,  610,  610,  610,   86,  610,
 /*  1490 */   610,  610,   88,   87,   85,   84,  258,  610,  598,  601,
 /*  1500 */   602,  603,  604,  605,  606,    1,  172,  610,  610,  610,
 /*  1510 */   610,  469,  484,  470,  610,  610,  610,  610,  519,  610,
 /*  1520 */   109,  100,   99,  807,  412,  413,  414,  415,  416,  417,
 /*  1530 */   418,  419,  610,  159,  600,  610,  597,  610,  610,  511,
 /*  1540 */   610,  592,  537,  208,  265,  261,  260,  259,  196,  160,
 /*  1550 */   181,  185,  163,  180,  183,  599,  610,  610,  610,  610,
 /*  1560 */   610,  172,  610,  610,  610,  610,  469,  484,  470,  610,
 /*  1570 */   610,  610,  610,  519,  610,  109,  100,   99,  610,  411,
 /*  1580 */   413,  414,  415,  416,  417,  418,  419,  610,  159,  600,
 /*  1590 */   610,  597,  610,  610,  511,  610,  592,  537,  208,  265,
 /*  1600 */   261,  260,  259,  196,  160,  181,  185,  163,  180,  183,
 /*  1610 */   599,   30,  139,  610,  610,  610,  610,  108,  610,  610,
 /*  1620 */   107,  150,  610,  610,  610,  610,  610,  610,  610,  610,
 /*  1630 */   607,  477,  478,  479,  480,  482,  483,  485,  486,  487,
 /*  1640 */   488,  489,  490,  491,   30,  610,  610,  610,  610,  610,
 /*  1650 */   108,  610,  610,  107,  150,  610,  610,  610,  610,  610,
 /*  1660 */   610,  610,  610,  607,  477,  478,  479,  480,  482,  483,
 /*  1670 */   485,  486,  487,  488,  489,  490,  491,  610,  610,  610,
 /*  1680 */   610,  610,  610,  610,  610,  610,  610,  610,   86,  610,
 /*  1690 */   610,  610,   88,   87,   85,   84,  258,  610,  598,  601,
 /*  1700 */   602,  603,  604,  605,  606,  610,  610,  610,  610,  610,
 /*  1710 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*  1720 */   610,   86,  610,  610,  610,   88,   87,   85,   84,  258,
 /*  1730 */    16,  598,  601,  602,  603,  604,  605,  606,  172,  610,
 /*  1740 */   610,  610,  610,  469,  484,  470,  610,  610,  610,  610,
 /*  1750 */   519,  610,  106,  100,   99,  610,  610,  610,  610,  610,
 /*  1760 */   610,  518,  610,  534,  610,  159,  600,  610,  597,  610,
 /*  1770 */   610,  511,  610,  592,  537,  208,  265,  261,  260,  259,
 /*  1780 */   196,  160,  181,  185,  163,  180,  183,  599,  610,   17,
 /*  1790 */   610,  610,  610,  610,  610,  610,  610,  172,  610,  610,
 /*  1800 */   610,  610,  469,  484,  470,  610,  610,  610,  610,  519,
 /*  1810 */   610,  106,  100,   99,  610,  610,  610,  610,  610,  610,
 /*  1820 */   518,  610,  534,  610,  159,  600,  610,  597,  610,  610,
 /*  1830 */   511,  610,  592,  537,  208,  265,  261,  260,  259,  196,
 /*  1840 */   160,  181,  185,  163,  180,  183,  599,   18,  610,  610,
 /*  1850 */   172,  610,  610,  610,  610,  469,  484,  470,  610,  610,
 /*  1860 */   610,  610,  519,  610,  106,  100,   99,  610,  610,  610,
 /*  1870 */   610,  610,  610,  518,  610,  505,  610,  159,  600,  610,
 /*  1880 */   597,  610,  610,  511,  610,  592,  537,  208,  265,  261,
 /*  1890 */   260,  259,  196,  160,  181,  185,  163,  180,  183,  599,
 /*  1900 */   610,  610,  610,  610,   19,  610,  610,  172,  610,  610,
 /*  1910 */   610,  610,  469,  484,  470,  610,  610,  610,  610,  519,
 /*  1920 */   610,  106,  100,   99,  610,  610,  610,  610,  610,  610,
 /*  1930 */   518,  610,  505,  610,  159,  600,  610,  597,  610,  610,
 /*  1940 */   511,  610,  592,  537,  208,  265,  261,  260,  259,  196,
 /*  1950 */   160,  181,  185,  163,  180,  183,  599,   21,  610,  610,
 /*  1960 */   172,  610,  610,  610,  610,  469,  484,  470,  610,  610,
 /*  1970 */   610,  610,  519,  610,  106,  100,   99,  610,  610,  610,
 /*  1980 */   610,  610,  610,  518,  610,  505,  610,  159,  600,  610,
 /*  1990 */   597,  610,  610,  511,  610,  592,  537,  208,  265,  261,
 /*  2000 */   260,  259,  196,  160,  181,  185,  163,  180,  183,  599,
 /*  2010 */   610,  610,  610,  610,   22,  610,  610,  172,  610,  610,
 /*  2020 */   610,  610,  469,  484,  470,  610,  610,  610,  610,  519,
 /*  2030 */   610,  106,  100,   99,  610,  610,  610,  610,  610,  610,
 /*  2040 */   518,  610,  505,  610,  159,  600,  610,  597,  610,  610,
 /*  2050 */   511,  610,  592,  537,  208,  265,  261,  260,  259,  196,
 /*  2060 */   160,  181,  185,  163,  180,  183,  599,   23,  610,  610,
 /*  2070 */   172,  610,  610,  610,  610,  469,  484,  470,  610,  610,
 /*  2080 */   610,  610,  519,  610,  106,  100,   99,  610,  610,  610,
 /*  2090 */   610,  610,  610,  518,  610,  505,  610,  159,  600,  610,
 /*  2100 */   597,  610,  610,  511,  610,  592,  537,  208,  265,  261,
 /*  2110 */   260,  259,  196,  160,  181,  185,  163,  180,  183,  599,
 /*  2120 */   610,  610,  610,  610,   24,  610,  610,  172,  610,  610,
 /*  2130 */   610,  610,  469,  484,  470,  610,  610,  610,  610,  519,
 /*  2140 */   610,  106,  100,   99,  610,  610,  610,  610,  610,  610,
 /*  2150 */   518,  610,  505,  610,  159,  600,  610,  597,  610,  610,
 /*  2160 */   511,  610,  592,  537,  208,  265,  261,  260,  259,  196,
 /*  2170 */   160,  181,  185,  163,  180,  183,  599,  610,  610,   20,
 /*  2180 */   610,  610,  610,  610,  610,  610,  610,  172,  610,  610,
 /*  2190 */   610,  610,  469,  484,  470,  610,  610,  610,  610,  519,
 /*  2200 */   610,  106,  100,   99,  610,  610,  610,  610,  610,  610,
 /*  2210 */   518,  610,  534,  610,  159,  600,  610,  597,  610,  610,
 /*  2220 */   511,  610,  592,  537,  208,  265,  261,  260,  259,  196,
 /*  2230 */   160,  181,  185,  163,  180,  183,  599,  172,  610,  610,
 /*  2240 */   610,  610,  469,  484,  470,  610,  610,  610,  610,  519,
 /*  2250 */   610,  106,  100,   99,  610,  610,  610,  610,  610,  610,
 /*  2260 */   518,  610,  510,  610,  159,  600,  610,  597,  514,  610,
 /*  2270 */   241,  610,  592,  537,  208,  265,  261,  260,  259,  196,
 /*  2280 */   160,  181,  185,  163,  180,  183,  599,  610,  610,  610,
 /*  2290 */   610,  610,  172,  610,  610,  610,  610,  469,  484,  470,
 /*  2300 */   610,  610,  610,  610,  519,  610,  106,  100,   99,  610,
 /*  2310 */   610,  610,  610,  610,  610,  518,  610,  509,  610,  159,
 /*  2320 */   600,  610,  597,  513,  610,  241,  610,  592,  537,  208,
 /*  2330 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  2340 */   183,  599,  172,  610,  610,  610,  610,  469,  484,  470,
 /*  2350 */   610,  610,  610,  610,  519,  610,  106,  100,   99,  610,
 /*  2360 */   610,  610,  610,  610,  610,  518,  610,  508,  610,  159,
 /*  2370 */   600,  610,  597,  512,  610,  241,  610,  592,  537,  208,
 /*  2380 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  2390 */   183,  599,  610,  610,  610,  610,  610,  172,  610,  610,
 /*  2400 */   610,  610,  469,  484,  470,  610,  610,  610,  610,  519,
 /*  2410 */   610,  106,  100,   99,  610,  610,  610,  610,  610,  610,
 /*  2420 */   518,  610,  507,  610,  159,  600,  610,  597,  247,  610,
 /*  2430 */   241,  610,  592,  537,  208,  265,  261,  260,  259,  196,
 /*  2440 */   160,  181,  185,  163,  180,  183,  599,  172,  610,  610,
 /*  2450 */   610,  610,  469,  484,  470,  610,  610,  610,  610,  519,
 /*  2460 */   610,  106,  100,   99,  610,  610,  610,  610,  610,  610,
 /*  2470 */   518,  610,  507,  610,  159,  600,  610,  597,  225,  610,
 /*  2480 */   241,  610,  592,  537,  208,  265,  261,  260,  259,  196,
 /*  2490 */   160,  181,  185,  163,  180,  183,  599,  610,  610,  610,
 /*  2500 */   610,  610,  172,  610,  610,  610,  610,  469,  484,  470,
 /*  2510 */   610,  610,  610,  610,  519,  610,  106,  100,   99,  610,
 /*  2520 */   610,  610,  610,  610,  610,  518,  610,  533,  610,  159,
 /*  2530 */   600,  610,  597,  610,  610,  511,  610,  592,  537,  208,
 /*  2540 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  2550 */   183,  599,  172,  610,  610,  610,  610,  469,  484,  470,
 /*  2560 */   610,  610,  610,  610,  519,  610,  106,  100,   99,  610,
 /*  2570 */   610,  610,  610,  610,  610,  518,  610,  504,  610,  159,
 /*  2580 */   600,  610,  597,  610,  610,  511,  610,  592,  537,  208,
 /*  2590 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  2600 */   183,  599,  610,  610,  610,  610,  610,  172,  610,  610,
 /*  2610 */   610,  610,  469,  484,  470,  610,  610,  610,  610,  519,
 /*  2620 */   610,  106,  100,   99,  610,  610,  610,  610,  610,  610,
 /*  2630 */   518,  610,  508,  610,  159,  600,  610,  597,  610,  610,
 /*  2640 */   511,  610,  592,  537,  208,  265,  261,  260,  259,  196,
 /*  2650 */   160,  181,  185,  163,  180,  183,  599,  172,  610,  610,
 /*  2660 */   610,  610,  469,  484,  470,  610,  610,  610,  610,  519,
 /*  2670 */   610,  106,  100,   99,  610,  610,  610,  610,  610,  610,
 /*  2680 */   518,  610,  510,  610,  159,  600,  610,  597,  610,  610,
 /*  2690 */   511,  610,  592,  537,  208,  265,  261,  260,  259,  196,
 /*  2700 */   160,  181,  185,  163,  180,  183,  599,  610,  610,  610,
 /*  2710 */   610,  610,  172,  610,  610,  610,  610,  469,  484,  470,
 /*  2720 */   610,  610,  610,  610,  519,  610,  106,  100,   99,  610,
 /*  2730 */   610,  610,  610,  610,  610,  518,  610,  509,  610,  159,
 /*  2740 */   600,  610,  597,  610,  610,  511,  610,  592,  537,  208,
 /*  2750 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  2760 */   183,  599,  172,  610,  610,  610,  610,  469,  484,  470,
 /*  2770 */   610,  610,  610,  610,  519,  610,  106,  100,   99,  610,
 /*  2780 */   610,  610,  610,  610,  610,  518,  610,  228,  610,  159,
 /*  2790 */   600,  610,  597,  610,  610,  511,  610,  592,  537,  208,
 /*  2800 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  2810 */   183,  599,  610,  610,  610,  210,  610,  187,  610,  610,
 /*  2820 */   610,  610,  469,  484,  470,  423,  610,  610,  610,  610,
 /*  2830 */   610,  132,  121,   99,  610,  610,  610,  610,  610,  610,
 /*  2840 */   610,  610,  610,  610,  159,  600,  610,  597,  610,  610,
 /*  2850 */   610,  610,  592,  537,  208,  265,  261,  260,  259,  196,
 /*  2860 */   160,  181,  185,  163,  180,  183,  599,  170,  610,  610,
 /*  2870 */   610,  610,  469,  484,  470,  610,  610,  610,  610,  610,
 /*  2880 */   610,  219,  251,   99,  610,  610,  610,  610,  610,  610,
 /*  2890 */   610,  610,  610,  610,  159,  600,  610,  597,  610,  610,
 /*  2900 */   610,  610,  592,  537,  208,  265,  261,  260,  259,  196,
 /*  2910 */   160,  181,  185,  163,  180,  183,  599,  469,  484,  470,
 /*  2920 */   610,  610,  610,  610,  610,  610,  223,  251,   99,  610,
 /*  2930 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  2940 */   600,  610,  597,  610,  610,  610,  610,  592,  222,  208,
 /*  2950 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  2960 */   183,  599,  229,  610,  610,  610,  610,  610,  610,  610,
 /*  2970 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  2980 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  2990 */   600,  610,  597,  610,  236,  610,  610,  592,  537,  208,
 /*  3000 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3010 */   183,  599,  229,  610,  610,  610,  610,  610,  610,  610,
 /*  3020 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3030 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3040 */   600,  610,  597,  610,  237,  610,  610,  592,  537,  208,
 /*  3050 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3060 */   183,  599,  229,  610,  610,  610,  610,  610,  610,  610,
 /*  3070 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3080 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3090 */   600,  610,  597,  610,  238,  610,  610,  592,  537,  208,
 /*  3100 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3110 */   183,  599,  229,  610,  610,  610,  610,  610,  610,  610,
 /*  3120 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3130 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3140 */   600,  610,  597,  610,  242,  610,  610,  592,  537,  208,
 /*  3150 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3160 */   183,  599,  229,  610,  610,  610,  610,  610,  610,  610,
 /*  3170 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3180 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3190 */   600,  610,  597,  610,  243,  610,  610,  592,  537,  208,
 /*  3200 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3210 */   183,  599,  229,  610,  610,  610,  610,  610,  610,  610,
 /*  3220 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3230 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3240 */   600,  610,  597,  610,  244,  610,  610,  592,  537,  208,
 /*  3250 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3260 */   183,  599,  179,  610,  610,  610,  610,  610,  610,  610,
 /*  3270 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3280 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3290 */   600,  610,  597,  610,  610,  610,  610,  592,  537,  208,
 /*  3300 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3310 */   183,  599,  197,  610,  610,  610,  610,  610,  610,  610,
 /*  3320 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3330 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3340 */   600,  610,  597,  610,  610,  610,  610,  592,  537,  208,
 /*  3350 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3360 */   183,  599,  169,  610,  610,  610,  610,  610,  610,  610,
 /*  3370 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3380 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3390 */   600,  610,  597,  610,  610,  610,  610,  592,  537,  208,
 /*  3400 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3410 */   183,  599,  170,  610,  610,  610,  610,  610,  610,  610,
 /*  3420 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3430 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3440 */   600,  610,  597,  610,  610,  610,  610,  592,  537,  208,
 /*  3450 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3460 */   183,  599,  171,  610,  610,  610,  610,  610,  610,  610,
 /*  3470 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3480 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3490 */   600,  610,  597,  610,  610,  610,  610,  592,  537,  208,
 /*  3500 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3510 */   183,  599,  173,  610,  610,  610,  610,  610,  610,  610,
 /*  3520 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3530 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3540 */   600,  610,  597,  610,  610,  610,  610,  592,  537,  208,
 /*  3550 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3560 */   183,  599,  174,  610,  610,  610,  610,  610,  610,  610,
 /*  3570 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3580 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3590 */   600,  610,  597,  610,  610,  610,  610,  592,  537,  208,
 /*  3600 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3610 */   183,  599,  175,  610,  610,  610,  610,  610,  610,  610,
 /*  3620 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3630 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3640 */   600,  610,  597,  610,  610,  610,  610,  592,  537,  208,
 /*  3650 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3660 */   183,  599,  176,  610,  610,  610,  610,  610,  610,  610,
 /*  3670 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3680 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3690 */   600,  610,  597,  610,  610,  610,  610,  592,  537,  208,
 /*  3700 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3710 */   183,  599,  177,  610,  610,  610,  610,  610,  610,  610,
 /*  3720 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3730 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3740 */   600,  610,  597,  610,  610,  610,  610,  592,  537,  208,
 /*  3750 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3760 */   183,  599,  182,  610,  610,  610,  610,  610,  610,  610,
 /*  3770 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3780 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3790 */   600,  610,  597,  610,  610,  610,  610,  592,  537,  208,
 /*  3800 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3810 */   183,  599,  187,  610,  610,  610,  610,  610,  610,  610,
 /*  3820 */   610,  610,  610,  610,  610,  610,  610,  251,  610,  610,
 /*  3830 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3840 */   600,  610,  597,  610,  610,  610,  610,  592,  537,  208,
 /*  3850 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3860 */   183,  599,  251,  610,  610,  610,  610,  610,  610,  610,
 /*  3870 */   610,  610,  610,  610,  159,  600,  610,  597,  610,  610,
 /*  3880 */   610,  610,  592,  547,  208,  265,  261,  260,  259,  196,
 /*  3890 */   160,  181,  185,  163,  180,  183,  599,  251,  610,  610,
 /*  3900 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3910 */   600,  610,  597,  610,  610,  610,  610,  592,  546,  208,
 /*  3920 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  3930 */   183,  599,  251,  610,  610,  610,  610,  610,  610,  610,
 /*  3940 */   610,  610,  610,  610,  159,  600,  610,  597,  610,  610,
 /*  3950 */   610,  610,  592,  545,  208,  265,  261,  260,  259,  196,
 /*  3960 */   160,  181,  185,  163,  180,  183,  599,  251,  610,  610,
 /*  3970 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  3980 */   600,  610,  597,  610,  610,  610,  610,  592,  544,  208,
 /*  3990 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  4000 */   183,  599,  251,  610,  610,  610,  610,  610,  610,  610,
 /*  4010 */   610,  610,  610,  610,  159,  600,  610,  597,  610,  610,
 /*  4020 */   610,  610,  592,  543,  208,  265,  261,  260,  259,  196,
 /*  4030 */   160,  181,  185,  163,  180,  183,  599,  251,  610,  610,
 /*  4040 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  4050 */   600,  610,  597,  610,  610,  610,  610,  592,  542,  208,
 /*  4060 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  4070 */   183,  599,  251,  610,  610,  610,  610,  610,  610,  610,
 /*  4080 */   610,  610,  610,  610,  159,  600,  610,  597,  610,  610,
 /*  4090 */   610,  610,  592,  541,  208,  265,  261,  260,  259,  196,
 /*  4100 */   160,  181,  185,  163,  180,  183,  599,  251,  610,  610,
 /*  4110 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  4120 */   600,  610,  597,  610,  610,  610,  610,  592,  540,  208,
 /*  4130 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  4140 */   183,  599,  251,  610,  610,  610,  610,  610,  610,  610,
 /*  4150 */   610,  610,  610,  610,  159,  600,  610,  597,  610,  610,
 /*  4160 */   610,  610,  592,  539,  208,  265,  261,  260,  259,  196,
 /*  4170 */   160,  181,  185,  163,  180,  183,  599,  251,  610,  610,
 /*  4180 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  159,
 /*  4190 */   600,  610,  597,  610,  610,  610,  610,  592,  538,  208,
 /*  4200 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  4210 */   183,  599,  251,  610,  610,  610,  610,  610,  610,  610,
 /*  4220 */   610,  610,  610,  610,  159,  600,  610,  597,  610,  610,
 /*  4230 */   610,  610,  592,  536,  208,  265,  261,  260,  259,  196,
 /*  4240 */   160,  181,  185,  163,  180,  183,  599,  251,  610,  610,
 /*  4250 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  549,
 /*  4260 */   600,  610,  597,  610,  610,  610,  610,  592,  610,  208,
 /*  4270 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  4280 */   183,  599,  251,  610,  610,  610,  610,  610,  610,  610,
 /*  4290 */   610,  610,  610,  610,  266,  600,  610,  597,  610,  610,
 /*  4300 */   610,  610,  592,  610,  208,  265,  261,  260,  259,  196,
 /*  4310 */   160,  181,  185,  163,  180,  183,  599,  251,  610,   30,
 /*  4320 */   595,  610,  610,  610,  610,  610,  610,  610,  610,  443,
 /*  4330 */   600,  610,  597,  610,  610,  610,  610,  592,  607,  208,
 /*  4340 */   265,  261,  260,  259,  196,  160,  181,  185,  163,  180,
 /*  4350 */   183,  599,  108,  610,  610,  107,  150,  610,  610,  610,
 /*  4360 */   610,  610,  610,  610,  610,  607,  477,  478,  479,  480,
 /*  4370 */   482,  483,  485,  486,  487,  488,  489,  490,  491,   30,
 /*  4380 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*  4390 */   610,  610,  610,  610,  610,  610,   86,  449,  607,   30,
 /*  4400 */    88,   87,   85,   84,  258,  610,  598,  601,  602,  603,
 /*  4410 */   604,  605,  606,  610,  251,  610,  610,  610,  607,  610,
 /*  4420 */   610,  610,  610,  610,  610,  610,  610,  600,  610,  597,
 /*  4430 */   610,  610,  610,  610,  592,  610,  610,  218,  261,  260,
 /*  4440 */   259,  196,  160,  181,  185,  163,  180,  183,  599,  610,
 /*  4450 */   610,  610,  610,  610,  610,  610,   86,  610,  610,  610,
 /*  4460 */    88,   87,   85,   84,  258,  610,  598,  601,  602,  603,
 /*  4470 */   604,  605,  606,  610,  610,  610,   86,  610,  610,  610,
 /*  4480 */    88,   87,   85,   84,  258,  251,  598,  601,  602,  603,
 /*  4490 */   604,  605,  606,  610,  610,  610,  610,  610,  600,  610,
 /*  4500 */   597,  610,  610,  610,  610,  592,  610,  610,  610,  264,
 /*  4510 */   260,  259,  196,  160,  181,  185,  163,  180,  183,  599,
 /*  4520 */   251,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*  4530 */   610,  610,  610,  600,  610,  597,  610,  610,  610,  610,
 /*  4540 */   592,  610,  610,  610,  610,  263,  259,  196,  160,  181,
 /*  4550 */   185,  163,  180,  183,  599,  610,  610,  251,  610,  610,
 /*  4560 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*  4570 */   600,  610,  597,  610,  610,  610,  610,  592,  610,  610,
 /*  4580 */   251,  610,  610,  262,  196,  160,  181,  185,  163,  180,
 /*  4590 */   183,  599,  610,  600,  610,  597,  610,  610,  610,  610,
 /*  4600 */   592,  610,  251,  610,  610,  610,  610,  207,  160,  181,
 /*  4610 */   185,  163,  180,  183,  599,  600,  610,  597,  610,  610,
 /*  4620 */   610,  610,  592,  610,  610,  251,  610,  610,  610,  610,
 /*  4630 */   161,  181,  185,  163,  180,  183,  599,  610,  600,  610,
 /*  4640 */   597,  610,  610,  610,  610,  592,  610,  610,  610,  610,
 /*  4650 */   610,  610,  610,  162,  181,  185,  163,  180,  183,  599,
 /*  4660 */   251,  610,  610,  610,  610,  610,  251,  610,  610,  610,
 /*  4670 */   610,  610,  610,  600,  610,  597,  610,  610,  610,  600,
 /*  4680 */   592,  597,  610,  610,  610,  610,  592,  610,  610,  178,
 /*  4690 */   185,  163,  180,  183,  599,  186,  185,  163,  180,  183,
 /*  4700 */   599,  610,  610,  251,  610,  610,  610,  610,  610,  251,
 /*  4710 */   610,  610,  610,  610,  610,  610,  600,  610,  597,  610,
 /*  4720 */   610,  610,  600,  592,  597,  610,  610,  610,  610,  592,
 /*  4730 */   610,  251,  195,  185,  163,  180,  183,  599,  206,  185,
 /*  4740 */   163,  180,  183,  599,  600,  610,  597,  610,  610,  610,
 /*  4750 */   610,  592,  610,  251,  610,  610,  610,  610,  610,  610,
 /*  4760 */   610,  194,  163,  180,  183,  599,  600,  610,  597,  610,
 /*  4770 */   610,  610,  610,  592,  610,  251,  610,  610,  610,  251,
 /*  4780 */   610,  610,  610,  205,  163,  180,  183,  599,  600,  610,
 /*  4790 */   597,  610,  600,  610,  597,  592,  610,  610,  610,  592,
 /*  4800 */   610,  610,  610,  610,  610,  610,  164,  180,  183,  599,
 /*  4810 */   165,  180,  183,  599,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     1,   20,  108,  119,  110,    6,    7,    8,    9,   10,
 /*    10 */    11,   18,  114,   14,   15,    9,  132,  119,  134,   20,
 /*    20 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*    30 */    31,   32,   33,  109,  110,  111,  112,  153,   89,   90,
 /*    40 */    91,   92,  118,  119,  120,   46,  105,   48,   49,   50,
 /*    50 */    51,   52,   53,   54,   55,   56,   27,   28,   20,    1,
 /*    60 */   119,   55,   56,   34,   35,   36,   37,   38,   39,   40,
 /*    70 */    41,   42,   43,   44,   45,   17,    1,   78,   20,  100,
 /*    80 */    87,   82,   83,   84,   85,   86,   16,   88,   89,   90,
 /*    90 */    91,   92,   93,   94,    1,   20,   12,   13,  119,    6,
 /*   100 */     7,    8,    9,   10,   11,   55,   56,   14,   15,   79,
 /*   110 */    80,   81,  133,   20,   21,   22,   23,   24,   25,   26,
 /*   120 */    27,   28,   29,   30,   31,   32,   33,   57,   58,   59,
 /*   130 */    60,   61,   62,   63,   64,   65,    1,  100,  105,   46,
 /*   140 */   100,   48,   49,   50,   51,   52,   53,   54,   55,   56,
 /*   150 */   132,   99,  119,   20,  132,   20,  119,   73,   74,  119,
 /*   160 */   105,   84,   85,   88,   89,   90,   91,   92,   93,   94,
 /*   170 */   133,   78,  119,  133,  119,   82,   83,   84,   85,   86,
 /*   180 */   132,   88,   89,   90,   91,   92,   93,   94,    1,    1,
 /*   190 */   138,    2,    3,    6,    7,    8,    9,   10,   11,  114,
 /*   200 */    17,   14,   15,   20,  119,   17,   18,   20,   21,   22,
 /*   210 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   220 */    33,   88,   89,   90,   91,   92,   93,   94,    1,    1,
 /*   230 */   138,    4,  130,   46,  105,   48,   49,   50,   51,   52,
 /*   240 */    53,   54,   55,   56,  102,   17,   18,   20,  119,  119,
 /*   250 */   114,  109,  110,  111,  112,  119,  119,  109,  110,  111,
 /*   260 */   118,  119,  120,  133,    3,   78,  118,  119,  120,   82,
 /*   270 */    83,   84,   85,   86,   13,   88,   89,   90,   91,   92,
 /*   280 */    93,   94,    0,    1,    4,  107,  114,    5,    6,    7,
 /*   290 */     8,  119,   10,   11,  114,  113,   14,   15,  107,  119,
 /*   300 */    20,  119,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   310 */    28,   29,   30,   31,   32,   33,  106,    8,  113,    2,
 /*   320 */     3,    2,    3,    7,  119,  115,   10,   11,   46,   20,
 /*   330 */    48,   49,   50,   51,   52,   53,   54,   21,   22,   23,
 /*   340 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   350 */   113,  113,  109,  110,  111,    3,  119,  119,    6,  107,
 /*   360 */    78,  118,  119,  120,   82,   83,   84,   85,   86,    3,
 /*   370 */    88,   89,   90,   91,   92,   93,   94,    1,   12,  113,
 /*   380 */   107,    5,    6,    7,    8,  119,   10,   11,    6,  113,
 /*   390 */    14,   15,    2,    3,   12,  119,   20,   21,   22,   23,
 /*   400 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   410 */     3,    3,    3,  119,    6,    6,    9,    2,    3,    2,
 /*   420 */     3,    3,   46,  119,   48,   49,   50,   51,   52,   53,
 /*   430 */    54,    4,  119,  109,  110,  111,  132,   19,  134,    2,
 /*   440 */     3,   12,  118,  139,  120,   75,   76,   20,    2,    3,
 /*   450 */    77,   78,    2,    3,   78,  151,  152,  153,   82,   83,
 /*   460 */    84,   85,   86,  117,   88,   89,   90,   91,   92,   93,
 /*   470 */    94,    1,    3,   71,   72,    6,    6,    7,    8,    9,
 /*   480 */    10,   11,    3,    3,   14,   15,    2,    3,    9,    9,
 /*   490 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   500 */    30,   31,   32,   33,    3,   66,   67,    6,    1,    3,
 /*   510 */   105,    3,    6,  107,    2,    3,   46,  119,   48,   49,
 /*   520 */    50,   51,   52,   53,   54,  105,  130,   19,   12,   18,
 /*   530 */   132,  119,  134,  109,  110,  111,    8,  139,  116,    3,
 /*   540 */    97,  105,  118,  130,  120,  119,  130,    3,   78,  151,
 /*   550 */   152,  153,   82,   83,   84,   85,   86,   98,   88,   89,
 /*   560 */    90,   91,   92,   93,   94,    1,  119,  115,  130,   98,
 /*   570 */     6,    7,    8,    9,   10,   11,  119,  117,   14,   15,
 /*   580 */    97,  105,   97,  130,   20,   21,   22,   23,   24,   25,
 /*   590 */    26,   27,   28,   29,   30,   31,   32,   33,  130,   97,
 /*   600 */     6,    8,  116,    6,    8,    6,    8,    6,   68,    2,
 /*   610 */    46,  119,   48,   49,   50,   51,   52,   53,   54,    8,
 /*   620 */     8,    2,    2,    8,  132,   47,  134,    6,    1,   48,
 /*   630 */    17,  139,    3,   17,    6,    1,    6,    2,    6,    8,
 /*   640 */     1,    1,   78,  151,  152,  153,   82,   83,   84,   85,
 /*   650 */    86,    6,   88,   89,   90,   91,   92,   93,   94,    1,
 /*   660 */     6,   47,    2,    6,    6,    7,    8,    9,   10,   11,
 /*   670 */     1,    1,   14,   15,    1,    1,    1,    6,   20,   21,
 /*   680 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   690 */    32,   33,    6,   47,   16,   16,    8,   13,    8,    1,
 /*   700 */     4,  154,   17,   70,   46,  119,   48,   49,   50,   51,
 /*   710 */    52,   53,   54,   69,  154,   16,  154,  154,  132,  154,
 /*   720 */   134,  154,  154,  154,  154,  139,  154,  154,  154,  154,
 /*   730 */   154,  154,  154,  154,  154,  154,   78,  151,  152,  153,
 /*   740 */    82,   83,   84,   85,   86,  154,   88,   89,   90,   91,
 /*   750 */    92,   93,   94,    1,  154,  154,  154,  154,    6,    7,
 /*   760 */     8,    9,   10,   11,  154,  154,   14,   15,  154,  154,
 /*   770 */   154,  154,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   780 */    28,   29,   30,   31,   32,   33,  154,  154,  154,  154,
 /*   790 */   154,  154,  154,  154,  154,  154,  154,  154,   46,  119,
 /*   800 */    48,   49,   50,   51,   52,   53,   54,  154,  154,  154,
 /*   810 */   154,  154,  132,  154,  134,  154,  154,  154,  154,  139,
 /*   820 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*   830 */    78,  151,  152,  153,   82,   83,   84,   85,   86,  154,
 /*   840 */    88,   89,   90,   91,   92,   93,   94,    1,  154,  154,
 /*   850 */   154,  154,    6,    7,    8,    9,   10,   11,  154,  154,
 /*   860 */    14,   15,  154,  154,  154,  154,   20,   21,   22,   23,
 /*   870 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   880 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*   890 */   154,  154,   46,  119,   48,   49,   50,   51,   52,   53,
 /*   900 */    54,  154,  154,  154,  154,  154,  132,  154,  134,  154,
 /*   910 */   154,  154,  154,  139,  154,  154,  154,  154,  154,  154,
 /*   920 */   154,  154,  154,  154,   78,  151,  152,  153,   82,   83,
 /*   930 */    84,   85,   86,  154,   88,   89,   90,   91,   92,   93,
 /*   940 */    94,    1,  154,  154,  154,  154,    6,    7,    8,    9,
 /*   950 */    10,   11,  154,  154,   14,   15,  154,  154,  154,  154,
 /*   960 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   970 */    30,   31,   32,   33,  154,  154,  154,  154,  154,  154,
 /*   980 */   154,  154,  154,  154,  154,  154,   46,  119,   48,   49,
 /*   990 */    50,   51,   52,   53,   54,  154,  154,  154,  154,  154,
 /*  1000 */   132,  154,  134,  154,  154,  154,  154,  139,  154,  154,
 /*  1010 */   154,  154,  154,  154,  154,  154,  154,  154,   78,  151,
 /*  1020 */   152,  153,   82,   83,   84,   85,   86,  154,   88,   89,
 /*  1030 */    90,   91,   92,   93,   94,    1,  154,  154,  154,  154,
 /*  1040 */     6,    7,    8,    9,   10,   11,  154,  154,   14,   15,
 /*  1050 */   154,  154,  154,  154,   20,   21,   22,   23,   24,   25,
 /*  1060 */    26,   27,   28,   29,   30,   31,   32,   33,  154,  154,
 /*  1070 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1080 */    46,  119,   48,   49,   50,   51,   52,   53,   54,  154,
 /*  1090 */   154,  154,  154,  154,  132,  154,  134,  154,  154,  154,
 /*  1100 */   154,  139,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1110 */   154,  154,   78,  151,  152,  153,   82,   83,   84,   85,
 /*  1120 */    86,  154,   88,   89,   90,   91,   92,   93,   94,    1,
 /*  1130 */   154,  154,  154,  154,    6,    7,    8,    9,   10,   11,
 /*  1140 */   154,  154,   14,   15,  154,  154,  154,  154,   20,   21,
 /*  1150 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1160 */    32,   33,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1170 */   154,  154,  154,  154,   46,  119,   48,   49,   50,   51,
 /*  1180 */    52,   53,   54,  154,  154,  154,  154,  154,  132,  154,
 /*  1190 */   134,  154,  154,  154,  154,  139,  154,  154,  154,  154,
 /*  1200 */   154,  154,  154,  154,  154,  154,   78,  151,  152,  153,
 /*  1210 */    82,   83,   84,   85,   86,  154,   88,   89,   90,   91,
 /*  1220 */    92,   93,   94,    1,  154,  154,  154,  154,    6,    7,
 /*  1230 */     8,    9,   10,   11,  154,  154,   14,   15,  154,  154,
 /*  1240 */   154,  154,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  1250 */    28,   29,   30,   31,   32,   33,  154,  154,  154,  154,
 /*  1260 */   154,  154,  154,  154,  154,  154,  154,  154,   46,  119,
 /*  1270 */    48,   49,   50,   51,   52,   53,   54,  154,  154,  154,
 /*  1280 */   154,  154,  132,  154,  134,  154,  154,  154,  154,  139,
 /*  1290 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1300 */    78,  154,  154,  153,   82,   83,   84,   85,   86,  154,
 /*  1310 */    88,   89,   90,   91,   92,   93,   94,    1,  154,  154,
 /*  1320 */   154,  154,    6,    7,    8,  154,   10,   11,  154,  154,
 /*  1330 */    14,   15,  154,  154,  154,  154,   20,   21,   22,   23,
 /*  1340 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  1350 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1360 */   154,  154,   46,  154,   48,   49,   50,   51,   52,   53,
 /*  1370 */    54,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1380 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1390 */   154,  154,  154,  154,   78,  154,  154,  154,   82,   83,
 /*  1400 */    84,   85,   86,  154,   88,   89,   90,   91,   92,   93,
 /*  1410 */    94,    1,  154,  154,  154,  154,    6,    7,    8,  154,
 /*  1420 */    10,   11,  154,  154,   14,   15,  154,  154,  154,  154,
 /*  1430 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1440 */    30,   31,   32,   33,  154,  154,  154,  154,  154,  154,
 /*  1450 */   154,  154,  154,  154,  154,  154,   46,  154,   48,   49,
 /*  1460 */    50,   51,   52,   53,   54,  154,  154,  154,  154,  154,
 /*  1470 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1480 */   154,  154,  154,  154,  154,  154,  154,  154,   78,  154,
 /*  1490 */   154,  154,   82,   83,   84,   85,   86,  154,   88,   89,
 /*  1500 */    90,   91,   92,   93,   94,  103,  104,  154,  154,  154,
 /*  1510 */   154,  109,  110,  111,  154,  154,  154,  154,  116,  154,
 /*  1520 */   118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
 /*  1530 */   128,  129,  154,  131,  132,  154,  134,  154,  154,  137,
 /*  1540 */   154,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  1550 */   148,  149,  150,  151,  152,  153,  154,  154,  154,  154,
 /*  1560 */   154,  104,  154,  154,  154,  154,  109,  110,  111,  154,
 /*  1570 */   154,  154,  154,  116,  154,  118,  119,  120,  154,  122,
 /*  1580 */   123,  124,  125,  126,  127,  128,  129,  154,  131,  132,
 /*  1590 */   154,  134,  154,  154,  137,  154,  139,  140,  141,  142,
 /*  1600 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  1610 */   153,    1,    2,  154,  154,  154,  154,    7,  154,  154,
 /*  1620 */    10,   11,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1630 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1640 */    30,   31,   32,   33,    1,  154,  154,  154,  154,  154,
 /*  1650 */     7,  154,  154,   10,   11,  154,  154,  154,  154,  154,
 /*  1660 */   154,  154,  154,   20,   21,   22,   23,   24,   25,   26,
 /*  1670 */    27,   28,   29,   30,   31,   32,   33,  154,  154,  154,
 /*  1680 */   154,  154,  154,  154,  154,  154,  154,  154,   78,  154,
 /*  1690 */   154,  154,   82,   83,   84,   85,   86,  154,   88,   89,
 /*  1700 */    90,   91,   92,   93,   94,  154,  154,  154,  154,  154,
 /*  1710 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1720 */   154,   78,  154,  154,  154,   82,   83,   84,   85,   86,
 /*  1730 */    96,   88,   89,   90,   91,   92,   93,   94,  104,  154,
 /*  1740 */   154,  154,  154,  109,  110,  111,  154,  154,  154,  154,
 /*  1750 */   116,  154,  118,  119,  120,  154,  154,  154,  154,  154,
 /*  1760 */   154,  127,  154,  129,  154,  131,  132,  154,  134,  154,
 /*  1770 */   154,  137,  154,  139,  140,  141,  142,  143,  144,  145,
 /*  1780 */   146,  147,  148,  149,  150,  151,  152,  153,  154,   96,
 /*  1790 */   154,  154,  154,  154,  154,  154,  154,  104,  154,  154,
 /*  1800 */   154,  154,  109,  110,  111,  154,  154,  154,  154,  116,
 /*  1810 */   154,  118,  119,  120,  154,  154,  154,  154,  154,  154,
 /*  1820 */   127,  154,  129,  154,  131,  132,  154,  134,  154,  154,
 /*  1830 */   137,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  1840 */   147,  148,  149,  150,  151,  152,  153,  101,  154,  154,
 /*  1850 */   104,  154,  154,  154,  154,  109,  110,  111,  154,  154,
 /*  1860 */   154,  154,  116,  154,  118,  119,  120,  154,  154,  154,
 /*  1870 */   154,  154,  154,  127,  154,  129,  154,  131,  132,  154,
 /*  1880 */   134,  154,  154,  137,  154,  139,  140,  141,  142,  143,
 /*  1890 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  1900 */   154,  154,  154,  154,  101,  154,  154,  104,  154,  154,
 /*  1910 */   154,  154,  109,  110,  111,  154,  154,  154,  154,  116,
 /*  1920 */   154,  118,  119,  120,  154,  154,  154,  154,  154,  154,
 /*  1930 */   127,  154,  129,  154,  131,  132,  154,  134,  154,  154,
 /*  1940 */   137,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  1950 */   147,  148,  149,  150,  151,  152,  153,  101,  154,  154,
 /*  1960 */   104,  154,  154,  154,  154,  109,  110,  111,  154,  154,
 /*  1970 */   154,  154,  116,  154,  118,  119,  120,  154,  154,  154,
 /*  1980 */   154,  154,  154,  127,  154,  129,  154,  131,  132,  154,
 /*  1990 */   134,  154,  154,  137,  154,  139,  140,  141,  142,  143,
 /*  2000 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  2010 */   154,  154,  154,  154,  101,  154,  154,  104,  154,  154,
 /*  2020 */   154,  154,  109,  110,  111,  154,  154,  154,  154,  116,
 /*  2030 */   154,  118,  119,  120,  154,  154,  154,  154,  154,  154,
 /*  2040 */   127,  154,  129,  154,  131,  132,  154,  134,  154,  154,
 /*  2050 */   137,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2060 */   147,  148,  149,  150,  151,  152,  153,  101,  154,  154,
 /*  2070 */   104,  154,  154,  154,  154,  109,  110,  111,  154,  154,
 /*  2080 */   154,  154,  116,  154,  118,  119,  120,  154,  154,  154,
 /*  2090 */   154,  154,  154,  127,  154,  129,  154,  131,  132,  154,
 /*  2100 */   134,  154,  154,  137,  154,  139,  140,  141,  142,  143,
 /*  2110 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  2120 */   154,  154,  154,  154,  101,  154,  154,  104,  154,  154,
 /*  2130 */   154,  154,  109,  110,  111,  154,  154,  154,  154,  116,
 /*  2140 */   154,  118,  119,  120,  154,  154,  154,  154,  154,  154,
 /*  2150 */   127,  154,  129,  154,  131,  132,  154,  134,  154,  154,
 /*  2160 */   137,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2170 */   147,  148,  149,  150,  151,  152,  153,  154,  154,   96,
 /*  2180 */   154,  154,  154,  154,  154,  154,  154,  104,  154,  154,
 /*  2190 */   154,  154,  109,  110,  111,  154,  154,  154,  154,  116,
 /*  2200 */   154,  118,  119,  120,  154,  154,  154,  154,  154,  154,
 /*  2210 */   127,  154,  129,  154,  131,  132,  154,  134,  154,  154,
 /*  2220 */   137,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2230 */   147,  148,  149,  150,  151,  152,  153,  104,  154,  154,
 /*  2240 */   154,  154,  109,  110,  111,  154,  154,  154,  154,  116,
 /*  2250 */   154,  118,  119,  120,  154,  154,  154,  154,  154,  154,
 /*  2260 */   127,  154,  129,  154,  131,  132,  154,  134,  135,  154,
 /*  2270 */   137,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2280 */   147,  148,  149,  150,  151,  152,  153,  154,  154,  154,
 /*  2290 */   154,  154,  104,  154,  154,  154,  154,  109,  110,  111,
 /*  2300 */   154,  154,  154,  154,  116,  154,  118,  119,  120,  154,
 /*  2310 */   154,  154,  154,  154,  154,  127,  154,  129,  154,  131,
 /*  2320 */   132,  154,  134,  135,  154,  137,  154,  139,  140,  141,
 /*  2330 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  2340 */   152,  153,  104,  154,  154,  154,  154,  109,  110,  111,
 /*  2350 */   154,  154,  154,  154,  116,  154,  118,  119,  120,  154,
 /*  2360 */   154,  154,  154,  154,  154,  127,  154,  129,  154,  131,
 /*  2370 */   132,  154,  134,  135,  154,  137,  154,  139,  140,  141,
 /*  2380 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  2390 */   152,  153,  154,  154,  154,  154,  154,  104,  154,  154,
 /*  2400 */   154,  154,  109,  110,  111,  154,  154,  154,  154,  116,
 /*  2410 */   154,  118,  119,  120,  154,  154,  154,  154,  154,  154,
 /*  2420 */   127,  154,  129,  154,  131,  132,  154,  134,  135,  154,
 /*  2430 */   137,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2440 */   147,  148,  149,  150,  151,  152,  153,  104,  154,  154,
 /*  2450 */   154,  154,  109,  110,  111,  154,  154,  154,  154,  116,
 /*  2460 */   154,  118,  119,  120,  154,  154,  154,  154,  154,  154,
 /*  2470 */   127,  154,  129,  154,  131,  132,  154,  134,  135,  154,
 /*  2480 */   137,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2490 */   147,  148,  149,  150,  151,  152,  153,  154,  154,  154,
 /*  2500 */   154,  154,  104,  154,  154,  154,  154,  109,  110,  111,
 /*  2510 */   154,  154,  154,  154,  116,  154,  118,  119,  120,  154,
 /*  2520 */   154,  154,  154,  154,  154,  127,  154,  129,  154,  131,
 /*  2530 */   132,  154,  134,  154,  154,  137,  154,  139,  140,  141,
 /*  2540 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  2550 */   152,  153,  104,  154,  154,  154,  154,  109,  110,  111,
 /*  2560 */   154,  154,  154,  154,  116,  154,  118,  119,  120,  154,
 /*  2570 */   154,  154,  154,  154,  154,  127,  154,  129,  154,  131,
 /*  2580 */   132,  154,  134,  154,  154,  137,  154,  139,  140,  141,
 /*  2590 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  2600 */   152,  153,  154,  154,  154,  154,  154,  104,  154,  154,
 /*  2610 */   154,  154,  109,  110,  111,  154,  154,  154,  154,  116,
 /*  2620 */   154,  118,  119,  120,  154,  154,  154,  154,  154,  154,
 /*  2630 */   127,  154,  129,  154,  131,  132,  154,  134,  154,  154,
 /*  2640 */   137,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2650 */   147,  148,  149,  150,  151,  152,  153,  104,  154,  154,
 /*  2660 */   154,  154,  109,  110,  111,  154,  154,  154,  154,  116,
 /*  2670 */   154,  118,  119,  120,  154,  154,  154,  154,  154,  154,
 /*  2680 */   127,  154,  129,  154,  131,  132,  154,  134,  154,  154,
 /*  2690 */   137,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2700 */   147,  148,  149,  150,  151,  152,  153,  154,  154,  154,
 /*  2710 */   154,  154,  104,  154,  154,  154,  154,  109,  110,  111,
 /*  2720 */   154,  154,  154,  154,  116,  154,  118,  119,  120,  154,
 /*  2730 */   154,  154,  154,  154,  154,  127,  154,  129,  154,  131,
 /*  2740 */   132,  154,  134,  154,  154,  137,  154,  139,  140,  141,
 /*  2750 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  2760 */   152,  153,  104,  154,  154,  154,  154,  109,  110,  111,
 /*  2770 */   154,  154,  154,  154,  116,  154,  118,  119,  120,  154,
 /*  2780 */   154,  154,  154,  154,  154,  127,  154,  129,  154,  131,
 /*  2790 */   132,  154,  134,  154,  154,  137,  154,  139,  140,  141,
 /*  2800 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  2810 */   152,  153,  154,  154,  154,  102,  154,  104,  154,  154,
 /*  2820 */   154,  154,  109,  110,  111,  112,  154,  154,  154,  154,
 /*  2830 */   154,  118,  119,  120,  154,  154,  154,  154,  154,  154,
 /*  2840 */   154,  154,  154,  154,  131,  132,  154,  134,  154,  154,
 /*  2850 */   154,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2860 */   147,  148,  149,  150,  151,  152,  153,  104,  154,  154,
 /*  2870 */   154,  154,  109,  110,  111,  154,  154,  154,  154,  154,
 /*  2880 */   154,  118,  119,  120,  154,  154,  154,  154,  154,  154,
 /*  2890 */   154,  154,  154,  154,  131,  132,  154,  134,  154,  154,
 /*  2900 */   154,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2910 */   147,  148,  149,  150,  151,  152,  153,  109,  110,  111,
 /*  2920 */   154,  154,  154,  154,  154,  154,  118,  119,  120,  154,
 /*  2930 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  2940 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  2950 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  2960 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  2970 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  2980 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  2990 */   132,  154,  134,  154,  136,  154,  154,  139,  140,  141,
 /*  3000 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3010 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3020 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3030 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3040 */   132,  154,  134,  154,  136,  154,  154,  139,  140,  141,
 /*  3050 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3060 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3070 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3080 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3090 */   132,  154,  134,  154,  136,  154,  154,  139,  140,  141,
 /*  3100 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3110 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3120 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3130 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3140 */   132,  154,  134,  154,  136,  154,  154,  139,  140,  141,
 /*  3150 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3160 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3170 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3180 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3190 */   132,  154,  134,  154,  136,  154,  154,  139,  140,  141,
 /*  3200 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3210 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3220 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3230 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3240 */   132,  154,  134,  154,  136,  154,  154,  139,  140,  141,
 /*  3250 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3260 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3270 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3280 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3290 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3300 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3310 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3320 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3330 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3340 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3350 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3360 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3370 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3380 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3390 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3400 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3410 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3420 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3430 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3440 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3450 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3460 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3470 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3480 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3490 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3500 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3510 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3520 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3530 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3540 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3550 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3560 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3570 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3580 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3590 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3600 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3610 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3620 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3630 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3640 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3650 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3660 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3670 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3680 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3690 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3700 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3710 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3720 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3730 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3740 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3750 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3760 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3770 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3780 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3790 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3800 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3810 */   152,  153,  104,  154,  154,  154,  154,  154,  154,  154,
 /*  3820 */   154,  154,  154,  154,  154,  154,  154,  119,  154,  154,
 /*  3830 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3840 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3850 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3860 */   152,  153,  119,  154,  154,  154,  154,  154,  154,  154,
 /*  3870 */   154,  154,  154,  154,  131,  132,  154,  134,  154,  154,
 /*  3880 */   154,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  3890 */   147,  148,  149,  150,  151,  152,  153,  119,  154,  154,
 /*  3900 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3910 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3920 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3930 */   152,  153,  119,  154,  154,  154,  154,  154,  154,  154,
 /*  3940 */   154,  154,  154,  154,  131,  132,  154,  134,  154,  154,
 /*  3950 */   154,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  3960 */   147,  148,  149,  150,  151,  152,  153,  119,  154,  154,
 /*  3970 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  3980 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  3990 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  4000 */   152,  153,  119,  154,  154,  154,  154,  154,  154,  154,
 /*  4010 */   154,  154,  154,  154,  131,  132,  154,  134,  154,  154,
 /*  4020 */   154,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  4030 */   147,  148,  149,  150,  151,  152,  153,  119,  154,  154,
 /*  4040 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  4050 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  4060 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  4070 */   152,  153,  119,  154,  154,  154,  154,  154,  154,  154,
 /*  4080 */   154,  154,  154,  154,  131,  132,  154,  134,  154,  154,
 /*  4090 */   154,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  4100 */   147,  148,  149,  150,  151,  152,  153,  119,  154,  154,
 /*  4110 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  4120 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  4130 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  4140 */   152,  153,  119,  154,  154,  154,  154,  154,  154,  154,
 /*  4150 */   154,  154,  154,  154,  131,  132,  154,  134,  154,  154,
 /*  4160 */   154,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  4170 */   147,  148,  149,  150,  151,  152,  153,  119,  154,  154,
 /*  4180 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  4190 */   132,  154,  134,  154,  154,  154,  154,  139,  140,  141,
 /*  4200 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  4210 */   152,  153,  119,  154,  154,  154,  154,  154,  154,  154,
 /*  4220 */   154,  154,  154,  154,  131,  132,  154,  134,  154,  154,
 /*  4230 */   154,  154,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  4240 */   147,  148,  149,  150,  151,  152,  153,  119,  154,  154,
 /*  4250 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  4260 */   132,  154,  134,  154,  154,  154,  154,  139,  154,  141,
 /*  4270 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  4280 */   152,  153,  119,  154,  154,  154,  154,  154,  154,  154,
 /*  4290 */   154,  154,  154,  154,  131,  132,  154,  134,  154,  154,
 /*  4300 */   154,  154,  139,  154,  141,  142,  143,  144,  145,  146,
 /*  4310 */   147,  148,  149,  150,  151,  152,  153,  119,  154,    1,
 /*  4320 */     2,  154,  154,  154,  154,  154,  154,  154,  154,  131,
 /*  4330 */   132,  154,  134,  154,  154,  154,  154,  139,   20,  141,
 /*  4340 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  4350 */   152,  153,    7,  154,  154,   10,   11,  154,  154,  154,
 /*  4360 */   154,  154,  154,  154,  154,   20,   21,   22,   23,   24,
 /*  4370 */    25,   26,   27,   28,   29,   30,   31,   32,   33,    1,
 /*  4380 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4390 */   154,  154,  154,  154,  154,  154,   78,   19,   20,    1,
 /*  4400 */    82,   83,   84,   85,   86,  154,   88,   89,   90,   91,
 /*  4410 */    92,   93,   94,  154,  119,  154,  154,  154,   20,  154,
 /*  4420 */   154,  154,  154,  154,  154,  154,  154,  132,  154,  134,
 /*  4430 */   154,  154,  154,  154,  139,  154,  154,  142,  143,  144,
 /*  4440 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  4450 */   154,  154,  154,  154,  154,  154,   78,  154,  154,  154,
 /*  4460 */    82,   83,   84,   85,   86,  154,   88,   89,   90,   91,
 /*  4470 */    92,   93,   94,  154,  154,  154,   78,  154,  154,  154,
 /*  4480 */    82,   83,   84,   85,   86,  119,   88,   89,   90,   91,
 /*  4490 */    92,   93,   94,  154,  154,  154,  154,  154,  132,  154,
 /*  4500 */   134,  154,  154,  154,  154,  139,  154,  154,  154,  143,
 /*  4510 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  4520 */   119,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4530 */   154,  154,  154,  132,  154,  134,  154,  154,  154,  154,
 /*  4540 */   139,  154,  154,  154,  154,  144,  145,  146,  147,  148,
 /*  4550 */   149,  150,  151,  152,  153,  154,  154,  119,  154,  154,
 /*  4560 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4570 */   132,  154,  134,  154,  154,  154,  154,  139,  154,  154,
 /*  4580 */   119,  154,  154,  145,  146,  147,  148,  149,  150,  151,
 /*  4590 */   152,  153,  154,  132,  154,  134,  154,  154,  154,  154,
 /*  4600 */   139,  154,  119,  154,  154,  154,  154,  146,  147,  148,
 /*  4610 */   149,  150,  151,  152,  153,  132,  154,  134,  154,  154,
 /*  4620 */   154,  154,  139,  154,  154,  119,  154,  154,  154,  154,
 /*  4630 */   147,  148,  149,  150,  151,  152,  153,  154,  132,  154,
 /*  4640 */   134,  154,  154,  154,  154,  139,  154,  154,  154,  154,
 /*  4650 */   154,  154,  154,  147,  148,  149,  150,  151,  152,  153,
 /*  4660 */   119,  154,  154,  154,  154,  154,  119,  154,  154,  154,
 /*  4670 */   154,  154,  154,  132,  154,  134,  154,  154,  154,  132,
 /*  4680 */   139,  134,  154,  154,  154,  154,  139,  154,  154,  148,
 /*  4690 */   149,  150,  151,  152,  153,  148,  149,  150,  151,  152,
 /*  4700 */   153,  154,  154,  119,  154,  154,  154,  154,  154,  119,
 /*  4710 */   154,  154,  154,  154,  154,  154,  132,  154,  134,  154,
 /*  4720 */   154,  154,  132,  139,  134,  154,  154,  154,  154,  139,
 /*  4730 */   154,  119,  148,  149,  150,  151,  152,  153,  148,  149,
 /*  4740 */   150,  151,  152,  153,  132,  154,  134,  154,  154,  154,
 /*  4750 */   154,  139,  154,  119,  154,  154,  154,  154,  154,  154,
 /*  4760 */   154,  149,  150,  151,  152,  153,  132,  154,  134,  154,
 /*  4770 */   154,  154,  154,  139,  154,  119,  154,  154,  154,  119,
 /*  4780 */   154,  154,  154,  149,  150,  151,  152,  153,  132,  154,
 /*  4790 */   134,  154,  132,  154,  134,  139,  154,  154,  154,  139,
 /*  4800 */   154,  154,  154,  154,  154,  154,  150,  151,  152,  153,
 /*  4810 */   150,  151,  152,  153,
};
#define YY_SHIFT_USE_DFLT (4814)
#define YY_SHIFT_COUNT    (267)
#define YY_SHIFT_MIN      (-51)
#define YY_SHIFT_MAX      (4398)
static const short yy_shift_ofst[] = {
 /*     0 */   376,  282,   -1,   -1,  470,  470,  470,  470,  470,  470,
 /*    10 */   564, 1316, 1316, 1316, 1316, 1316,   93,  187,  658,  752,
 /*    20 */   846,  940, 1034, 1128, 1222, 1410, 1410, 1410, 1410, 1610,
 /*    30 */  1643, 1643, 4398, 4398, 4398, 4398, 4398, 4398, 4318, 4378,
 /*    40 */  4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398,
 /*    50 */  4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398,
 /*    60 */  4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398,
 /*    70 */  4398, 4398, 4398, 4398, 4398, 4398, 4398, 4345, 4398, 4398,
 /*    80 */  4345, 4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398,
 /*    90 */  4345, 4345,  316,  316,   75,  133,  -19,  -19,  -19,   29,
 /*   100 */    58,  135,  135,   50,  183,  183,  183,  135,  135,  183,
 /*   110 */   -19,   38,  -19,  -19,  -19,  -19,  -19,  -19,  -51,  -51,
 /*   120 */   -51,  227,    6,  188,  228,  309,  382,  382,  280,  366,
 /*   130 */   366,  309,  427,  429,  507,  507,  516,  511,  -19,  528,
 /*   140 */   536,  507,  511,  511,  -19,  511,  544,  -19,   38,  544,
 /*   150 */   429,  536,  536,  507,  511,  -19,  511,  536,  528,   70,
 /*   160 */    84,   84,   84,   30,   30,   30,  407,  352,   77,  189,
 /*   170 */   317,  408,  409,  319,  390,  415,  417,  437,  370,  446,
 /*   180 */    77,  370,  418,   -7,   77,  373,  370,  450,  261,  479,
 /*   190 */   480,  469,  501,   77,  373,  370,  402,  508,  484,   77,
 /*   200 */    77,   77,   77,   77,   77,  373,  370,  402,  439,  506,
 /*   210 */   512,  594,  593,  597,  596,  599,  598,  601,  540,  607,
 /*   220 */   611,  612,  619,  620,  615,  578,  621,  627,  581,  629,
 /*   230 */   613,  628,  630,  616,  631,  634,  635,  632,  645,  639,
 /*   240 */   640,  614,  660,  654,  657,  669,  670,  646,  673,  674,
 /*   250 */   671,  675,  686,  678,  679,  688,  684,  690,  698,  696,
 /*   260 */   633,  644,  696,  633,  644,  540,  685,  699,
};
#define YY_REDUCE_USE_DFLT (-117)
#define YY_REDUCE_COUNT (158)
#define YY_REDUCE_MIN   (-116)
#define YY_REDUCE_MAX   (4660)
static const short yy_reduce_ofst[] = {
 /*     0 */  1402, 1457, 1634, 1693, 1746, 1803, 1856, 1913, 1966, 2023,
 /*    10 */  2083, 2133, 2188, 2238, 2293, 2343, 2398, 2398, 2448, 2448,
 /*    20 */  2398, 2448, 2448, 2448, 2448, 2503, 2553, 2608, 2658, 2713,
 /*    30 */  2763, 2808, 2858, 2908, 2958, 3008, 3058, 3108, 3158, 3208,
 /*    40 */  3258, 3308, 3358, 3408, 3458, 3508, 3558, 3608, 3658, 3708,
 /*    50 */  3743, 3778, 3813, 3848, 3883, 3918, 3953, 3988, 4023, 4058,
 /*    60 */  4093, 4128, 4163, 4198, 4295, 4366, 4401, 4438, 4461, 4483,
 /*    70 */  4506, 4541, 4547, 4584, 4590, 4612, 4634,  142, 4656, 4660,
 /*    80 */   -76,  304,  398,  492,  586,  680,  774,  868,  962, 1056,
 /*    90 */   148,  243,  324,  424, 1150, -116,  -21,   37,   40, -106,
 /*   100 */  -102,  -59,   33,   52,   85,  136,  172,   55,  129,  180,
 /*   110 */   182,  210,  130,  205,  237,  238,  266,  276,   18,   22,
 /*   120 */    48,   53,   92,  102,  102,  137,  178,  191,   53,  252,
 /*   130 */   273,  294,  313,  346,  405,  420,  406,  396,  412,  422,
 /*   140 */   443,  436,  413,  416,  426,  438,  459,  447,  452,  471,
 /*   150 */   460,  483,  485,  476,  453,  457,  468,  502,  486,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
 /*    10 */   679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
 /*    20 */   679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
 /*    30 */   679,  679,  724,  724,  724,  724,  724,  724,  806,  806,
 /*    40 */   806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
 /*    50 */   806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
 /*    60 */   806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
 /*    70 */   806,  806,  806,  806,  806,  806,  806,  679,  806,  806,
 /*    80 */   679,  806,  806,  806,  806,  806,  806,  806,  806,  806,
 /*    90 */   679,  679,  679,  679,  806,  806,  806,  806,  806,  806,
 /*   100 */   794,  633,  633,  727,  806,  806,  806,  633,  633,  806,
 /*   110 */   806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
 /*   120 */   806,  794,  806,  648,  648,  806,  670,  669,  806,  631,
 /*   130 */   631,  806,  806,  660,  633,  633,  631,  648,  806,  806,
 /*   140 */   651,  633,  648,  648,  806,  648,  654,  806,  806,  654,
 /*   150 */   660,  651,  651,  633,  648,  806,  648,  651,  806,  746,
 /*   160 */   761,  760,  759,  772,  771,  770,  806,  806,  784,  806,
 /*   170 */   806,  806,  806,  806,  806,  806,  806,  806,  765,  806,
 /*   180 */   776,  766,  806,  787,  775,  769,  764,  806,  806,  806,
 /*   190 */   806,  806,  806,  774,  768,  763,  758,  806,  806,  781,
 /*   200 */   780,  779,  778,  777,  773,  767,  762,  757,  748,  806,
 /*   210 */   806,  671,  806,  806,  806,  806,  806,  806,  749,  806,
 /*   220 */   806,  806,  806,  806,  806,  806,  806,  806,  806,  723,
 /*   230 */   806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
 /*   240 */   806,  709,  806,  806,  806,  806,  806,  806,  806,  806,
 /*   250 */   806,  794,  806,  806,  658,  806,  806,  806,  806,  756,
 /*   260 */   754,  752,  755,  753,  751,  750,  806,  640,
};
/********** End of lemon-generated parsing tables *****************************/

/* The next table maps tokens (terminal symbols) into fallback tokens.  
** If a construct like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
**
** This feature can be used, for example, to cause some keywords in a language
** to revert to identifiers if they keyword does not apply in the context where
** it appears.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
**
** After the "shift" half of a SHIFTREDUCE action, the stateno field
** actually contains the reduce action for the second half of the
** SHIFTREDUCE.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  yyStackEntry *yytos;          /* Pointer to top element of the stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyhwm;                    /* High-water mark of the stack */
#endif
#ifndef YYNOERRORRECOVERY
  int yyerrcnt;                 /* Shifts left before out of the error */
#endif
  BTParserARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
  yyStackEntry yystk0;          /* First stack entry */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void BTParserTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "O_ROUND",       "C_ROUND",       "COMMA",       
  "BIN_AND",       "TYPEDEF",       "SEMICOLON",     "STRUCT",      
  "O_CURLY",       "C_CURLY",       "UNION",         "ENUM",        
  "LT",            "GT",            "CONST",         "LOCAL",       
  "ASSIGN",        "COLON",         "O_SQUARE",      "C_SQUARE",    
  "IDENTIFIER",    "VOID",          "BOOL",          "UNSIGNED",    
  "SIGNED",        "WSTRING",       "STRING",        "CHAR",        
  "WCHAR",         "TIME",          "DOSDATE",       "DOSTIME",     
  "OLETIME",       "FILETIME",      "BYTE",          "UCHAR",       
  "UBYTE",         "SHORT",         "USHORT",        "INT32",       
  "UINT32",        "INT64",         "UINT64",        "HFLOAT",      
  "FLOAT",         "DOUBLE",        "IF",            "ELSE",        
  "WHILE",         "FOR",           "DO",            "SWITCH",      
  "BREAK",         "CONTINUE",      "RETURN",        "CASE",        
  "DEFAULT",       "ADD_ASSIGN",    "SUB_ASSIGN",    "MUL_ASSIGN",  
  "DIV_ASSIGN",    "XOR_ASSIGN",    "AND_ASSIGN",    "OR_ASSIGN",   
  "LS_ASSIGN",     "RS_ASSIGN",     "QUESTION",      "LOG_OR",      
  "LOG_AND",       "BIN_OR",        "BIN_XOR",       "EQ",          
  "NE",            "LE",            "GE",            "LSL",         
  "LSR",           "ADD",           "SUB",           "MUL",         
  "DIV",           "MOD",           "LOG_NOT",       "BIN_NOT",     
  "INC",           "DEC",           "SIZEOF",        "DOT",         
  "LITERAL_STRING",  "LITERAL_OCT",   "LITERAL_DEC",   "LITERAL_HEX", 
  "LITERAL_REAL",  "TRUE",          "FALSE",         "error",       
  "stm_list",      "var_list",      "var_list_no_assign",  "case_stms",   
  "enum_def",      "struct_stms",   "params",        "decls",       
  "expr",          "args_decl",     "custom_vars",   "custom_var_decl",
  "scalar",        "string",        "character",     "datetime",    
  "param",         "var",           "var_no_assign",  "custom_var",  
  "block",         "enum_type",     "type",          "id",          
  "sign",          "program",       "decl",          "func_decl",   
  "struct_decl",   "union_decl",    "enum_decl",     "var_decl",    
  "typedef_decl",  "stm",           "array",         "op_if",       
  "number",        "enum_val",      "literal",       "then_stm",    
  "arg",           "normal_stm",    "case_stm",      "value",       
  "op_assign",     "op_or",         "op_and",        "op_binor",    
  "op_binxor",     "op_binand",     "op_equate",     "op_compare",  
  "op_shift",      "op_add",        "op_mult",       "op_unary",    
  "op_pointer",    "boolean",     
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= decls",
 /*   1 */ "decls ::= decls decl",
 /*   2 */ "decls ::= decl",
 /*   3 */ "decl ::= func_decl",
 /*   4 */ "decl ::= struct_decl",
 /*   5 */ "decl ::= union_decl",
 /*   6 */ "decl ::= enum_decl",
 /*   7 */ "decl ::= var_decl",
 /*   8 */ "decl ::= typedef_decl",
 /*   9 */ "decl ::= stm",
 /*  10 */ "func_decl ::= type id O_ROUND params C_ROUND block",
 /*  11 */ "func_decl ::= type id O_ROUND C_ROUND block",
 /*  12 */ "params ::= params COMMA param",
 /*  13 */ "params ::= param",
 /*  14 */ "param ::= type BIN_AND id array",
 /*  15 */ "param ::= type id array",
 /*  16 */ "param ::= id BIN_AND id array",
 /*  17 */ "param ::= id id array",
 /*  18 */ "typedef_decl ::= TYPEDEF type id array custom_var_decl SEMICOLON",
 /*  19 */ "struct_decl ::= STRUCT id args_decl O_CURLY struct_stms C_CURLY custom_var_decl SEMICOLON",
 /*  20 */ "union_decl ::= UNION id args_decl O_CURLY struct_stms C_CURLY custom_var_decl SEMICOLON",
 /*  21 */ "enum_decl ::= ENUM enum_type id O_CURLY enum_def C_CURLY SEMICOLON",
 /*  22 */ "custom_var_decl ::= LT custom_vars GT",
 /*  23 */ "custom_var_decl ::=",
 /*  24 */ "args_decl ::= O_ROUND params C_ROUND",
 /*  25 */ "args_decl ::=",
 /*  26 */ "var_decl ::= CONST type var var_list SEMICOLON",
 /*  27 */ "var_decl ::= CONST id var var_list SEMICOLON",
 /*  28 */ "var_decl ::= LOCAL type var var_list SEMICOLON",
 /*  29 */ "var_decl ::= LOCAL id var var_list SEMICOLON",
 /*  30 */ "var_decl ::= type var_no_assign var_list_no_assign custom_var_decl SEMICOLON",
 /*  31 */ "var_decl ::= id var_no_assign var_list_no_assign custom_var_decl SEMICOLON",
 /*  32 */ "var ::= id array",
 /*  33 */ "var ::= id array ASSIGN op_if",
 /*  34 */ "var_no_assign ::= id array",
 /*  35 */ "var_no_assign ::= id COLON number",
 /*  36 */ "var_no_assign ::= id O_ROUND expr C_ROUND",
 /*  37 */ "var_no_assign ::= COLON number",
 /*  38 */ "array ::= O_SQUARE expr C_SQUARE",
 /*  39 */ "array ::= O_SQUARE C_SQUARE",
 /*  40 */ "array ::=",
 /*  41 */ "var_list ::= var_list COMMA var",
 /*  42 */ "var_list ::= COMMA var",
 /*  43 */ "var_list ::=",
 /*  44 */ "var_list_no_assign ::= var_list_no_assign COMMA var_no_assign",
 /*  45 */ "var_list_no_assign ::= COMMA var_no_assign",
 /*  46 */ "var_list_no_assign ::=",
 /*  47 */ "enum_def ::= enum_def COMMA enum_val",
 /*  48 */ "enum_def ::= enum_val",
 /*  49 */ "enum_val ::= id ASSIGN number",
 /*  50 */ "enum_val ::= id",
 /*  51 */ "enum_type ::= LT type GT",
 /*  52 */ "enum_type ::=",
 /*  53 */ "custom_vars ::= custom_vars COMMA custom_var",
 /*  54 */ "custom_vars ::= custom_var",
 /*  55 */ "custom_var ::= IDENTIFIER ASSIGN id",
 /*  56 */ "custom_var ::= IDENTIFIER ASSIGN literal",
 /*  57 */ "type ::= sign scalar",
 /*  58 */ "type ::= sign character",
 /*  59 */ "type ::= string",
 /*  60 */ "type ::= datetime",
 /*  61 */ "type ::= STRUCT id args_decl O_CURLY struct_stms C_CURLY",
 /*  62 */ "type ::= UNION id args_decl O_CURLY struct_stms C_CURLY",
 /*  63 */ "type ::= ENUM enum_type id O_CURLY enum_def C_CURLY",
 /*  64 */ "type ::= STRUCT args_decl O_CURLY struct_stms C_CURLY",
 /*  65 */ "type ::= UNION args_decl O_CURLY struct_stms C_CURLY",
 /*  66 */ "type ::= ENUM enum_type O_CURLY enum_def C_CURLY",
 /*  67 */ "type ::= VOID",
 /*  68 */ "type ::= BOOL",
 /*  69 */ "sign ::= UNSIGNED",
 /*  70 */ "sign ::= SIGNED",
 /*  71 */ "sign ::=",
 /*  72 */ "string ::= WSTRING",
 /*  73 */ "string ::= STRING",
 /*  74 */ "string ::= character",
 /*  75 */ "character ::= CHAR",
 /*  76 */ "character ::= WCHAR",
 /*  77 */ "datetime ::= TIME",
 /*  78 */ "datetime ::= DOSDATE",
 /*  79 */ "datetime ::= DOSTIME",
 /*  80 */ "datetime ::= OLETIME",
 /*  81 */ "datetime ::= FILETIME",
 /*  82 */ "scalar ::= BYTE",
 /*  83 */ "scalar ::= UCHAR",
 /*  84 */ "scalar ::= UBYTE",
 /*  85 */ "scalar ::= SHORT",
 /*  86 */ "scalar ::= USHORT",
 /*  87 */ "scalar ::= INT32",
 /*  88 */ "scalar ::= UINT32",
 /*  89 */ "scalar ::= INT64",
 /*  90 */ "scalar ::= UINT64",
 /*  91 */ "scalar ::= HFLOAT",
 /*  92 */ "scalar ::= FLOAT",
 /*  93 */ "scalar ::= DOUBLE",
 /*  94 */ "struct_stms ::= struct_stms stm",
 /*  95 */ "struct_stms ::= stm",
 /*  96 */ "struct_stms ::=",
 /*  97 */ "stm ::= IF O_ROUND expr C_ROUND stm",
 /*  98 */ "stm ::= IF O_ROUND expr C_ROUND then_stm ELSE stm",
 /*  99 */ "stm ::= WHILE O_ROUND expr C_ROUND stm",
 /* 100 */ "stm ::= FOR O_ROUND arg SEMICOLON arg SEMICOLON arg C_ROUND stm",
 /* 101 */ "stm ::= normal_stm",
 /* 102 */ "then_stm ::= IF O_ROUND expr C_ROUND then_stm ELSE then_stm",
 /* 103 */ "then_stm ::= WHILE O_ROUND expr C_ROUND then_stm",
 /* 104 */ "then_stm ::= FOR O_ROUND arg SEMICOLON arg SEMICOLON arg C_ROUND then_stm",
 /* 105 */ "then_stm ::= normal_stm",
 /* 106 */ "normal_stm ::= DO stm WHILE O_ROUND expr C_ROUND SEMICOLON",
 /* 107 */ "normal_stm ::= SWITCH O_ROUND expr C_ROUND O_CURLY case_stms C_CURLY",
 /* 108 */ "normal_stm ::= var_decl",
 /* 109 */ "normal_stm ::= block",
 /* 110 */ "normal_stm ::= expr SEMICOLON",
 /* 111 */ "normal_stm ::= BREAK SEMICOLON",
 /* 112 */ "normal_stm ::= CONTINUE SEMICOLON",
 /* 113 */ "normal_stm ::= RETURN expr SEMICOLON",
 /* 114 */ "normal_stm ::= SEMICOLON",
 /* 115 */ "arg ::= expr",
 /* 116 */ "arg ::=",
 /* 117 */ "case_stms ::= case_stms case_stm",
 /* 118 */ "case_stms ::= case_stm",
 /* 119 */ "case_stms ::=",
 /* 120 */ "case_stm ::= CASE value COLON stm_list",
 /* 121 */ "case_stm ::= DEFAULT COLON stm_list",
 /* 122 */ "block ::= O_CURLY stm_list C_CURLY",
 /* 123 */ "stm_list ::= stm_list stm",
 /* 124 */ "stm_list ::= stm",
 /* 125 */ "stm_list ::=",
 /* 126 */ "expr ::= expr COMMA op_assign",
 /* 127 */ "expr ::= op_assign",
 /* 128 */ "op_assign ::= op_if ASSIGN op_assign",
 /* 129 */ "op_assign ::= op_if ADD_ASSIGN op_assign",
 /* 130 */ "op_assign ::= op_if SUB_ASSIGN op_assign",
 /* 131 */ "op_assign ::= op_if MUL_ASSIGN op_assign",
 /* 132 */ "op_assign ::= op_if DIV_ASSIGN op_assign",
 /* 133 */ "op_assign ::= op_if XOR_ASSIGN op_assign",
 /* 134 */ "op_assign ::= op_if AND_ASSIGN op_assign",
 /* 135 */ "op_assign ::= op_if OR_ASSIGN op_assign",
 /* 136 */ "op_assign ::= op_if LS_ASSIGN op_assign",
 /* 137 */ "op_assign ::= op_if RS_ASSIGN op_assign",
 /* 138 */ "op_assign ::= op_if",
 /* 139 */ "op_if ::= op_or QUESTION op_if COLON op_if",
 /* 140 */ "op_if ::= op_or",
 /* 141 */ "op_or ::= op_or LOG_OR op_and",
 /* 142 */ "op_or ::= op_and",
 /* 143 */ "op_and ::= op_and LOG_AND op_binor",
 /* 144 */ "op_and ::= op_binor",
 /* 145 */ "op_binor ::= op_binor BIN_OR op_binxor",
 /* 146 */ "op_binor ::= op_binxor",
 /* 147 */ "op_binxor ::= op_binxor BIN_XOR op_binand",
 /* 148 */ "op_binxor ::= op_binand",
 /* 149 */ "op_binand ::= op_binand BIN_AND op_equate",
 /* 150 */ "op_binand ::= op_equate",
 /* 151 */ "op_equate ::= op_equate EQ op_compare",
 /* 152 */ "op_equate ::= op_equate NE op_compare",
 /* 153 */ "op_equate ::= op_compare",
 /* 154 */ "op_compare ::= op_compare LT op_shift",
 /* 155 */ "op_compare ::= op_compare GT op_shift",
 /* 156 */ "op_compare ::= op_compare LE op_shift",
 /* 157 */ "op_compare ::= op_compare GE op_shift",
 /* 158 */ "op_compare ::= op_shift",
 /* 159 */ "op_shift ::= op_shift LSL op_add",
 /* 160 */ "op_shift ::= op_shift LSR op_add",
 /* 161 */ "op_shift ::= op_add",
 /* 162 */ "op_add ::= op_add ADD op_mult",
 /* 163 */ "op_add ::= op_add SUB op_mult",
 /* 164 */ "op_add ::= op_mult",
 /* 165 */ "op_mult ::= op_mult MUL op_unary",
 /* 166 */ "op_mult ::= op_mult DIV op_unary",
 /* 167 */ "op_mult ::= op_mult MOD op_unary",
 /* 168 */ "op_mult ::= op_unary",
 /* 169 */ "op_unary ::= LOG_NOT op_unary",
 /* 170 */ "op_unary ::= BIN_NOT op_unary",
 /* 171 */ "op_unary ::= SUB op_unary",
 /* 172 */ "op_unary ::= INC op_unary",
 /* 173 */ "op_unary ::= DEC op_unary",
 /* 174 */ "op_unary ::= op_unary INC",
 /* 175 */ "op_unary ::= op_unary DEC",
 /* 176 */ "op_unary ::= O_ROUND type C_ROUND op_unary",
 /* 177 */ "op_unary ::= SIZEOF O_ROUND type C_ROUND",
 /* 178 */ "op_unary ::= SIZEOF O_ROUND op_assign C_ROUND",
 /* 179 */ "op_unary ::= op_pointer",
 /* 180 */ "op_pointer ::= op_pointer DOT id",
 /* 181 */ "op_pointer ::= op_pointer O_SQUARE expr C_SQUARE",
 /* 182 */ "op_pointer ::= value",
 /* 183 */ "value ::= O_ROUND expr C_ROUND",
 /* 184 */ "value ::= id O_ROUND expr C_ROUND",
 /* 185 */ "value ::= id O_ROUND C_ROUND",
 /* 186 */ "value ::= id",
 /* 187 */ "value ::= literal",
 /* 188 */ "literal ::= LITERAL_STRING",
 /* 189 */ "literal ::= boolean",
 /* 190 */ "literal ::= number",
 /* 191 */ "number ::= LITERAL_OCT",
 /* 192 */ "number ::= LITERAL_DEC",
 /* 193 */ "number ::= LITERAL_HEX",
 /* 194 */ "number ::= LITERAL_REAL",
 /* 195 */ "boolean ::= TRUE",
 /* 196 */ "boolean ::= FALSE",
 /* 197 */ "id ::= IDENTIFIER",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.  Return the number
** of errors.  Return 0 on success.
*/
static int yyGrowStack(yyParser *p){
  int newSize;
  int idx;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  idx = p->yytos ? (int)(p->yytos - p->yystack) : 0;
  if( p->yystack==&p->yystk0 ){
    pNew = malloc(newSize*sizeof(pNew[0]));
    if( pNew ) pNew[0] = p->yystk0;
  }else{
    pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  }
  if( pNew ){
    p->yystack = pNew;
    p->yytos = &p->yystack[idx];
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows from %d to %d entries.\n",
              yyTracePrompt, p->yystksz, newSize);
    }
#endif
    p->yystksz = newSize;
  }
  return pNew==0; 
}
#endif

/* Datatype of the argument to the memory allocated passed as the
** second argument to BTParserAlloc() below.  This can be changed by
** putting an appropriate #define in the %include section of the input
** grammar.
*/
#ifndef YYMALLOCARGTYPE
# define YYMALLOCARGTYPE size_t
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to BTParser and BTParserFree.
*/
void *BTParserAlloc(void *(*mallocProc)(YYMALLOCARGTYPE)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (YYMALLOCARGTYPE)sizeof(yyParser) );
  if( pParser ){
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyhwm = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yytos = NULL;
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    if( yyGrowStack(pParser) ){
      pParser->yystack = &pParser->yystk0;
      pParser->yystksz = 1;
    }
#endif
#ifndef YYNOERRORRECOVERY
    pParser->yyerrcnt = -1;
#endif
    pParser->yytos = pParser->yystack;
    pParser->yystack[0].stateno = 0;
    pParser->yystack[0].major = 0;
  }
  return pParser;
}

/* The following function deletes the "minor type" or semantic value
** associated with a symbol.  The symbol can be either a terminal
** or nonterminal. "yymajor" is the symbol code, and "yypminor" is
** a pointer to the value to be deleted.  The code used to do the 
** deletions is derived from the %destructor and/or %token_destructor
** directives of the input grammar.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  BTParserARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are *not* used
    ** inside the C code.
    */
/********* Begin destructor definitions ***************************************/
/********* End destructor definitions *****************************************/
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
*/
static void yy_pop_parser_stack(yyParser *pParser){
  yyStackEntry *yytos;
  assert( pParser->yytos!=0 );
  assert( pParser->yytos > pParser->yystack );
  yytos = pParser->yytos--;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yy_destructor(pParser, yytos->major, &yytos->minor);
}

/* 
** Deallocate and destroy a parser.  Destructors are called for
** all stack elements before shutting the parser down.
**
** If the YYPARSEFREENEVERNULL macro exists (for example because it
** is defined in a %include section of the input grammar) then it is
** assumed that the input pointer is never NULL.
*/
void BTParserFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
#ifndef YYPARSEFREENEVERNULL
  if( pParser==0 ) return;
#endif
  while( pParser->yytos>pParser->yystack ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  if( pParser->yystack!=&pParser->yystk0 ) free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int BTParserStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyhwm;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
*/
static unsigned int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yytos->stateno;
 
  if( stateno>=YY_MIN_REDUCE ) return stateno;
  assert( stateno <= YY_SHIFT_COUNT );
  do{
    i = yy_shift_ofst[stateno];
    assert( iLookAhead!=YYNOCODE );
    i += iLookAhead;
    if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        assert( yyFallback[iFallback]==0 ); /* Fallback loop must terminate */
        iLookAhead = iFallback;
        continue;
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD && iLookAhead>0
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead],
               yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
      return yy_default[stateno];
    }else{
      return yy_action[i];
    }
  }while(1);
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser){
   BTParserARG_FETCH;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
/******** Begin %stack_overflow code ******************************************/
#line 20 "bt_parser.y"

    btvm->error("Stack overflow");
#line 1878 "bt_parser.c"
/******** End %stack_overflow code ********************************************/
   BTParserARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Print tracing information for a SHIFT action
*/
#ifndef NDEBUG
static void yyTraceShift(yyParser *yypParser, int yyNewState){
  if( yyTraceFILE ){
    if( yyNewState<YYNSTATE ){
      fprintf(yyTraceFILE,"%sShift '%s', go to state %d\n",
         yyTracePrompt,yyTokenName[yypParser->yytos->major],
         yyNewState);
    }else{
      fprintf(yyTraceFILE,"%sShift '%s'\n",
         yyTracePrompt,yyTokenName[yypParser->yytos->major]);
    }
  }
}
#else
# define yyTraceShift(X,Y)
#endif

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  BTParserTOKENTYPE yyMinor        /* The minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yytos++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
    yypParser->yyhwm++;
    assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack) );
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yytos>=&yypParser->yystack[YYSTACKDEPTH] ){
    yypParser->yytos--;
    yyStackOverflow(yypParser);
    return;
  }
#else
  if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz] ){
    if( yyGrowStack(yypParser) ){
      yypParser->yytos--;
      yyStackOverflow(yypParser);
      return;
    }
  }
#endif
  if( yyNewState > YY_MAX_SHIFT ){
    yyNewState += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
  }
  yytos = yypParser->yytos;
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor.yy0 = yyMinor;
  yyTraceShift(yypParser, yyNewState);
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 121, 1 },
  { 103, 2 },
  { 103, 1 },
  { 122, 1 },
  { 122, 1 },
  { 122, 1 },
  { 122, 1 },
  { 122, 1 },
  { 122, 1 },
  { 122, 1 },
  { 123, 6 },
  { 123, 5 },
  { 102, 3 },
  { 102, 1 },
  { 112, 4 },
  { 112, 3 },
  { 112, 4 },
  { 112, 3 },
  { 128, 6 },
  { 124, 8 },
  { 125, 8 },
  { 126, 7 },
  { 107, 3 },
  { 107, 0 },
  { 105, 3 },
  { 105, 0 },
  { 127, 5 },
  { 127, 5 },
  { 127, 5 },
  { 127, 5 },
  { 127, 5 },
  { 127, 5 },
  { 113, 2 },
  { 113, 4 },
  { 114, 2 },
  { 114, 3 },
  { 114, 4 },
  { 114, 2 },
  { 130, 3 },
  { 130, 2 },
  { 130, 0 },
  { 97, 3 },
  { 97, 2 },
  { 97, 0 },
  { 98, 3 },
  { 98, 2 },
  { 98, 0 },
  { 100, 3 },
  { 100, 1 },
  { 133, 3 },
  { 133, 1 },
  { 117, 3 },
  { 117, 0 },
  { 106, 3 },
  { 106, 1 },
  { 115, 3 },
  { 115, 3 },
  { 118, 2 },
  { 118, 2 },
  { 118, 1 },
  { 118, 1 },
  { 118, 6 },
  { 118, 6 },
  { 118, 6 },
  { 118, 5 },
  { 118, 5 },
  { 118, 5 },
  { 118, 1 },
  { 118, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 0 },
  { 109, 1 },
  { 109, 1 },
  { 109, 1 },
  { 110, 1 },
  { 110, 1 },
  { 111, 1 },
  { 111, 1 },
  { 111, 1 },
  { 111, 1 },
  { 111, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 101, 2 },
  { 101, 1 },
  { 101, 0 },
  { 129, 5 },
  { 129, 7 },
  { 129, 5 },
  { 129, 9 },
  { 129, 1 },
  { 135, 7 },
  { 135, 5 },
  { 135, 9 },
  { 135, 1 },
  { 137, 7 },
  { 137, 7 },
  { 137, 1 },
  { 137, 1 },
  { 137, 2 },
  { 137, 2 },
  { 137, 2 },
  { 137, 3 },
  { 137, 1 },
  { 136, 1 },
  { 136, 0 },
  { 99, 2 },
  { 99, 1 },
  { 99, 0 },
  { 138, 4 },
  { 138, 3 },
  { 116, 3 },
  { 96, 2 },
  { 96, 1 },
  { 96, 0 },
  { 104, 3 },
  { 104, 1 },
  { 140, 3 },
  { 140, 3 },
  { 140, 3 },
  { 140, 3 },
  { 140, 3 },
  { 140, 3 },
  { 140, 3 },
  { 140, 3 },
  { 140, 3 },
  { 140, 3 },
  { 140, 1 },
  { 131, 5 },
  { 131, 1 },
  { 141, 3 },
  { 141, 1 },
  { 142, 3 },
  { 142, 1 },
  { 143, 3 },
  { 143, 1 },
  { 144, 3 },
  { 144, 1 },
  { 145, 3 },
  { 145, 1 },
  { 146, 3 },
  { 146, 3 },
  { 146, 1 },
  { 147, 3 },
  { 147, 3 },
  { 147, 3 },
  { 147, 3 },
  { 147, 1 },
  { 148, 3 },
  { 148, 3 },
  { 148, 1 },
  { 149, 3 },
  { 149, 3 },
  { 149, 1 },
  { 150, 3 },
  { 150, 3 },
  { 150, 3 },
  { 150, 1 },
  { 151, 2 },
  { 151, 2 },
  { 151, 2 },
  { 151, 2 },
  { 151, 2 },
  { 151, 2 },
  { 151, 2 },
  { 151, 4 },
  { 151, 4 },
  { 151, 4 },
  { 151, 1 },
  { 152, 3 },
  { 152, 4 },
  { 152, 1 },
  { 139, 3 },
  { 139, 4 },
  { 139, 3 },
  { 139, 1 },
  { 139, 1 },
  { 134, 1 },
  { 134, 1 },
  { 134, 1 },
  { 132, 1 },
  { 132, 1 },
  { 132, 1 },
  { 132, 1 },
  { 153, 1 },
  { 153, 1 },
  { 119, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  unsigned int yyruleno        /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  BTParserARG_FETCH;
  yymsp = yypParser->yytos;
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    yysize = yyRuleInfo[yyruleno].nrhs;
    fprintf(yyTraceFILE, "%sReduce [%s], go to state %d.\n", yyTracePrompt,
      yyRuleName[yyruleno], yymsp[-yysize].stateno);
  }
#endif /* NDEBUG */

  /* Check that the stack is large enough to grow by a single entry
  ** if the RHS of the rule is empty.  This ensures that there is room
  ** enough on the stack to push the LHS value */
  if( yyRuleInfo[yyruleno].nrhs==0 ){
#ifdef YYTRACKMAXSTACKDEPTH
    if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
      yypParser->yyhwm++;
      assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack));
    }
#endif
#if YYSTACKDEPTH>0 
    if( yypParser->yytos>=&yypParser->yystack[YYSTACKDEPTH-1] ){
      yyStackOverflow(yypParser);
      return;
    }
#else
    if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz-1] ){
      if( yyGrowStack(yypParser) ){
        yyStackOverflow(yypParser);
        return;
      }
      yymsp = yypParser->yytos;
    }
#endif
  }

  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
/********** Begin reduce actions **********************************************/
        YYMINORTYPE yylhsminor;
      case 0: /* program ::= decls */
#line 50 "bt_parser.y"
{ btvm->loadAST(new NBlock(*yymsp[0].minor.yy189)); delete yymsp[0].minor.yy189; }
#line 2216 "bt_parser.c"
        break;
      case 1: /* decls ::= decls decl */
      case 94: /* struct_stms ::= struct_stms stm */ yytestcase(yyruleno==94);
      case 117: /* case_stms ::= case_stms case_stm */ yytestcase(yyruleno==117);
      case 123: /* stm_list ::= stm_list stm */ yytestcase(yyruleno==123);
#line 52 "bt_parser.y"
{ yymsp[-1].minor.yy189->push_back(yymsp[0].minor.yy293); }
#line 2224 "bt_parser.c"
        break;
      case 2: /* decls ::= decl */
      case 48: /* enum_def ::= enum_val */ yytestcase(yyruleno==48);
      case 95: /* struct_stms ::= stm */ yytestcase(yyruleno==95);
      case 118: /* case_stms ::= case_stm */ yytestcase(yyruleno==118);
      case 124: /* stm_list ::= stm */ yytestcase(yyruleno==124);
      case 127: /* expr ::= op_assign */ yytestcase(yyruleno==127);
#line 53 "bt_parser.y"
{ yylhsminor.yy189 = new NodeList(); yylhsminor.yy189->push_back(yymsp[0].minor.yy293); }
#line 2234 "bt_parser.c"
  yymsp[0].minor.yy189 = yylhsminor.yy189;
        break;
      case 3: /* decl ::= func_decl */
      case 4: /* decl ::= struct_decl */ yytestcase(yyruleno==4);
      case 5: /* decl ::= union_decl */ yytestcase(yyruleno==5);
      case 6: /* decl ::= enum_decl */ yytestcase(yyruleno==6);
      case 7: /* decl ::= var_decl */ yytestcase(yyruleno==7);
      case 8: /* decl ::= typedef_decl */ yytestcase(yyruleno==8);
      case 9: /* decl ::= stm */ yytestcase(yyruleno==9);
      case 101: /* stm ::= normal_stm */ yytestcase(yyruleno==101);
      case 105: /* then_stm ::= normal_stm */ yytestcase(yyruleno==105);
      case 108: /* normal_stm ::= var_decl */ yytestcase(yyruleno==108);
      case 138: /* op_assign ::= op_if */ yytestcase(yyruleno==138);
      case 140: /* op_if ::= op_or */ yytestcase(yyruleno==140);
      case 142: /* op_or ::= op_and */ yytestcase(yyruleno==142);
      case 144: /* op_and ::= op_binor */ yytestcase(yyruleno==144);
      case 146: /* op_binor ::= op_binxor */ yytestcase(yyruleno==146);
      case 148: /* op_binxor ::= op_binand */ yytestcase(yyruleno==148);
      case 150: /* op_binand ::= op_equate */ yytestcase(yyruleno==150);
      case 153: /* op_equate ::= op_compare */ yytestcase(yyruleno==153);
      case 158: /* op_compare ::= op_shift */ yytestcase(yyruleno==158);
      case 161: /* op_shift ::= op_add */ yytestcase(yyruleno==161);
      case 164: /* op_add ::= op_mult */ yytestcase(yyruleno==164);
      case 168: /* op_mult ::= op_unary */ yytestcase(yyruleno==168);
      case 179: /* op_unary ::= op_pointer */ yytestcase(yyruleno==179);
      case 182: /* op_pointer ::= value */ yytestcase(yyruleno==182);
      case 187: /* value ::= literal */ yytestcase(yyruleno==187);
      case 189: /* literal ::= boolean */ yytestcase(yyruleno==189);
      case 190: /* literal ::= number */ yytestcase(yyruleno==190);
#line 55 "bt_parser.y"
{ yylhsminor.yy293 = yymsp[0].minor.yy293; }
#line 2266 "bt_parser.c"
  yymsp[0].minor.yy293 = yylhsminor.yy293;
        break;
      case 10: /* func_decl ::= type id O_ROUND params C_ROUND block */
#line 67 "bt_parser.y"
{ yylhsminor.yy293 = new NFunction(yymsp[-5].minor.yy295, yymsp[-4].minor.yy68, *yymsp[-2].minor.yy189, yymsp[0].minor.yy165); delete yymsp[-2].minor.yy189; }
#line 2272 "bt_parser.c"
  yymsp[-5].minor.yy293 = yylhsminor.yy293;
        break;
      case 11: /* func_decl ::= type id O_ROUND C_ROUND block */
#line 68 "bt_parser.y"
{ yylhsminor.yy293 = new NFunction(yymsp[-4].minor.yy295, yymsp[-3].minor.yy68, yymsp[0].minor.yy165); }
#line 2278 "bt_parser.c"
  yymsp[-4].minor.yy293 = yylhsminor.yy293;
        break;
      case 12: /* params ::= params COMMA param */
#line 70 "bt_parser.y"
{ yymsp[-2].minor.yy189->push_back(yymsp[0].minor.yy164); }
#line 2284 "bt_parser.c"
        break;
      case 13: /* params ::= param */
#line 71 "bt_parser.y"
{ yylhsminor.yy189 = new NodeList(); yylhsminor.yy189->push_back(yymsp[0].minor.yy164); }
#line 2289 "bt_parser.c"
  yymsp[0].minor.yy189 = yylhsminor.yy189;
        break;
      case 14: /* param ::= type BIN_AND id array */
#line 73 "bt_parser.y"
{ yylhsminor.yy164 = new NArgument(yymsp[-3].minor.yy295, yymsp[-1].minor.yy68, yymsp[0].minor.yy293); yylhsminor.yy164->by_reference = true; }
#line 2295 "bt_parser.c"
  yymsp[-3].minor.yy164 = yylhsminor.yy164;
        break;
      case 15: /* param ::= type id array */
#line 74 "bt_parser.y"
{ yylhsminor.yy164 = new NArgument(yymsp[-2].minor.yy295, yymsp[-1].minor.yy68, yymsp[0].minor.yy293); }
#line 2301 "bt_parser.c"
  yymsp[-2].minor.yy164 = yylhsminor.yy164;
        break;
      case 16: /* param ::= id BIN_AND id array */
#line 75 "bt_parser.y"
{ yylhsminor.yy164 = new NArgument(yymsp[-3].minor.yy68, yymsp[-1].minor.yy68, yymsp[0].minor.yy293); yylhsminor.yy164->by_reference = true; }
#line 2307 "bt_parser.c"
  yymsp[-3].minor.yy164 = yylhsminor.yy164;
        break;
      case 17: /* param ::= id id array */
#line 76 "bt_parser.y"
{ yylhsminor.yy164 = new NArgument(yymsp[-2].minor.yy68, yymsp[-1].minor.yy68, yymsp[0].minor.yy293); }
#line 2313 "bt_parser.c"
  yymsp[-2].minor.yy164 = yylhsminor.yy164;
        break;
      case 18: /* typedef_decl ::= TYPEDEF type id array custom_var_decl SEMICOLON */
#line 82 "bt_parser.y"
{ yymsp[-5].minor.yy293 = new NTypedef(yymsp[-4].minor.yy295, yymsp[-3].minor.yy68, *yymsp[-1].minor.yy189); yymsp[-4].minor.yy295->size = yymsp[-2].minor.yy293; delete yymsp[-1].minor.yy189; }
#line 2319 "bt_parser.c"
        break;
      case 19: /* struct_decl ::= STRUCT id args_decl O_CURLY struct_stms C_CURLY custom_var_decl SEMICOLON */
#line 84 "bt_parser.y"
{ yymsp[-7].minor.yy293 = new NStruct(yymsp[-6].minor.yy68, *yymsp[-5].minor.yy189, *yymsp[-3].minor.yy189, *yymsp[-1].minor.yy189); delete yymsp[-5].minor.yy189; delete yymsp[-3].minor.yy189; delete yymsp[-1].minor.yy189; }
#line 2324 "bt_parser.c"
        break;
      case 20: /* union_decl ::= UNION id args_decl O_CURLY struct_stms C_CURLY custom_var_decl SEMICOLON */
#line 86 "bt_parser.y"
{ yymsp[-7].minor.yy293 = new NUnion(yymsp[-6].minor.yy68, *yymsp[-5].minor.yy189, *yymsp[-3].minor.yy189, *yymsp[-1].minor.yy189); delete yymsp[-5].minor.yy189; delete yymsp[-3].minor.yy189; delete yymsp[-1].minor.yy189; }
#line 2329 "bt_parser.c"
        break;
      case 21: /* enum_decl ::= ENUM enum_type id O_CURLY enum_def C_CURLY SEMICOLON */
#line 88 "bt_parser.y"
{ yymsp[-6].minor.yy293 = new NEnum(yymsp[-4].minor.yy68, *yymsp[-2].minor.yy189, yymsp[-5].minor.yy295); delete yymsp[-2].minor.yy189; }
#line 2334 "bt_parser.c"
        break;
      case 22: /* custom_var_decl ::= LT custom_vars GT */
      case 24: /* args_decl ::= O_ROUND params C_ROUND */ yytestcase(yyruleno==24);
#line 90 "bt_parser.y"
{ yymsp[-2].minor.yy189 = yymsp[-1].minor.yy189; }
#line 2340 "bt_parser.c"
        break;
      case 23: /* custom_var_decl ::= */
      case 25: /* args_decl ::= */ yytestcase(yyruleno==25);
      case 43: /* var_list ::= */ yytestcase(yyruleno==43);
      case 46: /* var_list_no_assign ::= */ yytestcase(yyruleno==46);
      case 96: /* struct_stms ::= */ yytestcase(yyruleno==96);
      case 119: /* case_stms ::= */ yytestcase(yyruleno==119);
      case 125: /* stm_list ::= */ yytestcase(yyruleno==125);
#line 91 "bt_parser.y"
{ yymsp[1].minor.yy189 = new NodeList(); }
#line 2351 "bt_parser.c"
        break;
      case 26: /* var_decl ::= CONST type var var_list SEMICOLON */
#line 100 "bt_parser.y"
{ yymsp[-2].minor.yy267->type = yymsp[-3].minor.yy295; yymsp[-2].minor.yy267->is_const = true; yymsp[-2].minor.yy267->names = *yymsp[-1].minor.yy189; yymsp[-4].minor.yy293 = yymsp[-2].minor.yy267; delete yymsp[-1].minor.yy189; }
#line 2356 "bt_parser.c"
        break;
      case 27: /* var_decl ::= CONST id var var_list SEMICOLON */
#line 101 "bt_parser.y"
{ yymsp[-2].minor.yy267->type = new NType(yymsp[-3].minor.yy68); yymsp[-2].minor.yy267->is_const = true; yymsp[-2].minor.yy267->names = *yymsp[-1].minor.yy189; yymsp[-4].minor.yy293 = yymsp[-2].minor.yy267; delete yymsp[-1].minor.yy189; }
#line 2361 "bt_parser.c"
        break;
      case 28: /* var_decl ::= LOCAL type var var_list SEMICOLON */
#line 102 "bt_parser.y"
{ yymsp[-2].minor.yy267->type = yymsp[-3].minor.yy295; yymsp[-2].minor.yy267->is_local = true; yymsp[-2].minor.yy267->names = *yymsp[-1].minor.yy189; yymsp[-4].minor.yy293 = yymsp[-2].minor.yy267; delete yymsp[-1].minor.yy189; }
#line 2366 "bt_parser.c"
        break;
      case 29: /* var_decl ::= LOCAL id var var_list SEMICOLON */
#line 103 "bt_parser.y"
{ yymsp[-2].minor.yy267->type = new NType(yymsp[-3].minor.yy68); yymsp[-2].minor.yy267->is_local = true; yymsp[-2].minor.yy267->names = *yymsp[-1].minor.yy189; yymsp[-4].minor.yy293 = yymsp[-2].minor.yy267; delete yymsp[-1].minor.yy189; }
#line 2371 "bt_parser.c"
        break;
      case 30: /* var_decl ::= type var_no_assign var_list_no_assign custom_var_decl SEMICOLON */
#line 104 "bt_parser.y"
{ yymsp[-3].minor.yy267->type = yymsp[-4].minor.yy295; yymsp[-3].minor.yy267->custom_vars = *yymsp[-1].minor.yy189; yymsp[-3].minor.yy267->names = *yymsp[-2].minor.yy189; yylhsminor.yy293 = yymsp[-3].minor.yy267; delete yymsp[-2].minor.yy189; delete yymsp[-1].minor.yy189; }
#line 2376 "bt_parser.c"
  yymsp[-4].minor.yy293 = yylhsminor.yy293;
        break;
      case 31: /* var_decl ::= id var_no_assign var_list_no_assign custom_var_decl SEMICOLON */
#line 105 "bt_parser.y"
{ yymsp[-3].minor.yy267->type = new NType(yymsp[-4].minor.yy68); yymsp[-3].minor.yy267->names = *yymsp[-2].minor.yy189; yymsp[-3].minor.yy267->custom_vars = *yymsp[-1].minor.yy189; yylhsminor.yy293 = yymsp[-3].minor.yy267; delete yymsp[-2].minor.yy189; delete yymsp[-1].minor.yy189; }
#line 2382 "bt_parser.c"
  yymsp[-4].minor.yy293 = yylhsminor.yy293;
        break;
      case 32: /* var ::= id array */
      case 34: /* var_no_assign ::= id array */ yytestcase(yyruleno==34);
#line 107 "bt_parser.y"
{ yylhsminor.yy267 = new NVariable(yymsp[-1].minor.yy68, yymsp[0].minor.yy293); }
#line 2389 "bt_parser.c"
  yymsp[-1].minor.yy267 = yylhsminor.yy267;
        break;
      case 33: /* var ::= id array ASSIGN op_if */
#line 108 "bt_parser.y"
{ yylhsminor.yy267 = new NVariable(yymsp[-3].minor.yy68, yymsp[-2].minor.yy293); yylhsminor.yy267->value = yymsp[0].minor.yy293; }
#line 2395 "bt_parser.c"
  yymsp[-3].minor.yy267 = yylhsminor.yy267;
        break;
      case 35: /* var_no_assign ::= id COLON number */
#line 111 "bt_parser.y"
{ yylhsminor.yy267 = new NVariable(yymsp[-2].minor.yy68, NULL, yymsp[0].minor.yy293); }
#line 2401 "bt_parser.c"
  yymsp[-2].minor.yy267 = yylhsminor.yy267;
        break;
      case 36: /* var_no_assign ::= id O_ROUND expr C_ROUND */
#line 112 "bt_parser.y"
{ yylhsminor.yy267 = new NVariable(yymsp[-3].minor.yy68, NULL); yylhsminor.yy267->constructor = *yymsp[-1].minor.yy189; delete yymsp[-1].minor.yy189; }
#line 2407 "bt_parser.c"
  yymsp[-3].minor.yy267 = yylhsminor.yy267;
        break;
      case 37: /* var_no_assign ::= COLON number */
#line 113 "bt_parser.y"
{ yymsp[-1].minor.yy267 = new NVariable(yymsp[0].minor.yy293); }
#line 2413 "bt_parser.c"
        break;
      case 38: /* array ::= O_SQUARE expr C_SQUARE */
      case 183: /* value ::= O_ROUND expr C_ROUND */ yytestcase(yyruleno==183);
#line 115 "bt_parser.y"
{ yymsp[-2].minor.yy293 = new NBlock(*yymsp[-1].minor.yy189); delete yymsp[-1].minor.yy189; }
#line 2419 "bt_parser.c"
        break;
      case 39: /* array ::= O_SQUARE C_SQUARE */
#line 116 "bt_parser.y"
{ yymsp[-1].minor.yy293 = new NBlock(); }
#line 2424 "bt_parser.c"
        break;
      case 40: /* array ::= */
#line 117 "bt_parser.y"
{ yymsp[1].minor.yy293 = NULL; }
#line 2429 "bt_parser.c"
        break;
      case 41: /* var_list ::= var_list COMMA var */
      case 44: /* var_list_no_assign ::= var_list_no_assign COMMA var_no_assign */ yytestcase(yyruleno==44);
#line 119 "bt_parser.y"
{ yymsp[-2].minor.yy189->push_back(yymsp[0].minor.yy267); }
#line 2435 "bt_parser.c"
        break;
      case 42: /* var_list ::= COMMA var */
      case 45: /* var_list_no_assign ::= COMMA var_no_assign */ yytestcase(yyruleno==45);
#line 120 "bt_parser.y"
{ yymsp[-1].minor.yy189 = new NodeList(); yymsp[-1].minor.yy189->push_back(yymsp[0].minor.yy267); }
#line 2441 "bt_parser.c"
        break;
      case 47: /* enum_def ::= enum_def COMMA enum_val */
      case 126: /* expr ::= expr COMMA op_assign */ yytestcase(yyruleno==126);
#line 131 "bt_parser.y"
{ yymsp[-2].minor.yy189->push_back(yymsp[0].minor.yy293); }
#line 2447 "bt_parser.c"
        break;
      case 49: /* enum_val ::= id ASSIGN number */
#line 134 "bt_parser.y"
{ yylhsminor.yy293 = new NEnumValue(yymsp[-2].minor.yy68, yymsp[0].minor.yy293); }
#line 2452 "bt_parser.c"
  yymsp[-2].minor.yy293 = yylhsminor.yy293;
        break;
      case 50: /* enum_val ::= id */
#line 135 "bt_parser.y"
{ yylhsminor.yy293 = new NEnumValue(yymsp[0].minor.yy68); }
#line 2458 "bt_parser.c"
  yymsp[0].minor.yy293 = yylhsminor.yy293;
        break;
      case 51: /* enum_type ::= LT type GT */
#line 137 "bt_parser.y"
{ yymsp[-2].minor.yy295 = yymsp[-1].minor.yy295; }
#line 2464 "bt_parser.c"
        break;
      case 52: /* enum_type ::= */
#line 138 "bt_parser.y"
{ yymsp[1].minor.yy295 = NULL; }
#line 2469 "bt_parser.c"
        break;
      case 53: /* custom_vars ::= custom_vars COMMA custom_var */
#line 144 "bt_parser.y"
{ yymsp[-2].minor.yy189->push_back(yymsp[0].minor.yy294); }
#line 2474 "bt_parser.c"
        break;
      case 54: /* custom_vars ::= custom_var */
#line 145 "bt_parser.y"
{ yylhsminor.yy189 = new NodeList(); yylhsminor.yy189->push_back(yymsp[0].minor.yy294); }
#line 2479 "bt_parser.c"
  yymsp[0].minor.yy189 = yylhsminor.yy189;
        break;
      case 55: /* custom_var ::= IDENTIFIER ASSIGN id */
#line 147 "bt_parser.y"
{ yylhsminor.yy294 = new NCustomVariable(yymsp[-2].minor.yy0->value, yymsp[0].minor.yy68); }
#line 2485 "bt_parser.c"
  yymsp[-2].minor.yy294 = yylhsminor.yy294;
        break;
      case 56: /* custom_var ::= IDENTIFIER ASSIGN literal */
#line 148 "bt_parser.y"
{ yylhsminor.yy294 = new NCustomVariable(yymsp[-2].minor.yy0->value, yymsp[0].minor.yy293); }
#line 2491 "bt_parser.c"
  yymsp[-2].minor.yy294 = yylhsminor.yy294;
        break;
      case 57: /* type ::= sign scalar */
#line 150 "bt_parser.y"
{ if(yymsp[-1].minor.yy284 != -1) yymsp[0].minor.yy173->is_signed = yymsp[-1].minor.yy284; yylhsminor.yy295 = yymsp[0].minor.yy173; }
#line 2497 "bt_parser.c"
  yymsp[-1].minor.yy295 = yylhsminor.yy295;
        break;
      case 58: /* type ::= sign character */
#line 151 "bt_parser.y"
{ yymsp[-1].minor.yy295 = yymsp[0].minor.yy295; }
#line 2503 "bt_parser.c"
        break;
      case 59: /* type ::= string */
      case 60: /* type ::= datetime */ yytestcase(yyruleno==60);
      case 74: /* string ::= character */ yytestcase(yyruleno==74);
#line 152 "bt_parser.y"
{ yylhsminor.yy295 = yymsp[0].minor.yy295; }
#line 2510 "bt_parser.c"
  yymsp[0].minor.yy295 = yylhsminor.yy295;
        break;
      case 61: /* type ::= STRUCT id args_decl O_CURLY struct_stms C_CURLY */
#line 154 "bt_parser.y"
{ yymsp[-5].minor.yy295 = new NStruct(yymsp[-4].minor.yy68, *yymsp[-3].minor.yy189, *yymsp[-1].minor.yy189); delete yymsp[-3].minor.yy189; delete yymsp[-1].minor.yy189; }
#line 2516 "bt_parser.c"
        break;
      case 62: /* type ::= UNION id args_decl O_CURLY struct_stms C_CURLY */
#line 155 "bt_parser.y"
{ yymsp[-5].minor.yy295 = new NUnion(yymsp[-4].minor.yy68, *yymsp[-3].minor.yy189, *yymsp[-1].minor.yy189); delete yymsp[-3].minor.yy189; delete yymsp[-1].minor.yy189; }
#line 2521 "bt_parser.c"
        break;
      case 63: /* type ::= ENUM enum_type id O_CURLY enum_def C_CURLY */
#line 156 "bt_parser.y"
{ yymsp[-5].minor.yy295 = new NEnum(yymsp[-3].minor.yy68, *yymsp[-1].minor.yy189, yymsp[-4].minor.yy295); delete yymsp[-1].minor.yy189; }
#line 2526 "bt_parser.c"
        break;
      case 64: /* type ::= STRUCT args_decl O_CURLY struct_stms C_CURLY */
#line 157 "bt_parser.y"
{ yymsp[-4].minor.yy295 = new NStruct(*yymsp[-3].minor.yy189, *yymsp[-1].minor.yy189); delete yymsp[-3].minor.yy189; delete yymsp[-1].minor.yy189; }
#line 2531 "bt_parser.c"
        break;
      case 65: /* type ::= UNION args_decl O_CURLY struct_stms C_CURLY */
#line 158 "bt_parser.y"
{ yymsp[-4].minor.yy295 = new NUnion(*yymsp[-3].minor.yy189, *yymsp[-1].minor.yy189); delete yymsp[-3].minor.yy189; delete yymsp[-1].minor.yy189; }
#line 2536 "bt_parser.c"
        break;
      case 66: /* type ::= ENUM enum_type O_CURLY enum_def C_CURLY */
#line 159 "bt_parser.y"
{ yymsp[-4].minor.yy295 = new NEnum(*yymsp[-1].minor.yy189, yymsp[-3].minor.yy295); delete yymsp[-1].minor.yy189; }
#line 2541 "bt_parser.c"
        break;
      case 67: /* type ::= VOID */
#line 160 "bt_parser.y"
{ yylhsminor.yy295 = new NType(yymsp[0].minor.yy0->value); }
#line 2546 "bt_parser.c"
  yymsp[0].minor.yy295 = yylhsminor.yy295;
        break;
      case 68: /* type ::= BOOL */
#line 161 "bt_parser.y"
{ yylhsminor.yy295 = new NBooleanType(yymsp[0].minor.yy0->value); }
#line 2552 "bt_parser.c"
  yymsp[0].minor.yy295 = yylhsminor.yy295;
        break;
      case 69: /* sign ::= UNSIGNED */
#line 163 "bt_parser.y"
{ yymsp[0].minor.yy284 =  0; }
#line 2558 "bt_parser.c"
        break;
      case 70: /* sign ::= SIGNED */
#line 164 "bt_parser.y"
{ yymsp[0].minor.yy284 =  1; }
#line 2563 "bt_parser.c"
        break;
      case 71: /* sign ::= */
#line 165 "bt_parser.y"
{ yymsp[1].minor.yy284 = -1; }
#line 2568 "bt_parser.c"
        break;
      case 72: /* string ::= WSTRING */
      case 73: /* string ::= STRING */ yytestcase(yyruleno==73);
      case 75: /* character ::= CHAR */ yytestcase(yyruleno==75);
      case 76: /* character ::= WCHAR */ yytestcase(yyruleno==76);
#line 167 "bt_parser.y"
{ yylhsminor.yy295 = new NStringType(yymsp[0].minor.yy0->value); }
#line 2576 "bt_parser.c"
  yymsp[0].minor.yy295 = yylhsminor.yy295;
        break;
      case 77: /* datetime ::= TIME */
#line 174 "bt_parser.y"
{ yylhsminor.yy295 = new NTime(yymsp[0].minor.yy0->value); }
#line 2582 "bt_parser.c"
  yymsp[0].minor.yy295 = yylhsminor.yy295;
        break;
      case 78: /* datetime ::= DOSDATE */
#line 175 "bt_parser.y"
{ yylhsminor.yy295 = new NDosDate(yymsp[0].minor.yy0->value); }
#line 2588 "bt_parser.c"
  yymsp[0].minor.yy295 = yylhsminor.yy295;
        break;
      case 79: /* datetime ::= DOSTIME */
#line 176 "bt_parser.y"
{ yylhsminor.yy295 = new NDosTime(yymsp[0].minor.yy0->value); }
#line 2594 "bt_parser.c"
  yymsp[0].minor.yy295 = yylhsminor.yy295;
        break;
      case 80: /* datetime ::= OLETIME */
#line 177 "bt_parser.y"
{ yylhsminor.yy295 = new NOleTime(yymsp[0].minor.yy0->value); }
#line 2600 "bt_parser.c"
  yymsp[0].minor.yy295 = yylhsminor.yy295;
        break;
      case 81: /* datetime ::= FILETIME */
#line 178 "bt_parser.y"
{ yylhsminor.yy295 = new NFileTime(yymsp[0].minor.yy0->value); }
#line 2606 "bt_parser.c"
  yymsp[0].minor.yy295 = yylhsminor.yy295;
        break;
      case 82: /* scalar ::= BYTE */
#line 180 "bt_parser.y"
{ yylhsminor.yy173 = new NScalarType(yymsp[0].minor.yy0->value, 8); }
#line 2612 "bt_parser.c"
  yymsp[0].minor.yy173 = yylhsminor.yy173;
        break;
      case 83: /* scalar ::= UCHAR */
      case 84: /* scalar ::= UBYTE */ yytestcase(yyruleno==84);
#line 181 "bt_parser.y"
{ yylhsminor.yy173 = new NScalarType(yymsp[0].minor.yy0->value, 8);  yylhsminor.yy173->is_signed = false; }
#line 2619 "bt_parser.c"
  yymsp[0].minor.yy173 = yylhsminor.yy173;
        break;
      case 85: /* scalar ::= SHORT */
#line 183 "bt_parser.y"
{ yylhsminor.yy173 = new NScalarType(yymsp[0].minor.yy0->value, 16); }
#line 2625 "bt_parser.c"
  yymsp[0].minor.yy173 = yylhsminor.yy173;
        break;
      case 86: /* scalar ::= USHORT */
#line 184 "bt_parser.y"
{ yylhsminor.yy173 = new NScalarType(yymsp[0].minor.yy0->value, 16); yylhsminor.yy173->is_signed = false; }
#line 2631 "bt_parser.c"
  yymsp[0].minor.yy173 = yylhsminor.yy173;
        break;
      case 87: /* scalar ::= INT32 */
#line 185 "bt_parser.y"
{ yylhsminor.yy173 = new NScalarType(yymsp[0].minor.yy0->value, 32); }
#line 2637 "bt_parser.c"
  yymsp[0].minor.yy173 = yylhsminor.yy173;
        break;
      case 88: /* scalar ::= UINT32 */
#line 186 "bt_parser.y"
{ yylhsminor.yy173 = new NScalarType(yymsp[0].minor.yy0->value, 32); yylhsminor.yy173->is_signed = false; }
#line 2643 "bt_parser.c"
  yymsp[0].minor.yy173 = yylhsminor.yy173;
        break;
      case 89: /* scalar ::= INT64 */
#line 187 "bt_parser.y"
{ yylhsminor.yy173 = new NScalarType(yymsp[0].minor.yy0->value, 64); }
#line 2649 "bt_parser.c"
  yymsp[0].minor.yy173 = yylhsminor.yy173;
        break;
      case 90: /* scalar ::= UINT64 */
#line 188 "bt_parser.y"
{ yylhsminor.yy173 = new NScalarType(yymsp[0].minor.yy0->value, 64); yylhsminor.yy173->is_signed = false; }
#line 2655 "bt_parser.c"
  yymsp[0].minor.yy173 = yylhsminor.yy173;
        break;
      case 91: /* scalar ::= HFLOAT */
#line 189 "bt_parser.y"
{ yylhsminor.yy173 = new NScalarType(yymsp[0].minor.yy0->value, 16); yylhsminor.yy173->is_fp = true; }
#line 2661 "bt_parser.c"
  yymsp[0].minor.yy173 = yylhsminor.yy173;
        break;
      case 92: /* scalar ::= FLOAT */
#line 190 "bt_parser.y"
{ yylhsminor.yy173 = new NScalarType(yymsp[0].minor.yy0->value, 32); yylhsminor.yy173->is_fp = true; }
#line 2667 "bt_parser.c"
  yymsp[0].minor.yy173 = yylhsminor.yy173;
        break;
      case 93: /* scalar ::= DOUBLE */
#line 191 "bt_parser.y"
{ yylhsminor.yy173 = new NScalarType(yymsp[0].minor.yy0->value, 64); yylhsminor.yy173->is_fp = true; }
#line 2673 "bt_parser.c"
  yymsp[0].minor.yy173 = yylhsminor.yy173;
        break;
      case 97: /* stm ::= IF O_ROUND expr C_ROUND stm */
#line 201 "bt_parser.y"
{ yymsp[-4].minor.yy293 = new NConditional(new NBlock(*yymsp[-2].minor.yy189), yymsp[0].minor.yy293); delete yymsp[-2].minor.yy189; }
#line 2679 "bt_parser.c"
        break;
      case 98: /* stm ::= IF O_ROUND expr C_ROUND then_stm ELSE stm */
      case 102: /* then_stm ::= IF O_ROUND expr C_ROUND then_stm ELSE then_stm */ yytestcase(yyruleno==102);
#line 202 "bt_parser.y"
{ yymsp[-6].minor.yy293 = new NConditional(new NBlock(*yymsp[-4].minor.yy189), yymsp[-2].minor.yy293, yymsp[0].minor.yy293); delete yymsp[-4].minor.yy189; }
#line 2685 "bt_parser.c"
        break;
      case 99: /* stm ::= WHILE O_ROUND expr C_ROUND stm */
      case 103: /* then_stm ::= WHILE O_ROUND expr C_ROUND then_stm */ yytestcase(yyruleno==103);
#line 203 "bt_parser.y"
{ yymsp[-4].minor.yy293 = new NWhile(new NBlock(*yymsp[-2].minor.yy189), yymsp[0].minor.yy293); delete yymsp[-2].minor.yy189; }
#line 2691 "bt_parser.c"
        break;
      case 100: /* stm ::= FOR O_ROUND arg SEMICOLON arg SEMICOLON arg C_ROUND stm */
      case 104: /* then_stm ::= FOR O_ROUND arg SEMICOLON arg SEMICOLON arg C_ROUND then_stm */ yytestcase(yyruleno==104);
#line 204 "bt_parser.y"
{ yymsp[-8].minor.yy293 = new NFor(yymsp[-6].minor.yy293, yymsp[-4].minor.yy293, yymsp[-2].minor.yy293, yymsp[0].minor.yy293); }
#line 2697 "bt_parser.c"
        break;
      case 106: /* normal_stm ::= DO stm WHILE O_ROUND expr C_ROUND SEMICOLON */
#line 212 "bt_parser.y"
{ yymsp[-6].minor.yy293 = new NDoWhile(yymsp[-5].minor.yy293, new NBlock(*yymsp[-2].minor.yy189)); delete yymsp[-2].minor.yy189; }
#line 2702 "bt_parser.c"
        break;
      case 107: /* normal_stm ::= SWITCH O_ROUND expr C_ROUND O_CURLY case_stms C_CURLY */
#line 213 "bt_parser.y"
{ yymsp[-6].minor.yy293 = new NSwitch(new NBlock(*yymsp[-4].minor.yy189), *yymsp[-1].minor.yy189); delete yymsp[-4].minor.yy189, delete yymsp[-1].minor.yy189; }
#line 2707 "bt_parser.c"
        break;
      case 109: /* normal_stm ::= block */
#line 215 "bt_parser.y"
{ yylhsminor.yy293 = yymsp[0].minor.yy165; }
#line 2712 "bt_parser.c"
  yymsp[0].minor.yy293 = yylhsminor.yy293;
        break;
      case 110: /* normal_stm ::= expr SEMICOLON */
#line 216 "bt_parser.y"
{ yylhsminor.yy293 = new NBlock(*yymsp[-1].minor.yy189); delete yymsp[-1].minor.yy189; }
#line 2718 "bt_parser.c"
  yymsp[-1].minor.yy293 = yylhsminor.yy293;
        break;
      case 111: /* normal_stm ::= BREAK SEMICOLON */
#line 217 "bt_parser.y"
{ yymsp[-1].minor.yy293 = new NVMState(VMState::Break); }
#line 2724 "bt_parser.c"
        break;
      case 112: /* normal_stm ::= CONTINUE SEMICOLON */
#line 218 "bt_parser.y"
{ yymsp[-1].minor.yy293 = new NVMState(VMState::Continue); }
#line 2729 "bt_parser.c"
        break;
      case 113: /* normal_stm ::= RETURN expr SEMICOLON */
#line 219 "bt_parser.y"
{ yymsp[-2].minor.yy293 = new NReturn(new NBlock(*yymsp[-1].minor.yy189)); delete yymsp[-1].minor.yy189; }
#line 2734 "bt_parser.c"
        break;
      case 114: /* normal_stm ::= SEMICOLON */
#line 220 "bt_parser.y"
{ yymsp[0].minor.yy293 = new NBlock(); }
#line 2739 "bt_parser.c"
        break;
      case 115: /* arg ::= expr */
#line 222 "bt_parser.y"
{ yylhsminor.yy293 = new NBlock(*yymsp[0].minor.yy189); delete yymsp[0].minor.yy189; }
#line 2744 "bt_parser.c"
  yymsp[0].minor.yy293 = yylhsminor.yy293;
        break;
      case 116: /* arg ::= */
#line 223 "bt_parser.y"
{ yymsp[1].minor.yy293 = new NBlock(); }
#line 2750 "bt_parser.c"
        break;
      case 120: /* case_stm ::= CASE value COLON stm_list */
#line 229 "bt_parser.y"
{ yymsp[-3].minor.yy293 = new NCase(yymsp[-2].minor.yy293, new NBlock(*yymsp[0].minor.yy189)); delete yymsp[0].minor.yy189; }
#line 2755 "bt_parser.c"
        break;
      case 121: /* case_stm ::= DEFAULT COLON stm_list */
#line 230 "bt_parser.y"
{ yymsp[-2].minor.yy293 = new NCase(new NBlock(*yymsp[0].minor.yy189)); delete yymsp[0].minor.yy189; }
#line 2760 "bt_parser.c"
        break;
      case 122: /* block ::= O_CURLY stm_list C_CURLY */
#line 232 "bt_parser.y"
{ yymsp[-2].minor.yy165 = new NBlock(*yymsp[-1].minor.yy189); delete yymsp[-1].minor.yy189; }
#line 2765 "bt_parser.c"
        break;
      case 128: /* op_assign ::= op_if ASSIGN op_assign */
      case 129: /* op_assign ::= op_if ADD_ASSIGN op_assign */ yytestcase(yyruleno==129);
      case 130: /* op_assign ::= op_if SUB_ASSIGN op_assign */ yytestcase(yyruleno==130);
      case 131: /* op_assign ::= op_if MUL_ASSIGN op_assign */ yytestcase(yyruleno==131);
      case 132: /* op_assign ::= op_if DIV_ASSIGN op_assign */ yytestcase(yyruleno==132);
      case 133: /* op_assign ::= op_if XOR_ASSIGN op_assign */ yytestcase(yyruleno==133);
      case 134: /* op_assign ::= op_if AND_ASSIGN op_assign */ yytestcase(yyruleno==134);
      case 135: /* op_assign ::= op_if OR_ASSIGN op_assign */ yytestcase(yyruleno==135);
      case 136: /* op_assign ::= op_if LS_ASSIGN op_assign */ yytestcase(yyruleno==136);
      case 137: /* op_assign ::= op_if RS_ASSIGN op_assign */ yytestcase(yyruleno==137);
      case 141: /* op_or ::= op_or LOG_OR op_and */ yytestcase(yyruleno==141);
      case 143: /* op_and ::= op_and LOG_AND op_binor */ yytestcase(yyruleno==143);
      case 145: /* op_binor ::= op_binor BIN_OR op_binxor */ yytestcase(yyruleno==145);
      case 147: /* op_binxor ::= op_binxor BIN_XOR op_binand */ yytestcase(yyruleno==147);
      case 149: /* op_binand ::= op_binand BIN_AND op_equate */ yytestcase(yyruleno==149);
      case 159: /* op_shift ::= op_shift LSL op_add */ yytestcase(yyruleno==159);
      case 160: /* op_shift ::= op_shift LSR op_add */ yytestcase(yyruleno==160);
      case 162: /* op_add ::= op_add ADD op_mult */ yytestcase(yyruleno==162);
      case 163: /* op_add ::= op_add SUB op_mult */ yytestcase(yyruleno==163);
      case 165: /* op_mult ::= op_mult MUL op_unary */ yytestcase(yyruleno==165);
      case 166: /* op_mult ::= op_mult DIV op_unary */ yytestcase(yyruleno==166);
      case 167: /* op_mult ::= op_mult MOD op_unary */ yytestcase(yyruleno==167);
#line 245 "bt_parser.y"
{ yylhsminor.yy293 = new NBinaryOperator(yymsp[-2].minor.yy293, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy293); }
#line 2791 "bt_parser.c"
  yymsp[-2].minor.yy293 = yylhsminor.yy293;
        break;
      case 139: /* op_if ::= op_or QUESTION op_if COLON op_if */
#line 257 "bt_parser.y"
{ yylhsminor.yy293 = new NConditional(yymsp[-4].minor.yy293, yymsp[-2].minor.yy293, yymsp[0].minor.yy293); }
#line 2797 "bt_parser.c"
  yymsp[-4].minor.yy293 = yylhsminor.yy293;
        break;
      case 151: /* op_equate ::= op_equate EQ op_compare */
      case 152: /* op_equate ::= op_equate NE op_compare */ yytestcase(yyruleno==152);
      case 154: /* op_compare ::= op_compare LT op_shift */ yytestcase(yyruleno==154);
      case 155: /* op_compare ::= op_compare GT op_shift */ yytestcase(yyruleno==155);
      case 156: /* op_compare ::= op_compare LE op_shift */ yytestcase(yyruleno==156);
      case 157: /* op_compare ::= op_compare GE op_shift */ yytestcase(yyruleno==157);
#line 275 "bt_parser.y"
{ yylhsminor.yy293 = new NCompareOperator(yymsp[-2].minor.yy293, yymsp[0].minor.yy293, yymsp[-1].minor.yy0->value); }
#line 2808 "bt_parser.c"
  yymsp[-2].minor.yy293 = yylhsminor.yy293;
        break;
      case 169: /* op_unary ::= LOG_NOT op_unary */
      case 170: /* op_unary ::= BIN_NOT op_unary */ yytestcase(yyruleno==170);
      case 171: /* op_unary ::= SUB op_unary */ yytestcase(yyruleno==171);
      case 172: /* op_unary ::= INC op_unary */ yytestcase(yyruleno==172);
      case 173: /* op_unary ::= DEC op_unary */ yytestcase(yyruleno==173);
#line 298 "bt_parser.y"
{ yylhsminor.yy293 = new NUnaryOperator(yymsp[-1].minor.yy0->value, yymsp[0].minor.yy293, true); }
#line 2818 "bt_parser.c"
  yymsp[-1].minor.yy293 = yylhsminor.yy293;
        break;
      case 174: /* op_unary ::= op_unary INC */
      case 175: /* op_unary ::= op_unary DEC */ yytestcase(yyruleno==175);
#line 303 "bt_parser.y"
{ yylhsminor.yy293 = new NUnaryOperator(yymsp[0].minor.yy0->value, yymsp[-1].minor.yy293, false); }
#line 2825 "bt_parser.c"
  yymsp[-1].minor.yy293 = yylhsminor.yy293;
        break;
      case 176: /* op_unary ::= O_ROUND type C_ROUND op_unary */
#line 305 "bt_parser.y"
{ yymsp[-3].minor.yy293 = new NCast(yymsp[-2].minor.yy295, yymsp[0].minor.yy293); }
#line 2831 "bt_parser.c"
        break;
      case 177: /* op_unary ::= SIZEOF O_ROUND type C_ROUND */
#line 306 "bt_parser.y"
{ yymsp[-3].minor.yy293 = new NSizeOf(yymsp[-1].minor.yy295); }
#line 2836 "bt_parser.c"
        break;
      case 178: /* op_unary ::= SIZEOF O_ROUND op_assign C_ROUND */
#line 307 "bt_parser.y"
{ yymsp[-3].minor.yy293 = new NSizeOf(yymsp[-1].minor.yy293); }
#line 2841 "bt_parser.c"
        break;
      case 180: /* op_pointer ::= op_pointer DOT id */
#line 310 "bt_parser.y"
{ yylhsminor.yy293 = new NDotOperator(yymsp[-2].minor.yy293, yymsp[0].minor.yy68); }
#line 2846 "bt_parser.c"
  yymsp[-2].minor.yy293 = yylhsminor.yy293;
        break;
      case 181: /* op_pointer ::= op_pointer O_SQUARE expr C_SQUARE */
#line 311 "bt_parser.y"
{ yylhsminor.yy293 = new NIndexOperator(yymsp[-3].minor.yy293, new NBlock(*yymsp[-1].minor.yy189)); delete yymsp[-1].minor.yy189; }
#line 2852 "bt_parser.c"
  yymsp[-3].minor.yy293 = yylhsminor.yy293;
        break;
      case 184: /* value ::= id O_ROUND expr C_ROUND */
#line 319 "bt_parser.y"
{ yylhsminor.yy293 = new NCall(yymsp[-3].minor.yy68, *yymsp[-1].minor.yy189); delete yymsp[-1].minor.yy189; }
#line 2858 "bt_parser.c"
  yymsp[-3].minor.yy293 = yylhsminor.yy293;
        break;
      case 185: /* value ::= id O_ROUND C_ROUND */
#line 320 "bt_parser.y"
{ yylhsminor.yy293 = new NCall(yymsp[-2].minor.yy68); }
#line 2864 "bt_parser.c"
  yymsp[-2].minor.yy293 = yylhsminor.yy293;
        break;
      case 186: /* value ::= id */
#line 321 "bt_parser.y"
{ yylhsminor.yy293 = yymsp[0].minor.yy68; }
#line 2870 "bt_parser.c"
  yymsp[0].minor.yy293 = yylhsminor.yy293;
        break;
      case 188: /* literal ::= LITERAL_STRING */
#line 324 "bt_parser.y"
{ yylhsminor.yy293 = new NString(yymsp[0].minor.yy0->value); }
#line 2876 "bt_parser.c"
  yymsp[0].minor.yy293 = yylhsminor.yy293;
        break;
      case 191: /* number ::= LITERAL_OCT */
#line 328 "bt_parser.y"
{ yylhsminor.yy293 = new NInteger(VMFunctions::string_to_number(yymsp[0].minor.yy0->value, 8)); }
#line 2882 "bt_parser.c"
  yymsp[0].minor.yy293 = yylhsminor.yy293;
        break;
      case 192: /* number ::= LITERAL_DEC */
#line 329 "bt_parser.y"
{ yylhsminor.yy293 = new NInteger(VMFunctions::string_to_number(yymsp[0].minor.yy0->value, 10)); }
#line 2888 "bt_parser.c"
  yymsp[0].minor.yy293 = yylhsminor.yy293;
        break;
      case 193: /* number ::= LITERAL_HEX */
#line 330 "bt_parser.y"
{ yylhsminor.yy293 = new NInteger(VMFunctions::string_to_number(yymsp[0].minor.yy0->value, 16)); }
#line 2894 "bt_parser.c"
  yymsp[0].minor.yy293 = yylhsminor.yy293;
        break;
      case 194: /* number ::= LITERAL_REAL */
#line 331 "bt_parser.y"
{ yylhsminor.yy293 = new NReal(VMFunctions::string_to_number(yymsp[0].minor.yy0->value)); }
#line 2900 "bt_parser.c"
  yymsp[0].minor.yy293 = yylhsminor.yy293;
        break;
      case 195: /* boolean ::= TRUE */
#line 333 "bt_parser.y"
{ yymsp[0].minor.yy293 = new NBoolean(true); }
#line 2906 "bt_parser.c"
        break;
      case 196: /* boolean ::= FALSE */
#line 334 "bt_parser.y"
{ yymsp[0].minor.yy293 = new NBoolean(false); }
#line 2911 "bt_parser.c"
        break;
      case 197: /* id ::= IDENTIFIER */
#line 336 "bt_parser.y"
{ yylhsminor.yy68 = new NIdentifier(yymsp[0].minor.yy0->value); }
#line 2916 "bt_parser.c"
  yymsp[0].minor.yy68 = yylhsminor.yy68;
        break;
      default:
        break;
/********** End reduce actions ************************************************/
  };
  assert( yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact <= YY_MAX_SHIFTREDUCE ){
    if( yyact>YY_MAX_SHIFT ){
      yyact += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
    }
    yymsp -= yysize-1;
    yypParser->yytos = yymsp;
    yymsp->stateno = (YYACTIONTYPE)yyact;
    yymsp->major = (YYCODETYPE)yygoto;
    yyTraceShift(yypParser, yyact);
  }else{
    assert( yyact == YY_ACCEPT_ACTION );
    yypParser->yytos -= yysize;
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  BTParserARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
/************ Begin %parse_failure code ***************************************/
/************ End %parse_failure code *****************************************/
  BTParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  BTParserTOKENTYPE yyminor         /* The minor type of the error token */
){
  BTParserARG_FETCH;
#define TOKEN yyminor
/************ Begin %syntax_error code ****************************************/
#line 15 "bt_parser.y"

    VMUnused(yymajor); // Silence compiler warnings
    btvm->syntaxError(TOKEN->value, TOKEN->line);
#line 2980 "bt_parser.c"
/************ End %syntax_error code ******************************************/
  BTParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  BTParserARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  assert( yypParser->yytos==yypParser->yystack );
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
/*********** Begin %parse_accept code *****************************************/
/*********** End %parse_accept code *******************************************/
  BTParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "BTParserAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void BTParser(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  BTParserTOKENTYPE yyminor       /* The value for the token */
  BTParserARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  unsigned int yyact;   /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  yypParser = (yyParser*)yyp;
  assert( yypParser->yytos!=0 );
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  BTParserARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput '%s'\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact <= YY_MAX_SHIFTREDUCE ){
      yy_shift(yypParser,yyact,yymajor,yyminor);
#ifndef YYNOERRORRECOVERY
      yypParser->yyerrcnt--;
#endif
      yymajor = YYNOCODE;
    }else if( yyact <= YY_MAX_REDUCE ){
      yy_reduce(yypParser,yyact-YY_MIN_REDUCE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
      yyminorunion.yy0 = yyminor;
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminor);
      }
      yymx = yypParser->yytos->major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor, &yyminorunion);
        yymajor = YYNOCODE;
      }else{
        while( yypParser->yytos >= yypParser->yystack
            && yymx != YYERRORSYMBOL
            && (yyact = yy_find_reduce_action(
                        yypParser->yytos->stateno,
                        YYERRORSYMBOL)) >= YY_MIN_REDUCE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yytos < yypParser->yystack || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
          yypParser->yyerrcnt = -1;
#endif
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          yy_shift(yypParser,yyact,YYERRORSYMBOL,yyminor);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor, yyminor);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor, yyminor);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
        yypParser->yyerrcnt = -1;
#endif
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yytos>yypParser->yystack );
#ifndef NDEBUG
  if( yyTraceFILE ){
    yyStackEntry *i;
    char cDiv = '[';
    fprintf(yyTraceFILE,"%sReturn. Stack=",yyTracePrompt);
    for(i=&yypParser->yystack[1]; i<=yypParser->yytos; i++){
      fprintf(yyTraceFILE,"%c%s", cDiv, yyTokenName[i->major]);
      cDiv = ' ';
    }
    fprintf(yyTraceFILE,"]\n");
  }
#endif
  return;
}
