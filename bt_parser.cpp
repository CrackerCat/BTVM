/*
** 2000-05-29
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Driver template for the LEMON parser generator.
**
** The "lemon" program processes an LALR(1) input grammar file, then uses
** this template to construct a parser.  The "lemon" program inserts text
** at each "%%" line.  Also, any "P-a-r-s-e" identifer prefix (without the
** interstitial "-" characters) contained in this template is changed into
** the value of the %name directive from the grammar.  Otherwise, the content
** of this template is copied straight through into the generate parser
** source file.
**
** The following is the concatenation of all %include directives from the
** input grammar file:
*/
#include <stdio.h>
/************ Begin %include sections from the grammar ************************/
#line 3 "bt_parser.y"

    #include <cassert>
    #include "btvm/vm/vm_functions.h"
    #include "btvm/btvm.h"
    #include "bt_lexer.h"
#line 34 "bt_parser.c"
/**************** End of %include directives **********************************/
/* These constants specify the various numeric values for terminal symbols
** in a format understandable to "makeheaders".  This section is blank unless
** "lemon" is run with the "-m" command-line option.
***************** Begin makeheaders token definitions *************************/
/**************** End makeheaders token definitions ***************************/

/* The next sections is a series of control #defines.
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used to store the integer codes
**                       that represent terminal and non-terminal symbols.
**                       "unsigned char" is used if there are fewer than
**                       256 symbols.  Larger types otherwise.
**    YYNOCODE           is a number of type YYCODETYPE that is not used for
**                       any terminal or nonterminal symbol.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       (also known as: "terminal symbols") have fall-back
**                       values which should be used if the original symbol
**                       would not parse.  This permits keywords to sometimes
**                       be used as identifiers, for example.
**    YYACTIONTYPE       is the data type used for "action codes" - numbers
**                       that indicate what to do in response to the next
**                       token.
**    BTParserTOKENTYPE     is the data type used for minor type for terminal
**                       symbols.  Background: A "minor type" is a semantic
**                       value associated with a terminal or non-terminal
**                       symbols.  For example, for an "ID" terminal symbol,
**                       the minor type might be the name of the identifier.
**                       Each non-terminal can have a different minor type.
**                       Terminal symbols all have the same minor type, though.
**                       This macros defines the minor type for terminal 
**                       symbols.
**    YYMINORTYPE        is the data type used for all minor types.
**                       This is typically a union of many types, one of
**                       which is BTParserTOKENTYPE.  The entry in the union
**                       for terminal symbols is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    BTParserARG_SDECL     A static variable declaration for the %extra_argument
**    BTParserARG_PDECL     A parameter declaration for the %extra_argument
**    BTParserARG_STORE     Code to store %extra_argument into yypParser
**    BTParserARG_FETCH     Code to extract %extra_argument from yypParser
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YY_MAX_SHIFT       Maximum value for shift actions
**    YY_MIN_SHIFTREDUCE Minimum value for shift-reduce actions
**    YY_MAX_SHIFTREDUCE Maximum value for shift-reduce actions
**    YY_MIN_REDUCE      Maximum value for reduce actions
**    YY_ERROR_ACTION    The yy_action[] code for syntax error
**    YY_ACCEPT_ACTION   The yy_action[] code for accept
**    YY_NO_ACTION       The yy_action[] code for no-op
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/************* Begin control #defines *****************************************/
#define YYCODETYPE unsigned char
#define YYNOCODE 157
#define YYACTIONTYPE unsigned short int
#define BTParserTOKENTYPE  BTLexer::Token* 
typedef union {
  int yyinit;
  BTParserTOKENTYPE yy0;
  NArgument* yy100;
  NodeList* yy121;
  int yy124;
  NVariable* yy131;
  NIdentifier* yy132;
  NType* yy179;
  NBlock* yy220;
  Node* yy225;
  NScalarType* yy237;
  NCustomVariable* yy294;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define BTParserARG_SDECL  BTVM* btvm      ;
#define BTParserARG_PDECL , BTVM* btvm      
#define BTParserARG_FETCH  BTVM* btvm       = yypParser->btvm      
#define BTParserARG_STORE yypParser->btvm       = btvm      
#define YYNSTATE             279
#define YYNRULE              205
#define YY_MAX_SHIFT         278
#define YY_MIN_SHIFTREDUCE   427
#define YY_MAX_SHIFTREDUCE   631
#define YY_MIN_REDUCE        632
#define YY_MAX_REDUCE        836
#define YY_ERROR_ACTION      837
#define YY_ACCEPT_ACTION     838
#define YY_NO_ACTION         839
/************* End control #defines *******************************************/

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N <= YY_MAX_SHIFT             Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   N between YY_MIN_SHIFTREDUCE       Shift to an arbitrary state then
**     and YY_MAX_SHIFTREDUCE           reduce by rule N-YY_MIN_SHIFTREDUCE.
**
**   N between YY_MIN_REDUCE            Reduce by rule N-YY_MIN_REDUCE
**     and YY_MAX_REDUCE
**
**   N == YY_ERROR_ACTION               A syntax error has occurred.
**
**   N == YY_ACCEPT_ACTION              The parser accepts its input.
**
**   N == YY_NO_ACTION                  No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as either:
**
**    (A)   N = yy_action[ yy_shift_ofst[S] + X ]
**    (B)   N = yy_default[S]
**
** The (A) formula is preferred.  The B formula is used instead if:
**    (1)  The yy_shift_ofst[S]+X value is out of range, or
**    (2)  yy_lookahead[yy_shift_ofst[S]+X] is not equal to X, or
**    (3)  yy_shift_ofst[S] equal YY_SHIFT_USE_DFLT.
** (Implementation note: YY_SHIFT_USE_DFLT is chosen so that
** YY_SHIFT_USE_DFLT+X will be out of range for all possible lookaheads X.
** Hence only tests (1) and (2) need to be evaluated.)
**
** The formulas above are for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
**
*********** Begin parsing tables **********************************************/
#define YY_ACTTAB_COUNT (4850)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */    30,   74,   73,  498,  631,  234,  545,  113,   10,  763,
 /*    10 */   112,   91,   96,  240,   93,   92,   89,   83,   82,  138,
 /*    20 */   631,  499,  500,  501,  503,  504,  506,  507,  508,  509,
 /*    30 */   510,  511,  512,  513,  263,  489,  505,  490,  624,  625,
 /*    40 */   626,  627,  628,  130,  219,  259,  104,  250,  249,   28,
 /*    50 */   245,  242,  241,   38,  763,  763,  506,  507,  508,   39,
 /*    60 */   467,   72,   71,  148,  514,  515,  516,  517,  518,  519,
 /*    70 */   520,  521,  522,  523,  524,  465,   42,   86,  169,  631,
 /*    80 */   170,   88,   87,   85,   84,  269,  230,  621,  624,  625,
 /*    90 */   626,  627,  628,  629,  630,   30,  631,  265,  498,  265,
 /*   100 */   139,  545,  113,   10,  759,  112,   91,  607,  608,   93,
 /*   110 */    92,  478,   59,  478,   39,  631,  499,  500,  501,  503,
 /*   120 */   504,  506,  507,  508,  509,  510,  511,  512,  513,  538,
 /*   130 */   487,  123,  488,  150,  631,  658,  123,  479,  128,  631,
 /*   140 */   259,  116,  250,  249,   28,  245,  242,  241,   38,  759,
 /*   150 */   759,   77,   58,   57,   56,   55,   54,   53,   52,   51,
 /*   160 */    50,  146,  127,  621,  624,  625,  626,  627,  628,  629,
 /*   170 */   630,  631,   86,  171,   96,  240,   88,   87,   85,   84,
 /*   180 */   269,  631,  621,  624,  625,  626,  627,  628,  629,  630,
 /*   190 */    30,  121,  265,  498,  485,  457,  545,  113,   10,  758,
 /*   200 */   112,   91,  551,  550,   93,   92,  478,  623,   49,  486,
 /*   210 */   631,  499,  500,  501,  503,  504,  506,  507,  508,  509,
 /*   220 */   510,  511,  512,  513,  144,  124,   40,  475,  154,  622,
 /*   230 */   159,  474,  128,  234,  159,  259,  128,  250,  249,   28,
 /*   240 */   245,  242,  241,   38,  758,  758,   29,  156,  621,  624,
 /*   250 */   625,  626,  627,  628,  629,  630,  110,  195,  117,  489,
 /*   260 */   505,  490,  439,  124,   40,  218,  116,   86,  137,  133,
 /*   270 */   104,   88,   87,   85,   84,  269,  265,  621,  624,  625,
 /*   280 */   626,  627,  628,  629,  630,  632,   30,  222,  230,  498,
 /*   290 */   478,   94,  545,  107,   10,  464,  106,   90,  153,  153,
 /*   300 */    93,   92,  145,  128,  129,  148,  631,  499,  500,  501,
 /*   310 */   503,  504,  506,  507,  508,  509,  510,  511,  512,  513,
 /*   320 */   117,  631,  498,  194,  236,   60,  113,  220,  223,  112,
 /*   330 */    91,  259,  484,  250,  249,   28,  245,  242,  241,   38,
 /*   340 */   499,  500,  501,  503,  504,  506,  507,  508,  509,  510,
 /*   350 */   511,  512,  513,  489,  505,  490,  616,   60,  265,   48,
 /*   360 */   472,  136,  264,   86,  104,  225,  159,   88,   87,   85,
 /*   370 */    84,  269,  477,  621,  624,  625,  626,  627,  628,  629,
 /*   380 */   630,   30,  158,  260,  498,   99,   94,  545,  107,   10,
 /*   390 */   262,  106,   90,  155,  471,   93,   92,  631,  631,  159,
 /*   400 */   159,  631,  499,  500,  501,  503,  504,  506,  507,  508,
 /*   410 */   509,  510,  511,  512,  513,  160,  117,  266,  244,   60,
 /*   420 */   224,  159,  261,  221,  102,  149,  259,  151,  250,  249,
 /*   430 */    28,  245,  242,  241,   38,  623,  631,  620,   60,  226,
 /*   440 */    60,  116,  546,  615,  542,   77,  228,  272,  271,  270,
 /*   450 */   203,  163,  187,  191,  166,  186,  189,  622,   86,   27,
 /*   460 */    60,  703,   88,   87,   85,   84,  269,  152,  621,  624,
 /*   470 */   625,  626,  627,  628,  629,  630,   30,  703,  452,  498,
 /*   480 */    12,   60,  545,  113,   10,  732,  112,   91,   14,   60,
 /*   490 */    93,   92,   15,   60,   76,   75,  631,  499,  500,  501,
 /*   500 */   503,  504,  506,  507,  508,  509,  510,  511,  512,  513,
 /*   510 */   617,   60,  466,   60,   60,   79,   78,  261,  121,   70,
 /*   520 */    69,  259,  459,  250,  249,   28,  245,  242,  241,   38,
 /*   530 */   623,  614,  620,  117,  117,  121,  454,   80,  615,  458,
 /*   540 */   495,  494,  275,  271,  270,  203,  163,  187,  191,  166,
 /*   550 */   186,  189,  622,   86,  196,  117,  197,   88,   87,   85,
 /*   560 */    84,  269,  493,  621,  624,  625,  626,  627,  628,  629,
 /*   570 */   630,   30,  121,  265,  498,  265,  456,  545,  113,   10,
 /*   580 */   763,  112,   91,   62,   64,   93,   92,  478,  227,  478,
 /*   590 */    40,  631,  499,  500,  501,  503,  504,  506,  507,  508,
 /*   600 */   509,  510,  511,  512,  513,  161,   80,  140,  141,   10,
 /*   610 */   438,  119,  261,  231,  172,  445,  259,  147,  250,  249,
 /*   620 */    28,  245,  242,  241,   38,  623,  444,  620,  109,  443,
 /*   630 */   268,  442,  134,  615,  613,  483,  135,  198,  274,  270,
 /*   640 */   203,  163,  187,  191,  166,  186,  189,  622,   86,  199,
 /*   650 */    60,  278,   88,   87,   85,   84,  269,  216,  621,  624,
 /*   660 */   625,  626,  627,  628,  629,  630,   30,  468,  157,  498,
 /*   670 */   437,  451,  545,  113,   10,  131,  112,   91,   98,  450,
 /*   680 */    93,   92,  449,  100,  448,    4,  631,  499,  500,  501,
 /*   690 */   503,  504,  506,  507,  508,  509,  510,  511,  512,  513,
 /*   700 */   447,    5,  446,   65,   81,    6,    7,  261,  611,  610,
 /*   710 */     8,  259,  537,  250,  249,   28,  245,  242,  241,   38,
 /*   720 */   623,   41,  620,  544,   60,   25,  543,  237,  615,    2,
 /*   730 */     3,  108,   43,   32,  273,  203,  163,  187,  191,  166,
 /*   740 */   186,  189,  622,   86,   26,   33,   34,   88,   87,   85,
 /*   750 */    84,  269,   44,  621,  624,  625,  626,  627,  628,  629,
 /*   760 */   630,   30,  741,   11,  498,   35,   36,  545,  113,   10,
 /*   770 */   132,  112,   91,   37,   45,   93,   92,   13,  461,   46,
 /*   780 */    39,  631,  499,  500,  501,  503,  504,  506,  507,  508,
 /*   790 */   509,  510,  511,  512,  513,   47,  460,   97,  125,  101,
 /*   800 */   103,  481,  261,   31,    9,   68,  259,   67,  250,  249,
 /*   810 */    28,  245,  242,  241,   38,  623,   66,  620,  489,  505,
 /*   820 */   490,  634,   61,  615,   63,  634,  634,  120,  118,  104,
 /*   830 */   214,  163,  187,  191,  166,  186,  189,  622,   86,  634,
 /*   840 */   634,  634,   88,   87,   85,   84,  269,  634,  621,  624,
 /*   850 */   625,  626,  627,  628,  629,  630,   30,  634,  634,  498,
 /*   860 */   634,  634,  545,  113,   10,  555,  112,   91,  634,  634,
 /*   870 */    93,   92,  634,  634,  634,  634,  631,  499,  500,  501,
 /*   880 */   503,  504,  506,  507,  508,  509,  510,  511,  512,  513,
 /*   890 */   634,  634,  634,  634,  634,  634,  634,  261,  634,  634,
 /*   900 */   634,  259,  634,  250,  249,   28,  245,  242,  241,   38,
 /*   910 */   623,  634,  620,  489,  505,  490,  634,  634,  615,  634,
 /*   920 */   634,  634,  122,  115,  104,  634,  164,  187,  191,  166,
 /*   930 */   186,  189,  622,   86,  634,  634,  634,   88,   87,   85,
 /*   940 */    84,  269,  634,  621,  624,  625,  626,  627,  628,  629,
 /*   950 */   630,   30,  634,  634,  498,  634,  634,  545,  113,   10,
 /*   960 */   496,  112,   91,  634,  634,   93,   92,  634,  634,  634,
 /*   970 */   634,  631,  499,  500,  501,  503,  504,  506,  507,  508,
 /*   980 */   509,  510,  511,  512,  513,  634,  634,  634,  634,  634,
 /*   990 */   634,  634,  261,  634,  634,  634,  259,  634,  250,  249,
 /*  1000 */    28,  245,  242,  241,   38,  623,  634,  620,  489,  505,
 /*  1010 */   490,  634,  634,  615,  634,  634,  634,  142,  634,  104,
 /*  1020 */   634,  165,  187,  191,  166,  186,  189,  622,   86,  634,
 /*  1030 */   634,  634,   88,   87,   85,   84,  269,  634,  621,  624,
 /*  1040 */   625,  626,  627,  628,  629,  630,   30,  634,  634,  498,
 /*  1050 */   634,  634,  545,  113,   10,  491,  112,   91,  634,  634,
 /*  1060 */    93,   92,  634,  634,  634,  634,  631,  499,  500,  501,
 /*  1070 */   503,  504,  506,  507,  508,  509,  510,  511,  512,  513,
 /*  1080 */   634,  634,  634,  634,  634,  634,  634,  261,  634,  634,
 /*  1090 */   634,  259,  634,  250,  249,   28,  245,  242,  241,   38,
 /*  1100 */   623,  634,  620,  489,  505,  490,  634,  634,  615,  634,
 /*  1110 */   634,  634,  267,  634,  104,  634,  634,  184,  191,  166,
 /*  1120 */   186,  189,  622,   86,  634,  634,  634,   88,   87,   85,
 /*  1130 */    84,  269,  634,  621,  624,  625,  626,  627,  628,  629,
 /*  1140 */   630,   30,  634,  634,  498,  634,  634,  545,  113,   10,
 /*  1150 */   497,  112,   91,  634,  634,   93,   92,  634,  634,  634,
 /*  1160 */   634,  631,  499,  500,  501,  503,  504,  506,  507,  508,
 /*  1170 */   509,  510,  511,  512,  513,  634,  634,  634,  634,  634,
 /*  1180 */   634,  634,  261,  634,  634,  634,  259,  634,  250,  249,
 /*  1190 */    28,  245,  242,  241,   38,  623,  634,  620,  634,  634,
 /*  1200 */   634,  634,  634,  615,  634,  634,  634,  634,  634,  634,
 /*  1210 */   634,  634,  192,  191,  166,  186,  189,  622,   86,  634,
 /*  1220 */   634,  634,   88,   87,   85,   84,  269,  634,  621,  624,
 /*  1230 */   625,  626,  627,  628,  629,  630,   30,  634,  634,  498,
 /*  1240 */   634,  634,  545,  113,   10,  492,  112,   91,  634,  634,
 /*  1250 */    93,   92,  634,  634,  634,  634,  631,  499,  500,  501,
 /*  1260 */   503,  504,  506,  507,  508,  509,  510,  511,  512,  513,
 /*  1270 */   634,  634,  634,  634,  634,  634,  634,  261,  634,  634,
 /*  1280 */   634,  259,  634,  250,  249,   28,  245,  242,  241,   38,
 /*  1290 */   623,  634,  620,  634,  634,  634,  634,  634,  615,  634,
 /*  1300 */   634,  634,  634,  634,  634,  634,  634,  202,  191,  166,
 /*  1310 */   186,  189,  622,   86,  634,  634,  634,   88,   87,   85,
 /*  1320 */    84,  269,  634,  621,  624,  625,  626,  627,  628,  629,
 /*  1330 */   630,   30,  634,  634,  498,  634,  634,  545,  113,   10,
 /*  1340 */   634,  112,   91,  634,  634,   93,   92,  634,  634,  634,
 /*  1350 */   634,  631,  499,  500,  501,  503,  504,  506,  507,  508,
 /*  1360 */   509,  510,  511,  512,  513,  634,  634,  634,  634,  634,
 /*  1370 */   634,  634,  261,  634,  634,  634,  258,  634,  256,  255,
 /*  1380 */    28,  245,  242,  241,   38,  623,  634,  620,  634,  634,
 /*  1390 */   634,  634,  634,  615,  634,  634,  634,  634,  634,  634,
 /*  1400 */   634,  634,  213,  191,  166,  186,  189,  622,   86,  634,
 /*  1410 */   634,  634,   88,   87,   85,   84,  269,  634,  621,  624,
 /*  1420 */   625,  626,  627,  628,  629,  630,   30,  634,  634,  498,
 /*  1430 */   634,  634,  545,  113,   10,  634,  112,   91,  634,  634,
 /*  1440 */    93,   92,  634,  634,  634,  634,  631,  499,  500,  501,
 /*  1450 */   503,  504,  506,  507,  508,  509,  510,  511,  512,  513,
 /*  1460 */   634,  634,  634,  634,  634,  634,  634,  261,  634,  634,
 /*  1470 */   634,  259,  634,  250,  249,   28,  245,  242,  241,   38,
 /*  1480 */   623,  634,  620,  634,  634,  634,  634,  634,  615,  634,
 /*  1490 */   634,  634,  634,  634,  634,  634,  634,  634,  201,  166,
 /*  1500 */   186,  189,  622,   86,  634,  634,  634,   88,   87,   85,
 /*  1510 */    84,  269,  634,  621,  624,  625,  626,  627,  628,  629,
 /*  1520 */   630,    1,  178,  634,  634,  634,  634,  489,  505,  490,
 /*  1530 */   634,  634,  634,  634,  540,  634,  114,  105,  104,  838,
 /*  1540 */   429,  430,  431,  432,  433,  434,  435,  436,  634,  162,
 /*  1550 */   623,  634,  620,  634,  634,  532,  541,  634,  615,  560,
 /*  1560 */   215,  276,  272,  271,  270,  203,  163,  187,  191,  166,
 /*  1570 */   186,  189,  622,  261,  634,  634,  634,  178,  634,  634,
 /*  1580 */   634,  634,  489,  505,  490,  634,  623,  634,  620,  540,
 /*  1590 */   634,  114,  105,  104,  243,  428,  430,  431,  432,  433,
 /*  1600 */   434,  435,  436,  634,  162,  623,  634,  620,  622,  634,
 /*  1610 */   532,  541,  634,  615,  560,  215,  276,  272,  271,  270,
 /*  1620 */   203,  163,  187,  191,  166,  186,  189,  622,   30,  143,
 /*  1630 */   634,  174,  634,  634,  634,  113,  634,  634,  112,   91,
 /*  1640 */   634,  634,  634,  634,  634,  634,  634,  634,  631,  499,
 /*  1650 */   500,  501,  503,  504,  506,  507,  508,  509,  510,  511,
 /*  1660 */   512,  513,   30,  634,  634,  498,  634,  634,  634,  113,
 /*  1670 */   634,  634,  112,   91,  634,  634,  634,  634,  634,  634,
 /*  1680 */   634,  634,  631,  499,  500,  501,  503,  504,  506,  507,
 /*  1690 */   508,  509,  510,  511,  512,  513,  634,  634,  634,  634,
 /*  1700 */   634,  634,  634,  634,  634,   86,  634,  634,  634,   88,
 /*  1710 */    87,   85,   84,  269,  634,  621,  624,  625,  626,  627,
 /*  1720 */   628,  629,  630,  634,  205,  634,  634,  634,  634,  634,
 /*  1730 */   634,  489,  505,  490,  440,  634,  634,  634,  634,   86,
 /*  1740 */   137,  133,  104,   88,   87,   85,   84,  269,  634,  621,
 /*  1750 */   624,  625,  626,  627,  628,  629,  630,   16,  634,  634,
 /*  1760 */   634,  634,  634,  634,  634,  178,  634,  634,  634,  634,
 /*  1770 */   489,  505,  490,  634,  634,  634,  634,  540,  634,  111,
 /*  1780 */   105,  104,  634,  634,  634,  634,  634,  634,  539,  634,
 /*  1790 */   557,  634,  162,  623,  634,  620,  634,  634,  532,  541,
 /*  1800 */   634,  615,  560,  215,  276,  272,  271,  270,  203,  163,
 /*  1810 */   187,  191,  166,  186,  189,  622,   17,  634,  634,  634,
 /*  1820 */   634,  634,  634,  634,  178,  634,  634,  634,  634,  489,
 /*  1830 */   505,  490,  634,  634,  634,  634,  540,  634,  111,  105,
 /*  1840 */   104,  634,  634,  634,  634,  634,  634,  539,  634,  557,
 /*  1850 */   634,  162,  623,  634,  620,  634,  634,  532,  541,  634,
 /*  1860 */   615,  560,  215,  276,  272,  271,  270,  203,  163,  187,
 /*  1870 */   191,  166,  186,  189,  622,   18,  634,  634,  178,  634,
 /*  1880 */   634,  634,  634,  489,  505,  490,  634,  634,  634,  634,
 /*  1890 */   540,  634,  111,  105,  104,  634,  634,  634,  634,  634,
 /*  1900 */   634,  539,  634,  526,  634,  162,  623,  634,  620,  634,
 /*  1910 */   634,  532,  541,  634,  615,  560,  215,  276,  272,  271,
 /*  1920 */   270,  203,  163,  187,  191,  166,  186,  189,  622,  634,
 /*  1930 */   634,  634,   19,  634,  634,  178,  634,  634,  634,  634,
 /*  1940 */   489,  505,  490,  634,  634,  634,  634,  540,  634,  111,
 /*  1950 */   105,  104,  634,  634,  634,  634,  634,  634,  539,  634,
 /*  1960 */   526,  634,  162,  623,  634,  620,  634,  634,  532,  541,
 /*  1970 */   634,  615,  560,  215,  276,  272,  271,  270,  203,  163,
 /*  1980 */   187,  191,  166,  186,  189,  622,   21,  634,  634,  178,
 /*  1990 */   634,  634,  634,  634,  489,  505,  490,  634,  634,  634,
 /*  2000 */   634,  540,  634,  111,  105,  104,  634,  634,  634,  634,
 /*  2010 */   634,  634,  539,  634,  526,  634,  162,  623,  634,  620,
 /*  2020 */   634,  634,  532,  541,  634,  615,  560,  215,  276,  272,
 /*  2030 */   271,  270,  203,  163,  187,  191,  166,  186,  189,  622,
 /*  2040 */   634,  634,  634,   22,  634,  634,  178,  634,  634,  634,
 /*  2050 */   634,  489,  505,  490,  634,  634,  634,  634,  540,  634,
 /*  2060 */   111,  105,  104,  634,  634,  634,  634,  634,  634,  539,
 /*  2070 */   634,  526,  634,  162,  623,  634,  620,  634,  634,  532,
 /*  2080 */   541,  634,  615,  560,  215,  276,  272,  271,  270,  203,
 /*  2090 */   163,  187,  191,  166,  186,  189,  622,   23,  634,  634,
 /*  2100 */   178,  634,  634,  634,  634,  489,  505,  490,  634,  634,
 /*  2110 */   634,  634,  540,  634,  111,  105,  104,  634,  634,  634,
 /*  2120 */   634,  634,  634,  539,  634,  526,  634,  162,  623,  634,
 /*  2130 */   620,  634,  634,  532,  541,  634,  615,  560,  215,  276,
 /*  2140 */   272,  271,  270,  203,  163,  187,  191,  166,  186,  189,
 /*  2150 */   622,  634,  634,  634,   24,  634,  634,  178,  634,  634,
 /*  2160 */   634,  634,  489,  505,  490,  634,  634,  634,  634,  540,
 /*  2170 */   634,  111,  105,  104,  634,  634,  634,  634,  634,  634,
 /*  2180 */   539,  634,  526,  634,  162,  623,  634,  620,  634,  634,
 /*  2190 */   532,  541,  634,  615,  560,  215,  276,  272,  271,  270,
 /*  2200 */   203,  163,  187,  191,  166,  186,  189,  622,  634,  634,
 /*  2210 */    20,  634,  634,  634,  634,  634,  634,  634,  178,  634,
 /*  2220 */   634,  634,  634,  489,  505,  490,  634,  634,  634,  634,
 /*  2230 */   540,  634,  111,  105,  104,  634,  634,  634,  634,  634,
 /*  2240 */   634,  539,  634,  557,  634,  162,  623,  634,  620,  634,
 /*  2250 */   634,  532,  541,  634,  615,  560,  215,  276,  272,  271,
 /*  2260 */   270,  203,  163,  187,  191,  166,  186,  189,  622,  178,
 /*  2270 */   634,  634,  634,  634,  489,  505,  490,  634,  634,  634,
 /*  2280 */   634,  540,  634,  111,  105,  104,  634,  634,  634,  634,
 /*  2290 */   634,  634,  539,  634,  531,  634,  162,  623,  634,  620,
 /*  2300 */   535,  634,  251,  541,  634,  615,  560,  215,  276,  272,
 /*  2310 */   271,  270,  203,  163,  187,  191,  166,  186,  189,  622,
 /*  2320 */   634,  634,  634,  634,  178,  634,  634,  634,  634,  489,
 /*  2330 */   505,  490,  634,  634,  634,  634,  540,  634,  111,  105,
 /*  2340 */   104,  634,  634,  634,  634,  634,  634,  539,  634,  530,
 /*  2350 */   634,  162,  623,  634,  620,  534,  634,  251,  541,  634,
 /*  2360 */   615,  560,  215,  276,  272,  271,  270,  203,  163,  187,
 /*  2370 */   191,  166,  186,  189,  622,  178,  634,  634,  634,  634,
 /*  2380 */   489,  505,  490,  634,  634,  634,  634,  540,  634,  111,
 /*  2390 */   105,  104,  634,  634,  634,  634,  634,  634,  539,  634,
 /*  2400 */   529,  634,  162,  623,  634,  620,  533,  634,  251,  541,
 /*  2410 */   634,  615,  560,  215,  276,  272,  271,  270,  203,  163,
 /*  2420 */   187,  191,  166,  186,  189,  622,  634,  634,  634,  634,
 /*  2430 */   178,  634,  634,  634,  634,  489,  505,  490,  634,  634,
 /*  2440 */   634,  634,  540,  634,  111,  105,  104,  634,  634,  634,
 /*  2450 */   634,  634,  634,  539,  634,  528,  634,  162,  623,  634,
 /*  2460 */   620,  257,  634,  251,  541,  634,  615,  560,  215,  276,
 /*  2470 */   272,  271,  270,  203,  163,  187,  191,  166,  186,  189,
 /*  2480 */   622,  178,  634,  634,  634,  634,  489,  505,  490,  634,
 /*  2490 */   634,  634,  634,  540,  634,  111,  105,  104,  634,  634,
 /*  2500 */   634,  634,  634,  634,  539,  634,  528,  634,  162,  623,
 /*  2510 */   634,  620,  235,  634,  251,  541,  634,  615,  560,  215,
 /*  2520 */   276,  272,  271,  270,  203,  163,  187,  191,  166,  186,
 /*  2530 */   189,  622,  634,  634,  634,  634,  178,  634,  634,  634,
 /*  2540 */   634,  489,  505,  490,  634,  634,  634,  634,  540,  634,
 /*  2550 */   111,  105,  104,  634,  634,  634,  634,  634,  634,  539,
 /*  2560 */   634,  556,  634,  162,  623,  634,  620,  634,  634,  532,
 /*  2570 */   541,  634,  615,  560,  215,  276,  272,  271,  270,  203,
 /*  2580 */   163,  187,  191,  166,  186,  189,  622,  178,  634,  634,
 /*  2590 */   634,  634,  489,  505,  490,  634,  634,  634,  634,  540,
 /*  2600 */   634,  111,  105,  104,  634,  634,  634,  634,  634,  634,
 /*  2610 */   539,  634,  525,  634,  162,  623,  634,  620,  634,  634,
 /*  2620 */   532,  541,  634,  615,  560,  215,  276,  272,  271,  270,
 /*  2630 */   203,  163,  187,  191,  166,  186,  189,  622,  634,  634,
 /*  2640 */   634,  634,  178,  634,  634,  634,  634,  489,  505,  490,
 /*  2650 */   634,  634,  634,  634,  540,  634,  111,  105,  104,  634,
 /*  2660 */   634,  634,  634,  634,  634,  539,  634,  529,  634,  162,
 /*  2670 */   623,  634,  620,  634,  634,  532,  541,  634,  615,  560,
 /*  2680 */   215,  276,  272,  271,  270,  203,  163,  187,  191,  166,
 /*  2690 */   186,  189,  622,  178,  634,  634,  634,  634,  489,  505,
 /*  2700 */   490,  634,  634,  634,  634,  540,  634,  111,  105,  104,
 /*  2710 */   634,  634,  634,  634,  634,  634,  539,  634,  531,  634,
 /*  2720 */   162,  623,  634,  620,  634,  634,  532,  541,  634,  615,
 /*  2730 */   560,  215,  276,  272,  271,  270,  203,  163,  187,  191,
 /*  2740 */   166,  186,  189,  622,  634,  634,  634,  634,  178,  634,
 /*  2750 */   634,  634,  634,  489,  505,  490,  634,  634,  634,  634,
 /*  2760 */   540,  634,  111,  105,  104,  634,  634,  634,  634,  634,
 /*  2770 */   634,  539,  634,  530,  634,  162,  623,  634,  620,  634,
 /*  2780 */   634,  532,  541,  634,  615,  560,  215,  276,  272,  271,
 /*  2790 */   270,  203,  163,  187,  191,  166,  186,  189,  622,  178,
 /*  2800 */   634,  634,  634,  634,  489,  505,  490,  634,  634,  634,
 /*  2810 */   634,  540,  634,  111,  105,  104,  634,  634,  634,  634,
 /*  2820 */   634,  634,  539,  634,  238,  634,  162,  623,  634,  620,
 /*  2830 */   634,  634,  532,  541,  634,  615,  560,  215,  276,  272,
 /*  2840 */   271,  270,  203,  163,  187,  191,  166,  186,  189,  622,
 /*  2850 */   634,  634,  217,  634,  193,  634,  634,  634,  634,  489,
 /*  2860 */   505,  490,  440,  634,  634,  634,  634,  634,  137,  126,
 /*  2870 */   104,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2880 */   634,  162,  623,  634,  620,  634,  634,  634,  634,  634,
 /*  2890 */   615,  560,  215,  276,  272,  271,  270,  203,  163,  187,
 /*  2900 */   191,  166,  186,  189,  622,  176,  634,  634,  634,  634,
 /*  2910 */   489,  505,  490,  634,  634,  634,  634,  634,  634,  229,
 /*  2920 */   261,  104,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2930 */   634,  634,  162,  623,  634,  620,  634,  634,  634,  634,
 /*  2940 */   634,  615,  560,  215,  276,  272,  271,  270,  203,  163,
 /*  2950 */   187,  191,  166,  186,  189,  622,  489,  505,  490,  634,
 /*  2960 */   634,  634,  634,  634,  634,  233,  261,  104,  634,  634,
 /*  2970 */   634,  634,  634,  634,  634,  634,  634,  634,  162,  623,
 /*  2980 */   634,  620,  634,  634,  634,  634,  634,  615,  232,  215,
 /*  2990 */   276,  272,  271,  270,  203,  163,  187,  191,  166,  186,
 /*  3000 */   189,  622,  239,  634,  634,  634,  634,  634,  634,  634,
 /*  3010 */   634,  634,  634,  634,  634,  634,  634,  261,  634,  634,
 /*  3020 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  162,
 /*  3030 */   623,  634,  620,  634,  246,  634,  634,  634,  615,  560,
 /*  3040 */   215,  276,  272,  271,  270,  203,  163,  187,  191,  166,
 /*  3050 */   186,  189,  622,  239,  634,  634,  634,  634,  634,  634,
 /*  3060 */   634,  634,  634,  634,  634,  634,  634,  634,  261,  634,
 /*  3070 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3080 */   162,  623,  634,  620,  634,  247,  634,  634,  634,  615,
 /*  3090 */   560,  215,  276,  272,  271,  270,  203,  163,  187,  191,
 /*  3100 */   166,  186,  189,  622,  239,  634,  634,  634,  634,  634,
 /*  3110 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  261,
 /*  3120 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3130 */   634,  162,  623,  634,  620,  634,  248,  634,  634,  634,
 /*  3140 */   615,  560,  215,  276,  272,  271,  270,  203,  163,  187,
 /*  3150 */   191,  166,  186,  189,  622,  239,  634,  634,  634,  634,
 /*  3160 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3170 */   261,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3180 */   634,  634,  162,  623,  634,  620,  634,  252,  634,  634,
 /*  3190 */   634,  615,  560,  215,  276,  272,  271,  270,  203,  163,
 /*  3200 */   187,  191,  166,  186,  189,  622,  239,  634,  634,  634,
 /*  3210 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3220 */   634,  261,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3230 */   634,  634,  634,  162,  623,  634,  620,  634,  253,  634,
 /*  3240 */   634,  634,  615,  560,  215,  276,  272,  271,  270,  203,
 /*  3250 */   163,  187,  191,  166,  186,  189,  622,  239,  634,  634,
 /*  3260 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3270 */   634,  634,  261,  634,  634,  634,  634,  634,  634,  634,
 /*  3280 */   634,  634,  634,  634,  162,  623,  634,  620,  634,  254,
 /*  3290 */   634,  634,  634,  615,  560,  215,  276,  272,  271,  270,
 /*  3300 */   203,  163,  187,  191,  166,  186,  189,  622,  177,  634,
 /*  3310 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3320 */   634,  634,  634,  261,  634,  634,  634,  634,  634,  634,
 /*  3330 */   634,  634,  634,  634,  634,  162,  623,  634,  620,  634,
 /*  3340 */   634,  634,  634,  634,  615,  560,  215,  276,  272,  271,
 /*  3350 */   270,  203,  163,  187,  191,  166,  186,  189,  622,  185,
 /*  3360 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3370 */   634,  634,  634,  634,  261,  634,  634,  634,  634,  634,
 /*  3380 */   634,  634,  634,  634,  634,  634,  162,  623,  634,  620,
 /*  3390 */   634,  634,  634,  634,  634,  615,  560,  215,  276,  272,
 /*  3400 */   271,  270,  203,  163,  187,  191,  166,  186,  189,  622,
 /*  3410 */   204,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3420 */   634,  634,  634,  634,  634,  261,  634,  634,  634,  634,
 /*  3430 */   634,  634,  634,  634,  634,  634,  634,  162,  623,  634,
 /*  3440 */   620,  634,  634,  634,  634,  634,  615,  560,  215,  276,
 /*  3450 */   272,  271,  270,  203,  163,  187,  191,  166,  186,  189,
 /*  3460 */   622,  175,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3470 */   634,  634,  634,  634,  634,  634,  261,  634,  634,  634,
 /*  3480 */   634,  634,  634,  634,  634,  634,  634,  634,  162,  623,
 /*  3490 */   634,  620,  634,  634,  634,  634,  634,  615,  560,  215,
 /*  3500 */   276,  272,  271,  270,  203,  163,  187,  191,  166,  186,
 /*  3510 */   189,  622,  176,  634,  634,  634,  634,  634,  634,  634,
 /*  3520 */   634,  634,  634,  634,  634,  634,  634,  261,  634,  634,
 /*  3530 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  162,
 /*  3540 */   623,  634,  620,  634,  634,  634,  634,  634,  615,  560,
 /*  3550 */   215,  276,  272,  271,  270,  203,  163,  187,  191,  166,
 /*  3560 */   186,  189,  622,  179,  634,  634,  634,  634,  634,  634,
 /*  3570 */   634,  634,  634,  634,  634,  634,  634,  634,  261,  634,
 /*  3580 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3590 */   162,  623,  634,  620,  634,  634,  634,  634,  634,  615,
 /*  3600 */   560,  215,  276,  272,  271,  270,  203,  163,  187,  191,
 /*  3610 */   166,  186,  189,  622,  180,  634,  634,  634,  634,  634,
 /*  3620 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  261,
 /*  3630 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3640 */   634,  162,  623,  634,  620,  634,  634,  634,  634,  634,
 /*  3650 */   615,  560,  215,  276,  272,  271,  270,  203,  163,  187,
 /*  3660 */   191,  166,  186,  189,  622,  181,  634,  634,  634,  634,
 /*  3670 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3680 */   261,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3690 */   634,  634,  162,  623,  634,  620,  634,  634,  634,  634,
 /*  3700 */   634,  615,  560,  215,  276,  272,  271,  270,  203,  163,
 /*  3710 */   187,  191,  166,  186,  189,  622,  182,  634,  634,  634,
 /*  3720 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3730 */   634,  261,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3740 */   634,  634,  634,  162,  623,  634,  620,  634,  634,  634,
 /*  3750 */   634,  634,  615,  560,  215,  276,  272,  271,  270,  203,
 /*  3760 */   163,  187,  191,  166,  186,  189,  622,  183,  634,  634,
 /*  3770 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3780 */   634,  634,  261,  634,  634,  634,  634,  634,  634,  634,
 /*  3790 */   634,  634,  634,  634,  162,  623,  634,  620,  634,  634,
 /*  3800 */   634,  634,  634,  615,  560,  215,  276,  272,  271,  270,
 /*  3810 */   203,  163,  187,  191,  166,  186,  189,  622,  188,  634,
 /*  3820 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3830 */   634,  634,  634,  261,  634,  634,  634,  634,  634,  634,
 /*  3840 */   634,  634,  634,  634,  634,  162,  623,  634,  620,  634,
 /*  3850 */   634,  634,  634,  634,  615,  560,  215,  276,  272,  271,
 /*  3860 */   270,  203,  163,  187,  191,  166,  186,  189,  622,  193,
 /*  3870 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3880 */   634,  634,  634,  634,  261,  634,  634,  634,  634,  634,
 /*  3890 */   634,  634,  634,  634,  634,  634,  162,  623,  634,  620,
 /*  3900 */   634,  634,  634,  634,  634,  615,  560,  215,  276,  272,
 /*  3910 */   271,  270,  203,  163,  187,  191,  166,  186,  189,  622,
 /*  3920 */   498,  634,  634,  634,  113,  687,  634,  112,   91,   95,
 /*  3930 */   634,  634,  634,  634,  634,  634,  634,  687,  499,  500,
 /*  3940 */   501,  503,  504,  506,  507,  508,  509,  510,  511,  512,
 /*  3950 */   513,  634,  634,  634,  261,  634,  634,  634,  634,  634,
 /*  3960 */   634,  634,  634,  634,  634,  634,  162,  623,  634,  620,
 /*  3970 */   634,  634,  634,  634,  634,  615,  570,  215,  276,  272,
 /*  3980 */   271,  270,  203,  163,  187,  191,  166,  186,  189,  622,
 /*  3990 */   261,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  4000 */   634,  634,  162,  623,  634,  620,  634,  634,  634,  634,
 /*  4010 */   634,  615,  569,  215,  276,  272,  271,  270,  203,  163,
 /*  4020 */   187,  191,  166,  186,  189,  622,  261,  634,  634,  634,
 /*  4030 */   634,  634,  634,  634,  634,  634,  634,  634,  162,  623,
 /*  4040 */   634,  620,  634,  634,  634,  634,  634,  615,  568,  215,
 /*  4050 */   276,  272,  271,  270,  203,  163,  187,  191,  166,  186,
 /*  4060 */   189,  622,  261,  634,  634,  634,  634,  634,  634,  634,
 /*  4070 */   634,  634,  634,  634,  162,  623,  634,  620,  634,  634,
 /*  4080 */   634,  634,  634,  615,  567,  215,  276,  272,  271,  270,
 /*  4090 */   203,  163,  187,  191,  166,  186,  189,  622,  261,  634,
 /*  4100 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  4110 */   162,  623,  634,  620,  634,  634,  634,  634,  634,  615,
 /*  4120 */   566,  215,  276,  272,  271,  270,  203,  163,  187,  191,
 /*  4130 */   166,  186,  189,  622,  261,  634,  634,  634,  634,  634,
 /*  4140 */   634,  634,  634,  634,  634,  634,  162,  623,  634,  620,
 /*  4150 */   634,  634,  634,  634,  634,  615,  565,  215,  276,  272,
 /*  4160 */   271,  270,  203,  163,  187,  191,  166,  186,  189,  622,
 /*  4170 */   261,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  4180 */   634,  634,  162,  623,  634,  620,  634,  634,  634,  634,
 /*  4190 */   634,  615,  564,  215,  276,  272,  271,  270,  203,  163,
 /*  4200 */   187,  191,  166,  186,  189,  622,  261,  634,  634,  634,
 /*  4210 */   634,  634,  634,  634,  634,  634,  634,  634,  162,  623,
 /*  4220 */   634,  620,  634,  634,  634,  634,  634,  615,  563,  215,
 /*  4230 */   276,  272,  271,  270,  203,  163,  187,  191,  166,  186,
 /*  4240 */   189,  622,  261,  634,  634,  634,  634,  634,  634,  634,
 /*  4250 */   634,  634,  634,  634,  162,  623,  634,  620,  634,  634,
 /*  4260 */   634,  634,  634,  615,  562,  215,  276,  272,  271,  270,
 /*  4270 */   203,  163,  187,  191,  166,  186,  189,  622,  261,  634,
 /*  4280 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  4290 */   162,  623,  634,  620,  634,  634,  634,  634,  634,  615,
 /*  4300 */   561,  215,  276,  272,  271,  270,  203,  163,  187,  191,
 /*  4310 */   166,  186,  189,  622,  261,  634,  634,  634,  634,  634,
 /*  4320 */   634,  634,  634,  634,  634,  634,  162,  623,  634,  620,
 /*  4330 */   634,  634,  634,  634,  634,  615,  559,  215,  276,  272,
 /*  4340 */   271,  270,  203,  163,  187,  191,  166,  186,  189,  622,
 /*  4350 */   261,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  4360 */   634,  634,  572,  623,  634,  620,  634,  634,  634,  634,
 /*  4370 */   634,  615,  634,  215,  276,  272,  271,  270,  203,  163,
 /*  4380 */   187,  191,  166,  186,  189,  622,  261,  634,  634,  634,
 /*  4390 */   634,  634,  634,  634,  634,  634,  634,  634,  277,  623,
 /*  4400 */   634,  620,  634,  634,  634,  634,  634,  615,  634,  215,
 /*  4410 */   276,  272,  271,  270,  203,  163,  187,  191,  166,  186,
 /*  4420 */   189,  622,  261,  634,  634,  634,  634,  634,  634,  634,
 /*  4430 */   634,  634,  634,  634,  463,  623,  634,  620,  634,  634,
 /*  4440 */   634,  634,  634,  615,  634,  215,  276,  272,  271,  270,
 /*  4450 */   203,  163,  187,  191,  166,  186,  189,  622,  174,  634,
 /*  4460 */   634,  634,  113,  634,  634,  112,   91,  634,  634,  634,
 /*  4470 */   634,  634,  634,  634,  634,  631,  499,  500,  501,  503,
 /*  4480 */   504,  506,  507,  508,  509,  510,  511,  512,  513,  498,
 /*  4490 */   634,  634,  634,  113,  634,  634,  112,   91,  634,  634,
 /*  4500 */   634,  634,  634,  634,  634,  634,  631,  499,  500,  501,
 /*  4510 */   503,  504,  506,  507,  508,  509,  510,  511,  512,  513,
 /*  4520 */    30,  634,  634,  634,  634,  634,  547,  634,  634,  634,
 /*  4530 */   634,  634,  634,  634,  261,  634,  634,  634,  261,  634,
 /*  4540 */   631,  634,   30,  618,  634,  634,  634,  623,  634,  620,
 /*  4550 */   634,  623,  634,  620,  634,  615,  634,  634,  634,  615,
 /*  4560 */   634,  634,  631,  634,   30,  212,  166,  186,  189,  622,
 /*  4570 */   167,  186,  189,  622,  634,  634,  634,  634,  634,  634,
 /*  4580 */   634,  634,  634,  469,  631,  634,   30,  634,  634,  634,
 /*  4590 */   634,  634,  634,  634,  634,  634,  634,   86,  634,  634,
 /*  4600 */   634,   88,   87,   85,   84,  269,  631,  621,  624,  625,
 /*  4610 */   626,  627,  628,  629,  630,  634,  634,  634,  634,   86,
 /*  4620 */   634,  634,  634,   88,   87,   85,   84,  269,  634,  621,
 /*  4630 */   624,  625,  626,  627,  628,  629,  630,  634,  634,  634,
 /*  4640 */   634,   86,  634,  634,  634,   88,   87,   85,   84,  269,
 /*  4650 */   634,  621,  624,  625,  626,  627,  628,  629,  630,  634,
 /*  4660 */   634,  634,  634,   86,  634,  634,  634,   88,   87,   85,
 /*  4670 */    84,  269,  261,  621,  624,  625,  626,  627,  628,  629,
 /*  4680 */   630,  634,  634,  634,  634,  623,  634,  620,  261,  634,
 /*  4690 */   634,  634,  634,  615,  634,  634,  634,  634,  634,  634,
 /*  4700 */   634,  623,  634,  620,  168,  186,  189,  622,  634,  615,
 /*  4710 */   634,  634,  634,  634,  634,  634,  634,  634,  261,  634,
 /*  4720 */   634,  173,  189,  622,  634,  261,  634,  634,  261,  634,
 /*  4730 */   634,  623,  634,  620,  634,  261,  634,  634,  623,  615,
 /*  4740 */   620,  623,  634,  620,  634,  634,  615,  634,  623,  615,
 /*  4750 */   620,  190,  189,  622,  634,  634,  615,  634,  200,  189,
 /*  4760 */   622,  206,  189,  622,  634,  634,  261,  634,  207,  189,
 /*  4770 */   622,  634,  634,  261,  634,  634,  261,  634,  634,  623,
 /*  4780 */   634,  620,  634,  634,  634,  634,  623,  615,  620,  623,
 /*  4790 */   634,  620,  634,  634,  615,  634,  634,  615,  634,  208,
 /*  4800 */   189,  622,  634,  634,  634,  634,  209,  189,  622,  210,
 /*  4810 */   189,  622,  634,  634,  261,  634,  634,  634,  634,  634,
 /*  4820 */   634,  634,  634,  634,  634,  634,  634,  623,  634,  620,
 /*  4830 */   634,  634,  634,  634,  634,  615,  634,  634,  634,  634,
 /*  4840 */   634,  634,  634,  634,  634,  634,  634,  211,  189,  622,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     1,   13,   14,    4,   21,  106,    7,    8,    9,   10,
 /*    10 */    11,   12,   55,   56,   15,   16,   79,   80,   81,  120,
 /*    20 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*    30 */    31,   32,   33,   34,   21,  110,  111,  112,   89,   90,
 /*    40 */    91,   92,   93,  118,  119,   46,  121,   48,   49,   50,
 /*    50 */    51,   52,   53,   54,   55,   56,   27,   28,   29,    1,
 /*    60 */   133,   73,   74,    5,   35,   36,   37,   38,   39,   40,
 /*    70 */    41,   42,   43,   44,   45,  133,    1,   78,  101,   21,
 /*    80 */   101,   82,   83,   84,   85,   86,  106,   88,   89,   90,
 /*    90 */    91,   92,   93,   94,   95,    1,   21,  120,    4,  120,
 /*   100 */   120,    7,    8,    9,   10,   11,   12,   84,   85,   15,
 /*   110 */    16,  134,   17,  134,    1,   21,   22,   23,   24,   25,
 /*   120 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   10,
 /*   130 */   109,   18,  111,  115,   21,    7,   18,  133,  120,   21,
 /*   140 */    46,   13,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   150 */    56,    1,   57,   58,   59,   60,   61,   62,   63,   64,
 /*   160 */    65,  120,  100,   88,   89,   90,   91,   92,   93,   94,
 /*   170 */    95,   21,   78,  101,   55,   56,   82,   83,   84,   85,
 /*   180 */    86,   21,   88,   89,   90,   91,   92,   93,   94,   95,
 /*   190 */     1,    3,  120,    4,  120,    7,    7,    8,    9,   10,
 /*   200 */    11,   12,  140,  140,   15,   16,  134,  133,    1,  135,
 /*   210 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   220 */    31,   32,   33,   34,  114,   18,   19,  115,  114,  155,
 /*   230 */   120,  115,  120,  106,  120,   46,  120,   48,   49,   50,
 /*   240 */    51,   52,   53,   54,   55,   56,    1,  120,   88,   89,
 /*   250 */    90,   91,   92,   93,   94,   95,    3,  101,    3,  110,
 /*   260 */   111,  112,  113,   18,   19,   10,   13,   78,  119,  120,
 /*   270 */   121,   82,   83,   84,   85,   86,  120,   88,   89,   90,
 /*   280 */    91,   92,   93,   94,   95,    0,    1,  120,  106,    4,
 /*   290 */   134,    6,    7,    8,    9,  131,   11,   12,  115,  115,
 /*   300 */    15,   16,  120,  120,  120,    5,   21,   22,   23,   24,
 /*   310 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   320 */     3,   21,    4,  107,    2,    3,    8,   10,  108,   11,
 /*   330 */    12,   46,  116,   48,   49,   50,   51,   52,   53,   54,
 /*   340 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   350 */    32,   33,   34,  110,  111,  112,    2,    3,  120,   19,
 /*   360 */   114,  118,  119,   78,  121,  108,  120,   82,   83,   84,
 /*   370 */    85,   86,  134,   88,   89,   90,   91,   92,   93,   94,
 /*   380 */    95,    1,    5,  108,    4,    9,    6,    7,    8,    9,
 /*   390 */   108,   11,   12,  114,  114,   15,   16,   21,   21,  120,
 /*   400 */   120,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   410 */    30,   31,   32,   33,   34,  114,    3,  120,    2,    3,
 /*   420 */   106,  120,  120,   10,    9,  120,   46,   87,   48,   49,
 /*   430 */    50,   51,   52,   53,   54,  133,   21,  135,    3,  106,
 /*   440 */     3,   13,    7,  141,    7,    1,  144,  145,  146,  147,
 /*   450 */   148,  149,  150,  151,  152,  153,  154,  155,   78,    2,
 /*   460 */     3,    5,   82,   83,   84,   85,   86,    3,   88,   89,
 /*   470 */    90,   91,   92,   93,   94,   95,    1,   21,   14,    4,
 /*   480 */     2,    3,    7,    8,    9,   10,   11,   12,    2,    3,
 /*   490 */    15,   16,    2,    3,   75,   76,   21,   22,   23,   24,
 /*   500 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   510 */     2,    3,    2,    3,    3,   77,   78,  120,    3,   71,
 /*   520 */    72,   46,    7,   48,   49,   50,   51,   52,   53,   54,
 /*   530 */   133,   20,  135,    3,    3,    3,    2,    3,  141,    7,
 /*   540 */    10,   10,  145,  146,  147,  148,  149,  150,  151,  152,
 /*   550 */   153,  154,  155,   78,  101,    3,  101,   82,   83,   84,
 /*   560 */    85,   86,   10,   88,   89,   90,   91,   92,   93,   94,
 /*   570 */    95,    1,    3,  120,    4,  120,    7,    7,    8,    9,
 /*   580 */    10,   11,   12,   66,   67,   15,   16,  134,  108,  134,
 /*   590 */    19,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   600 */    30,   31,   32,   33,   34,    2,    3,  131,  120,    9,
 /*   610 */   117,    3,  120,  106,   98,  131,   46,  120,   48,   49,
 /*   620 */    50,   51,   52,   53,   54,  133,  131,  135,    3,  131,
 /*   630 */   106,  131,   99,  141,  120,  116,   99,   98,  146,  147,
 /*   640 */   148,  149,  150,  151,  152,  153,  154,  155,   78,   98,
 /*   650 */     3,  131,   82,   83,   84,   85,   86,   98,   88,   89,
 /*   660 */    90,   91,   92,   93,   94,   95,    1,   20,  120,    4,
 /*   670 */   117,    7,    7,    8,    9,   10,   11,   12,    9,    7,
 /*   680 */    15,   16,    7,    9,    7,    9,   21,   22,   23,   24,
 /*   690 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   700 */     7,    9,    7,   68,    2,    9,    9,  120,    2,    2,
 /*   710 */     9,   46,    7,   48,   49,   50,   51,   52,   53,   54,
 /*   720 */   133,    1,  135,    7,    3,   47,    7,   48,  141,   18,
 /*   730 */    18,    9,    1,    7,  147,  148,  149,  150,  151,  152,
 /*   740 */   153,  154,  155,   78,    2,    7,    1,   82,   83,   84,
 /*   750 */    85,   86,    1,   88,   89,   90,   91,   92,   93,   94,
 /*   760 */    95,    1,   47,    2,    4,    7,    7,    7,    8,    9,
 /*   770 */    10,   11,   12,    1,    1,   15,   16,   47,    7,    1,
 /*   780 */     1,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   790 */    30,   31,   32,   33,   34,    1,    7,   17,   17,    9,
 /*   800 */     9,   14,  120,    1,    9,    5,   46,   70,   48,   49,
 /*   810 */    50,   51,   52,   53,   54,  133,   69,  135,  110,  111,
 /*   820 */   112,  156,   18,  141,   17,  156,  156,  119,  120,  121,
 /*   830 */   148,  149,  150,  151,  152,  153,  154,  155,   78,  156,
 /*   840 */   156,  156,   82,   83,   84,   85,   86,  156,   88,   89,
 /*   850 */    90,   91,   92,   93,   94,   95,    1,  156,  156,    4,
 /*   860 */   156,  156,    7,    8,    9,   10,   11,   12,  156,  156,
 /*   870 */    15,   16,  156,  156,  156,  156,   21,   22,   23,   24,
 /*   880 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   890 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  156,
 /*   900 */   156,   46,  156,   48,   49,   50,   51,   52,   53,   54,
 /*   910 */   133,  156,  135,  110,  111,  112,  156,  156,  141,  156,
 /*   920 */   156,  156,  119,  120,  121,  156,  149,  150,  151,  152,
 /*   930 */   153,  154,  155,   78,  156,  156,  156,   82,   83,   84,
 /*   940 */    85,   86,  156,   88,   89,   90,   91,   92,   93,   94,
 /*   950 */    95,    1,  156,  156,    4,  156,  156,    7,    8,    9,
 /*   960 */    10,   11,   12,  156,  156,   15,   16,  156,  156,  156,
 /*   970 */   156,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   980 */    30,   31,   32,   33,   34,  156,  156,  156,  156,  156,
 /*   990 */   156,  156,  120,  156,  156,  156,   46,  156,   48,   49,
 /*  1000 */    50,   51,   52,   53,   54,  133,  156,  135,  110,  111,
 /*  1010 */   112,  156,  156,  141,  156,  156,  156,  119,  156,  121,
 /*  1020 */   156,  149,  150,  151,  152,  153,  154,  155,   78,  156,
 /*  1030 */   156,  156,   82,   83,   84,   85,   86,  156,   88,   89,
 /*  1040 */    90,   91,   92,   93,   94,   95,    1,  156,  156,    4,
 /*  1050 */   156,  156,    7,    8,    9,   10,   11,   12,  156,  156,
 /*  1060 */    15,   16,  156,  156,  156,  156,   21,   22,   23,   24,
 /*  1070 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1080 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  156,
 /*  1090 */   156,   46,  156,   48,   49,   50,   51,   52,   53,   54,
 /*  1100 */   133,  156,  135,  110,  111,  112,  156,  156,  141,  156,
 /*  1110 */   156,  156,  119,  156,  121,  156,  156,  150,  151,  152,
 /*  1120 */   153,  154,  155,   78,  156,  156,  156,   82,   83,   84,
 /*  1130 */    85,   86,  156,   88,   89,   90,   91,   92,   93,   94,
 /*  1140 */    95,    1,  156,  156,    4,  156,  156,    7,    8,    9,
 /*  1150 */    10,   11,   12,  156,  156,   15,   16,  156,  156,  156,
 /*  1160 */   156,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1170 */    30,   31,   32,   33,   34,  156,  156,  156,  156,  156,
 /*  1180 */   156,  156,  120,  156,  156,  156,   46,  156,   48,   49,
 /*  1190 */    50,   51,   52,   53,   54,  133,  156,  135,  156,  156,
 /*  1200 */   156,  156,  156,  141,  156,  156,  156,  156,  156,  156,
 /*  1210 */   156,  156,  150,  151,  152,  153,  154,  155,   78,  156,
 /*  1220 */   156,  156,   82,   83,   84,   85,   86,  156,   88,   89,
 /*  1230 */    90,   91,   92,   93,   94,   95,    1,  156,  156,    4,
 /*  1240 */   156,  156,    7,    8,    9,   10,   11,   12,  156,  156,
 /*  1250 */    15,   16,  156,  156,  156,  156,   21,   22,   23,   24,
 /*  1260 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1270 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  156,
 /*  1280 */   156,   46,  156,   48,   49,   50,   51,   52,   53,   54,
 /*  1290 */   133,  156,  135,  156,  156,  156,  156,  156,  141,  156,
 /*  1300 */   156,  156,  156,  156,  156,  156,  156,  150,  151,  152,
 /*  1310 */   153,  154,  155,   78,  156,  156,  156,   82,   83,   84,
 /*  1320 */    85,   86,  156,   88,   89,   90,   91,   92,   93,   94,
 /*  1330 */    95,    1,  156,  156,    4,  156,  156,    7,    8,    9,
 /*  1340 */   156,   11,   12,  156,  156,   15,   16,  156,  156,  156,
 /*  1350 */   156,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1360 */    30,   31,   32,   33,   34,  156,  156,  156,  156,  156,
 /*  1370 */   156,  156,  120,  156,  156,  156,   46,  156,   48,   49,
 /*  1380 */    50,   51,   52,   53,   54,  133,  156,  135,  156,  156,
 /*  1390 */   156,  156,  156,  141,  156,  156,  156,  156,  156,  156,
 /*  1400 */   156,  156,  150,  151,  152,  153,  154,  155,   78,  156,
 /*  1410 */   156,  156,   82,   83,   84,   85,   86,  156,   88,   89,
 /*  1420 */    90,   91,   92,   93,   94,   95,    1,  156,  156,    4,
 /*  1430 */   156,  156,    7,    8,    9,  156,   11,   12,  156,  156,
 /*  1440 */    15,   16,  156,  156,  156,  156,   21,   22,   23,   24,
 /*  1450 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1460 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  156,
 /*  1470 */   156,   46,  156,   48,   49,   50,   51,   52,   53,   54,
 /*  1480 */   133,  156,  135,  156,  156,  156,  156,  156,  141,  156,
 /*  1490 */   156,  156,  156,  156,  156,  156,  156,  156,  151,  152,
 /*  1500 */   153,  154,  155,   78,  156,  156,  156,   82,   83,   84,
 /*  1510 */    85,   86,  156,   88,   89,   90,   91,   92,   93,   94,
 /*  1520 */    95,  104,  105,  156,  156,  156,  156,  110,  111,  112,
 /*  1530 */   156,  156,  156,  156,  117,  156,  119,  120,  121,  122,
 /*  1540 */   123,  124,  125,  126,  127,  128,  129,  130,  156,  132,
 /*  1550 */   133,  156,  135,  156,  156,  138,  139,  156,  141,  142,
 /*  1560 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  1570 */   153,  154,  155,  120,  156,  156,  156,  105,  156,  156,
 /*  1580 */   156,  156,  110,  111,  112,  156,  133,  156,  135,  117,
 /*  1590 */   156,  119,  120,  121,  141,  123,  124,  125,  126,  127,
 /*  1600 */   128,  129,  130,  156,  132,  133,  156,  135,  155,  156,
 /*  1610 */   138,  139,  156,  141,  142,  143,  144,  145,  146,  147,
 /*  1620 */   148,  149,  150,  151,  152,  153,  154,  155,    1,    2,
 /*  1630 */   156,    4,  156,  156,  156,    8,  156,  156,   11,   12,
 /*  1640 */   156,  156,  156,  156,  156,  156,  156,  156,   21,   22,
 /*  1650 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  1660 */    33,   34,    1,  156,  156,    4,  156,  156,  156,    8,
 /*  1670 */   156,  156,   11,   12,  156,  156,  156,  156,  156,  156,
 /*  1680 */   156,  156,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1690 */    29,   30,   31,   32,   33,   34,  156,  156,  156,  156,
 /*  1700 */   156,  156,  156,  156,  156,   78,  156,  156,  156,   82,
 /*  1710 */    83,   84,   85,   86,  156,   88,   89,   90,   91,   92,
 /*  1720 */    93,   94,   95,  156,  103,  156,  156,  156,  156,  156,
 /*  1730 */   156,  110,  111,  112,  113,  156,  156,  156,  156,   78,
 /*  1740 */   119,  120,  121,   82,   83,   84,   85,   86,  156,   88,
 /*  1750 */    89,   90,   91,   92,   93,   94,   95,   97,  156,  156,
 /*  1760 */   156,  156,  156,  156,  156,  105,  156,  156,  156,  156,
 /*  1770 */   110,  111,  112,  156,  156,  156,  156,  117,  156,  119,
 /*  1780 */   120,  121,  156,  156,  156,  156,  156,  156,  128,  156,
 /*  1790 */   130,  156,  132,  133,  156,  135,  156,  156,  138,  139,
 /*  1800 */   156,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  1810 */   150,  151,  152,  153,  154,  155,   97,  156,  156,  156,
 /*  1820 */   156,  156,  156,  156,  105,  156,  156,  156,  156,  110,
 /*  1830 */   111,  112,  156,  156,  156,  156,  117,  156,  119,  120,
 /*  1840 */   121,  156,  156,  156,  156,  156,  156,  128,  156,  130,
 /*  1850 */   156,  132,  133,  156,  135,  156,  156,  138,  139,  156,
 /*  1860 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  1870 */   151,  152,  153,  154,  155,  102,  156,  156,  105,  156,
 /*  1880 */   156,  156,  156,  110,  111,  112,  156,  156,  156,  156,
 /*  1890 */   117,  156,  119,  120,  121,  156,  156,  156,  156,  156,
 /*  1900 */   156,  128,  156,  130,  156,  132,  133,  156,  135,  156,
 /*  1910 */   156,  138,  139,  156,  141,  142,  143,  144,  145,  146,
 /*  1920 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
 /*  1930 */   156,  156,  102,  156,  156,  105,  156,  156,  156,  156,
 /*  1940 */   110,  111,  112,  156,  156,  156,  156,  117,  156,  119,
 /*  1950 */   120,  121,  156,  156,  156,  156,  156,  156,  128,  156,
 /*  1960 */   130,  156,  132,  133,  156,  135,  156,  156,  138,  139,
 /*  1970 */   156,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  1980 */   150,  151,  152,  153,  154,  155,  102,  156,  156,  105,
 /*  1990 */   156,  156,  156,  156,  110,  111,  112,  156,  156,  156,
 /*  2000 */   156,  117,  156,  119,  120,  121,  156,  156,  156,  156,
 /*  2010 */   156,  156,  128,  156,  130,  156,  132,  133,  156,  135,
 /*  2020 */   156,  156,  138,  139,  156,  141,  142,  143,  144,  145,
 /*  2030 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  2040 */   156,  156,  156,  102,  156,  156,  105,  156,  156,  156,
 /*  2050 */   156,  110,  111,  112,  156,  156,  156,  156,  117,  156,
 /*  2060 */   119,  120,  121,  156,  156,  156,  156,  156,  156,  128,
 /*  2070 */   156,  130,  156,  132,  133,  156,  135,  156,  156,  138,
 /*  2080 */   139,  156,  141,  142,  143,  144,  145,  146,  147,  148,
 /*  2090 */   149,  150,  151,  152,  153,  154,  155,  102,  156,  156,
 /*  2100 */   105,  156,  156,  156,  156,  110,  111,  112,  156,  156,
 /*  2110 */   156,  156,  117,  156,  119,  120,  121,  156,  156,  156,
 /*  2120 */   156,  156,  156,  128,  156,  130,  156,  132,  133,  156,
 /*  2130 */   135,  156,  156,  138,  139,  156,  141,  142,  143,  144,
 /*  2140 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  2150 */   155,  156,  156,  156,  102,  156,  156,  105,  156,  156,
 /*  2160 */   156,  156,  110,  111,  112,  156,  156,  156,  156,  117,
 /*  2170 */   156,  119,  120,  121,  156,  156,  156,  156,  156,  156,
 /*  2180 */   128,  156,  130,  156,  132,  133,  156,  135,  156,  156,
 /*  2190 */   138,  139,  156,  141,  142,  143,  144,  145,  146,  147,
 /*  2200 */   148,  149,  150,  151,  152,  153,  154,  155,  156,  156,
 /*  2210 */    97,  156,  156,  156,  156,  156,  156,  156,  105,  156,
 /*  2220 */   156,  156,  156,  110,  111,  112,  156,  156,  156,  156,
 /*  2230 */   117,  156,  119,  120,  121,  156,  156,  156,  156,  156,
 /*  2240 */   156,  128,  156,  130,  156,  132,  133,  156,  135,  156,
 /*  2250 */   156,  138,  139,  156,  141,  142,  143,  144,  145,  146,
 /*  2260 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  105,
 /*  2270 */   156,  156,  156,  156,  110,  111,  112,  156,  156,  156,
 /*  2280 */   156,  117,  156,  119,  120,  121,  156,  156,  156,  156,
 /*  2290 */   156,  156,  128,  156,  130,  156,  132,  133,  156,  135,
 /*  2300 */   136,  156,  138,  139,  156,  141,  142,  143,  144,  145,
 /*  2310 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  2320 */   156,  156,  156,  156,  105,  156,  156,  156,  156,  110,
 /*  2330 */   111,  112,  156,  156,  156,  156,  117,  156,  119,  120,
 /*  2340 */   121,  156,  156,  156,  156,  156,  156,  128,  156,  130,
 /*  2350 */   156,  132,  133,  156,  135,  136,  156,  138,  139,  156,
 /*  2360 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  2370 */   151,  152,  153,  154,  155,  105,  156,  156,  156,  156,
 /*  2380 */   110,  111,  112,  156,  156,  156,  156,  117,  156,  119,
 /*  2390 */   120,  121,  156,  156,  156,  156,  156,  156,  128,  156,
 /*  2400 */   130,  156,  132,  133,  156,  135,  136,  156,  138,  139,
 /*  2410 */   156,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  2420 */   150,  151,  152,  153,  154,  155,  156,  156,  156,  156,
 /*  2430 */   105,  156,  156,  156,  156,  110,  111,  112,  156,  156,
 /*  2440 */   156,  156,  117,  156,  119,  120,  121,  156,  156,  156,
 /*  2450 */   156,  156,  156,  128,  156,  130,  156,  132,  133,  156,
 /*  2460 */   135,  136,  156,  138,  139,  156,  141,  142,  143,  144,
 /*  2470 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  2480 */   155,  105,  156,  156,  156,  156,  110,  111,  112,  156,
 /*  2490 */   156,  156,  156,  117,  156,  119,  120,  121,  156,  156,
 /*  2500 */   156,  156,  156,  156,  128,  156,  130,  156,  132,  133,
 /*  2510 */   156,  135,  136,  156,  138,  139,  156,  141,  142,  143,
 /*  2520 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  2530 */   154,  155,  156,  156,  156,  156,  105,  156,  156,  156,
 /*  2540 */   156,  110,  111,  112,  156,  156,  156,  156,  117,  156,
 /*  2550 */   119,  120,  121,  156,  156,  156,  156,  156,  156,  128,
 /*  2560 */   156,  130,  156,  132,  133,  156,  135,  156,  156,  138,
 /*  2570 */   139,  156,  141,  142,  143,  144,  145,  146,  147,  148,
 /*  2580 */   149,  150,  151,  152,  153,  154,  155,  105,  156,  156,
 /*  2590 */   156,  156,  110,  111,  112,  156,  156,  156,  156,  117,
 /*  2600 */   156,  119,  120,  121,  156,  156,  156,  156,  156,  156,
 /*  2610 */   128,  156,  130,  156,  132,  133,  156,  135,  156,  156,
 /*  2620 */   138,  139,  156,  141,  142,  143,  144,  145,  146,  147,
 /*  2630 */   148,  149,  150,  151,  152,  153,  154,  155,  156,  156,
 /*  2640 */   156,  156,  105,  156,  156,  156,  156,  110,  111,  112,
 /*  2650 */   156,  156,  156,  156,  117,  156,  119,  120,  121,  156,
 /*  2660 */   156,  156,  156,  156,  156,  128,  156,  130,  156,  132,
 /*  2670 */   133,  156,  135,  156,  156,  138,  139,  156,  141,  142,
 /*  2680 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  2690 */   153,  154,  155,  105,  156,  156,  156,  156,  110,  111,
 /*  2700 */   112,  156,  156,  156,  156,  117,  156,  119,  120,  121,
 /*  2710 */   156,  156,  156,  156,  156,  156,  128,  156,  130,  156,
 /*  2720 */   132,  133,  156,  135,  156,  156,  138,  139,  156,  141,
 /*  2730 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  2740 */   152,  153,  154,  155,  156,  156,  156,  156,  105,  156,
 /*  2750 */   156,  156,  156,  110,  111,  112,  156,  156,  156,  156,
 /*  2760 */   117,  156,  119,  120,  121,  156,  156,  156,  156,  156,
 /*  2770 */   156,  128,  156,  130,  156,  132,  133,  156,  135,  156,
 /*  2780 */   156,  138,  139,  156,  141,  142,  143,  144,  145,  146,
 /*  2790 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  105,
 /*  2800 */   156,  156,  156,  156,  110,  111,  112,  156,  156,  156,
 /*  2810 */   156,  117,  156,  119,  120,  121,  156,  156,  156,  156,
 /*  2820 */   156,  156,  128,  156,  130,  156,  132,  133,  156,  135,
 /*  2830 */   156,  156,  138,  139,  156,  141,  142,  143,  144,  145,
 /*  2840 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  2850 */   156,  156,  103,  156,  105,  156,  156,  156,  156,  110,
 /*  2860 */   111,  112,  113,  156,  156,  156,  156,  156,  119,  120,
 /*  2870 */   121,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  2880 */   156,  132,  133,  156,  135,  156,  156,  156,  156,  156,
 /*  2890 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  2900 */   151,  152,  153,  154,  155,  105,  156,  156,  156,  156,
 /*  2910 */   110,  111,  112,  156,  156,  156,  156,  156,  156,  119,
 /*  2920 */   120,  121,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  2930 */   156,  156,  132,  133,  156,  135,  156,  156,  156,  156,
 /*  2940 */   156,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  2950 */   150,  151,  152,  153,  154,  155,  110,  111,  112,  156,
 /*  2960 */   156,  156,  156,  156,  156,  119,  120,  121,  156,  156,
 /*  2970 */   156,  156,  156,  156,  156,  156,  156,  156,  132,  133,
 /*  2980 */   156,  135,  156,  156,  156,  156,  156,  141,  142,  143,
 /*  2990 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  3000 */   154,  155,  105,  156,  156,  156,  156,  156,  156,  156,
 /*  3010 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  156,
 /*  3020 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  132,
 /*  3030 */   133,  156,  135,  156,  137,  156,  156,  156,  141,  142,
 /*  3040 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  3050 */   153,  154,  155,  105,  156,  156,  156,  156,  156,  156,
 /*  3060 */   156,  156,  156,  156,  156,  156,  156,  156,  120,  156,
 /*  3070 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3080 */   132,  133,  156,  135,  156,  137,  156,  156,  156,  141,
 /*  3090 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3100 */   152,  153,  154,  155,  105,  156,  156,  156,  156,  156,
 /*  3110 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  120,
 /*  3120 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3130 */   156,  132,  133,  156,  135,  156,  137,  156,  156,  156,
 /*  3140 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  3150 */   151,  152,  153,  154,  155,  105,  156,  156,  156,  156,
 /*  3160 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3170 */   120,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3180 */   156,  156,  132,  133,  156,  135,  156,  137,  156,  156,
 /*  3190 */   156,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  3200 */   150,  151,  152,  153,  154,  155,  105,  156,  156,  156,
 /*  3210 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3220 */   156,  120,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3230 */   156,  156,  156,  132,  133,  156,  135,  156,  137,  156,
 /*  3240 */   156,  156,  141,  142,  143,  144,  145,  146,  147,  148,
 /*  3250 */   149,  150,  151,  152,  153,  154,  155,  105,  156,  156,
 /*  3260 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3270 */   156,  156,  120,  156,  156,  156,  156,  156,  156,  156,
 /*  3280 */   156,  156,  156,  156,  132,  133,  156,  135,  156,  137,
 /*  3290 */   156,  156,  156,  141,  142,  143,  144,  145,  146,  147,
 /*  3300 */   148,  149,  150,  151,  152,  153,  154,  155,  105,  156,
 /*  3310 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3320 */   156,  156,  156,  120,  156,  156,  156,  156,  156,  156,
 /*  3330 */   156,  156,  156,  156,  156,  132,  133,  156,  135,  156,
 /*  3340 */   156,  156,  156,  156,  141,  142,  143,  144,  145,  146,
 /*  3350 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  105,
 /*  3360 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3370 */   156,  156,  156,  156,  120,  156,  156,  156,  156,  156,
 /*  3380 */   156,  156,  156,  156,  156,  156,  132,  133,  156,  135,
 /*  3390 */   156,  156,  156,  156,  156,  141,  142,  143,  144,  145,
 /*  3400 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  3410 */   105,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3420 */   156,  156,  156,  156,  156,  120,  156,  156,  156,  156,
 /*  3430 */   156,  156,  156,  156,  156,  156,  156,  132,  133,  156,
 /*  3440 */   135,  156,  156,  156,  156,  156,  141,  142,  143,  144,
 /*  3450 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  3460 */   155,  105,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3470 */   156,  156,  156,  156,  156,  156,  120,  156,  156,  156,
 /*  3480 */   156,  156,  156,  156,  156,  156,  156,  156,  132,  133,
 /*  3490 */   156,  135,  156,  156,  156,  156,  156,  141,  142,  143,
 /*  3500 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  3510 */   154,  155,  105,  156,  156,  156,  156,  156,  156,  156,
 /*  3520 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  156,
 /*  3530 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  132,
 /*  3540 */   133,  156,  135,  156,  156,  156,  156,  156,  141,  142,
 /*  3550 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  3560 */   153,  154,  155,  105,  156,  156,  156,  156,  156,  156,
 /*  3570 */   156,  156,  156,  156,  156,  156,  156,  156,  120,  156,
 /*  3580 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3590 */   132,  133,  156,  135,  156,  156,  156,  156,  156,  141,
 /*  3600 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3610 */   152,  153,  154,  155,  105,  156,  156,  156,  156,  156,
 /*  3620 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  120,
 /*  3630 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3640 */   156,  132,  133,  156,  135,  156,  156,  156,  156,  156,
 /*  3650 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  3660 */   151,  152,  153,  154,  155,  105,  156,  156,  156,  156,
 /*  3670 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3680 */   120,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3690 */   156,  156,  132,  133,  156,  135,  156,  156,  156,  156,
 /*  3700 */   156,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  3710 */   150,  151,  152,  153,  154,  155,  105,  156,  156,  156,
 /*  3720 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3730 */   156,  120,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3740 */   156,  156,  156,  132,  133,  156,  135,  156,  156,  156,
 /*  3750 */   156,  156,  141,  142,  143,  144,  145,  146,  147,  148,
 /*  3760 */   149,  150,  151,  152,  153,  154,  155,  105,  156,  156,
 /*  3770 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3780 */   156,  156,  120,  156,  156,  156,  156,  156,  156,  156,
 /*  3790 */   156,  156,  156,  156,  132,  133,  156,  135,  156,  156,
 /*  3800 */   156,  156,  156,  141,  142,  143,  144,  145,  146,  147,
 /*  3810 */   148,  149,  150,  151,  152,  153,  154,  155,  105,  156,
 /*  3820 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3830 */   156,  156,  156,  120,  156,  156,  156,  156,  156,  156,
 /*  3840 */   156,  156,  156,  156,  156,  132,  133,  156,  135,  156,
 /*  3850 */   156,  156,  156,  156,  141,  142,  143,  144,  145,  146,
 /*  3860 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  105,
 /*  3870 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3880 */   156,  156,  156,  156,  120,  156,  156,  156,  156,  156,
 /*  3890 */   156,  156,  156,  156,  156,  156,  132,  133,  156,  135,
 /*  3900 */   156,  156,  156,  156,  156,  141,  142,  143,  144,  145,
 /*  3910 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  3920 */     4,  156,  156,  156,    8,    9,  156,   11,   12,   13,
 /*  3930 */   156,  156,  156,  156,  156,  156,  156,   21,   22,   23,
 /*  3940 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  3950 */    34,  156,  156,  156,  120,  156,  156,  156,  156,  156,
 /*  3960 */   156,  156,  156,  156,  156,  156,  132,  133,  156,  135,
 /*  3970 */   156,  156,  156,  156,  156,  141,  142,  143,  144,  145,
 /*  3980 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  3990 */   120,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4000 */   156,  156,  132,  133,  156,  135,  156,  156,  156,  156,
 /*  4010 */   156,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  4020 */   150,  151,  152,  153,  154,  155,  120,  156,  156,  156,
 /*  4030 */   156,  156,  156,  156,  156,  156,  156,  156,  132,  133,
 /*  4040 */   156,  135,  156,  156,  156,  156,  156,  141,  142,  143,
 /*  4050 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  4060 */   154,  155,  120,  156,  156,  156,  156,  156,  156,  156,
 /*  4070 */   156,  156,  156,  156,  132,  133,  156,  135,  156,  156,
 /*  4080 */   156,  156,  156,  141,  142,  143,  144,  145,  146,  147,
 /*  4090 */   148,  149,  150,  151,  152,  153,  154,  155,  120,  156,
 /*  4100 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4110 */   132,  133,  156,  135,  156,  156,  156,  156,  156,  141,
 /*  4120 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  4130 */   152,  153,  154,  155,  120,  156,  156,  156,  156,  156,
 /*  4140 */   156,  156,  156,  156,  156,  156,  132,  133,  156,  135,
 /*  4150 */   156,  156,  156,  156,  156,  141,  142,  143,  144,  145,
 /*  4160 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  4170 */   120,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4180 */   156,  156,  132,  133,  156,  135,  156,  156,  156,  156,
 /*  4190 */   156,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  4200 */   150,  151,  152,  153,  154,  155,  120,  156,  156,  156,
 /*  4210 */   156,  156,  156,  156,  156,  156,  156,  156,  132,  133,
 /*  4220 */   156,  135,  156,  156,  156,  156,  156,  141,  142,  143,
 /*  4230 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  4240 */   154,  155,  120,  156,  156,  156,  156,  156,  156,  156,
 /*  4250 */   156,  156,  156,  156,  132,  133,  156,  135,  156,  156,
 /*  4260 */   156,  156,  156,  141,  142,  143,  144,  145,  146,  147,
 /*  4270 */   148,  149,  150,  151,  152,  153,  154,  155,  120,  156,
 /*  4280 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4290 */   132,  133,  156,  135,  156,  156,  156,  156,  156,  141,
 /*  4300 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  4310 */   152,  153,  154,  155,  120,  156,  156,  156,  156,  156,
 /*  4320 */   156,  156,  156,  156,  156,  156,  132,  133,  156,  135,
 /*  4330 */   156,  156,  156,  156,  156,  141,  142,  143,  144,  145,
 /*  4340 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  4350 */   120,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4360 */   156,  156,  132,  133,  156,  135,  156,  156,  156,  156,
 /*  4370 */   156,  141,  156,  143,  144,  145,  146,  147,  148,  149,
 /*  4380 */   150,  151,  152,  153,  154,  155,  120,  156,  156,  156,
 /*  4390 */   156,  156,  156,  156,  156,  156,  156,  156,  132,  133,
 /*  4400 */   156,  135,  156,  156,  156,  156,  156,  141,  156,  143,
 /*  4410 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  4420 */   154,  155,  120,  156,  156,  156,  156,  156,  156,  156,
 /*  4430 */   156,  156,  156,  156,  132,  133,  156,  135,  156,  156,
 /*  4440 */   156,  156,  156,  141,  156,  143,  144,  145,  146,  147,
 /*  4450 */   148,  149,  150,  151,  152,  153,  154,  155,    4,  156,
 /*  4460 */   156,  156,    8,  156,  156,   11,   12,  156,  156,  156,
 /*  4470 */   156,  156,  156,  156,  156,   21,   22,   23,   24,   25,
 /*  4480 */    26,   27,   28,   29,   30,   31,   32,   33,   34,    4,
 /*  4490 */   156,  156,  156,    8,  156,  156,   11,   12,  156,  156,
 /*  4500 */   156,  156,  156,  156,  156,  156,   21,   22,   23,   24,
 /*  4510 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  4520 */     1,  156,  156,  156,  156,  156,    7,  156,  156,  156,
 /*  4530 */   156,  156,  156,  156,  120,  156,  156,  156,  120,  156,
 /*  4540 */    21,  156,    1,    2,  156,  156,  156,  133,  156,  135,
 /*  4550 */   156,  133,  156,  135,  156,  141,  156,  156,  156,  141,
 /*  4560 */   156,  156,   21,  156,    1,  151,  152,  153,  154,  155,
 /*  4570 */   152,  153,  154,  155,  156,  156,  156,  156,  156,  156,
 /*  4580 */   156,  156,  156,   20,   21,  156,    1,  156,  156,  156,
 /*  4590 */   156,  156,  156,  156,  156,  156,  156,   78,  156,  156,
 /*  4600 */   156,   82,   83,   84,   85,   86,   21,   88,   89,   90,
 /*  4610 */    91,   92,   93,   94,   95,  156,  156,  156,  156,   78,
 /*  4620 */   156,  156,  156,   82,   83,   84,   85,   86,  156,   88,
 /*  4630 */    89,   90,   91,   92,   93,   94,   95,  156,  156,  156,
 /*  4640 */   156,   78,  156,  156,  156,   82,   83,   84,   85,   86,
 /*  4650 */   156,   88,   89,   90,   91,   92,   93,   94,   95,  156,
 /*  4660 */   156,  156,  156,   78,  156,  156,  156,   82,   83,   84,
 /*  4670 */    85,   86,  120,   88,   89,   90,   91,   92,   93,   94,
 /*  4680 */    95,  156,  156,  156,  156,  133,  156,  135,  120,  156,
 /*  4690 */   156,  156,  156,  141,  156,  156,  156,  156,  156,  156,
 /*  4700 */   156,  133,  156,  135,  152,  153,  154,  155,  156,  141,
 /*  4710 */   156,  156,  156,  156,  156,  156,  156,  156,  120,  156,
 /*  4720 */   156,  153,  154,  155,  156,  120,  156,  156,  120,  156,
 /*  4730 */   156,  133,  156,  135,  156,  120,  156,  156,  133,  141,
 /*  4740 */   135,  133,  156,  135,  156,  156,  141,  156,  133,  141,
 /*  4750 */   135,  153,  154,  155,  156,  156,  141,  156,  153,  154,
 /*  4760 */   155,  153,  154,  155,  156,  156,  120,  156,  153,  154,
 /*  4770 */   155,  156,  156,  120,  156,  156,  120,  156,  156,  133,
 /*  4780 */   156,  135,  156,  156,  156,  156,  133,  141,  135,  133,
 /*  4790 */   156,  135,  156,  156,  141,  156,  156,  141,  156,  153,
 /*  4800 */   154,  155,  156,  156,  156,  156,  153,  154,  155,  153,
 /*  4810 */   154,  155,  156,  156,  120,  156,  156,  156,  156,  156,
 /*  4820 */   156,  156,  156,  156,  156,  156,  156,  133,  156,  135,
 /*  4830 */   156,  156,  156,  156,  156,  141,  156,  156,  156,  156,
 /*  4840 */   156,  156,  156,  156,  156,  156,  156,  153,  154,  155,
};
#define YY_SHIFT_USE_DFLT (4850)
#define YY_SHIFT_COUNT    (278)
#define YY_SHIFT_MIN      (-63)
#define YY_SHIFT_MAX      (4585)
static const short yy_shift_ofst[] = {
 /*     0 */   380,  285,   -1,   -1,  475,  475,  475,  475,  475,  475,
 /*    10 */   570, 1330, 1330, 1330, 1330, 1330,   94,  189,  665,  760,
 /*    20 */   855,  950, 1045, 1140, 1235, 1425, 1425, 1425, 1425, 1627,
 /*    30 */  1661, 1661, 4585, 4585, 4585, 4585, 4585, 4585, 4519, 4541,
 /*    40 */  4563, 4585, 4585, 4585, 4585, 4585, 4585, 4585, 4585, 4585,
 /*    50 */  4585, 4585, 4585, 4585, 4585, 4585, 4585, 4585, 4585, 4585,
 /*    60 */  4585, 4585, 4585, 4585, 4585, 4585, 4585, 4585, 4585, 4585,
 /*    70 */  4585, 4585, 4585, 4585, 4585, 4585, 4585, 4454, 4585, 4585,
 /*    80 */  4485, 4585, 4585, 4585, 4585, 4585, 4585, 4585, 4585, 4585,
 /*    90 */  3916, 3916, 4485, 4485,  318,  318,   75,  160,  -17,  -17,
 /*   100 */   -17,  -17,  -17,  -17,   29,  113,  150,  150,  -43,  118,
 /*   110 */   118,  118,  150,  150,  118,  -17,   13,  -17,  -17,  -17,
 /*   120 */   -17,  -17,  -17,  -51,  -51,  -51,   58,  119,  207,  245,
 /*   130 */   376,  128,  128,  300,  253,  253,  415,  377,  444,  444,
 /*   140 */   428,  571,  -17,  600,  608,  444,  571,  571,  -17,  571,
 /*   150 */   625,  -17,   13,  625,  608,  608,  444,  571,  -17,  571,
 /*   160 */   608,  600,   95,  -12,  -12,  -12,  -63,  -63,  -63,  255,
 /*   170 */   317,  413,  188,   23,  456,  322,  354,  435,  437,  416,
 /*   180 */   457,  478,  486,  490,  419,  508,   23,  419,  511,  340,
 /*   190 */    23,  438,  419,  510,  464,  530,  531,  552,  515,  532,
 /*   200 */    23,  438,  419,  448,  647,  534,   23,   23,   23,   23,
 /*   210 */    23,   23,  438,  419,  448,  517,  569,  603,  664,  669,
 /*   220 */   672,  675,  674,  677,  676,  693,  692,  695,  635,  702,
 /*   230 */   696,  697,  706,  707,  701,  678,  705,  720,  679,  721,
 /*   240 */   711,  716,  719,  712,  722,  731,  742,  726,  738,  745,
 /*   250 */   751,  715,  761,  758,  759,  772,  773,  730,  778,  794,
 /*   260 */   771,  779,  789,  780,  790,  781,  791,  787,  795,  802,
 /*   270 */   800,  737,  747,  800,  737,  747,  635,  804,  807,
};
#define YY_REDUCE_USE_DFLT (-102)
#define YY_REDUCE_COUNT (161)
#define YY_REDUCE_MIN   (-101)
#define YY_REDUCE_MAX   (4694)
static const short yy_reduce_ofst[] = {
 /*     0 */  1417, 1472, 1660, 1719, 1773, 1830, 1884, 1941, 1995, 2052,
 /*    10 */  2113, 2164, 2219, 2270, 2325, 2376, 2431, 2431, 2482, 2482,
 /*    20 */  2431, 2482, 2482, 2482, 2482, 2537, 2588, 2643, 2694, 2749,
 /*    30 */  2800, 2846, 2897, 2948, 2999, 3050, 3101, 3152, 3203, 3254,
 /*    40 */  3305, 3356, 3407, 3458, 3509, 3560, 3611, 3662, 3713, 3764,
 /*    50 */  3834, 3870, 3906, 3942, 3978, 4014, 4050, 4086, 4122, 4158,
 /*    60 */  4194, 4230, 4266, 4302,  302,  397,  492,  587,  682,  777,
 /*    70 */   872,  967, 1062, 1157, 1252, 1347, 4414, 1621, 4418, 4552,
 /*    80 */   149, 4568, 4598, 4605, 4608, 4615, 4646, 4653, 4656, 4694,
 /*    90 */   -75,  243,  708,  803,  898,  993, 1453,   74,  -23,  -21,
 /*   100 */    72,  156,  453,  455,   21,   18, -101,  -20,   62,  112,
 /*   110 */   116,  183,  127,  182,  184,  110,  216,  238,  114,  246,
 /*   120 */   279,  280,  301,  -73,  -58,    4,   41,   63,  164,  164,
 /*   130 */   167,  220,  257,   41,  275,  282,  297,  305,  314,  333,
 /*   140 */   480,  476,  488,  493,  516,  507,  484,  495,  497,  498,
 /*   150 */   533,  514,  519,  537,  539,  551,  524,  500,  548,  520,
 /*   160 */   559,  553,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
 /*    10 */   707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
 /*    20 */   707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
 /*    30 */   707,  707,  754,  754,  754,  754,  754,  754,  837,  837,
 /*    40 */   837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
 /*    50 */   837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
 /*    60 */   837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
 /*    70 */   837,  837,  837,  837,  837,  837,  837,  707,  837,  837,
 /*    80 */   707,  837,  837,  837,  837,  837,  837,  837,  837,  837,
 /*    90 */   707,  707,  707,  707,  707,  707,  837,  837,  837,  837,
 /*   100 */   837,  837,  837,  837,  837,  824,  660,  660,  757,  837,
 /*   110 */   837,  837,  660,  660,  837,  837,  837,  837,  837,  837,
 /*   120 */   837,  837,  837,  837,  837,  837,  824,  837,  675,  675,
 /*   130 */   837,  697,  696,  837,  658,  658,  837,  837,  660,  660,
 /*   140 */   658,  675,  837,  837,  678,  660,  675,  675,  837,  675,
 /*   150 */   681,  837,  837,  681,  678,  678,  660,  675,  837,  675,
 /*   160 */   678,  837,  776,  791,  790,  789,  802,  801,  800,  837,
 /*   170 */   837,  837,  837,  814,  646,  837,  837,  837,  837,  837,
 /*   180 */   837,  837,  837,  837,  795,  837,  806,  796,  837,  817,
 /*   190 */   805,  799,  794,  837,  837,  837,  837,  837,  837,  837,
 /*   200 */   804,  798,  793,  788,  837,  837,  811,  810,  809,  808,
 /*   210 */   807,  803,  797,  792,  787,  778,  837,  837,  700,  837,
 /*   220 */   699,  698,  837,  837,  837,  837,  837,  837,  779,  837,
 /*   230 */   837,  837,  837,  837,  837,  837,  837,  837,  837,  753,
 /*   240 */   837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
 /*   250 */   837,  737,  837,  837,  837,  837,  837,  837,  837,  837,
 /*   260 */   837,  824,  837,  837,  837,  685,  837,  837,  837,  837,
 /*   270 */   786,  784,  782,  785,  783,  781,  780,  837,  667,
};
/********** End of lemon-generated parsing tables *****************************/

/* The next table maps tokens (terminal symbols) into fallback tokens.  
** If a construct like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
**
** This feature can be used, for example, to cause some keywords in a language
** to revert to identifiers if they keyword does not apply in the context where
** it appears.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
**
** After the "shift" half of a SHIFTREDUCE action, the stateno field
** actually contains the reduce action for the second half of the
** SHIFTREDUCE.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  yyStackEntry *yytos;          /* Pointer to top element of the stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyhwm;                    /* High-water mark of the stack */
#endif
#ifndef YYNOERRORRECOVERY
  int yyerrcnt;                 /* Shifts left before out of the error */
#endif
  BTParserARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
  yyStackEntry yystk0;          /* First stack entry */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void BTParserTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "O_ROUND",       "C_ROUND",       "COMMA",       
  "VOID",          "BIN_AND",       "TYPEDEF",       "SEMICOLON",   
  "STRUCT",        "O_CURLY",       "C_CURLY",       "UNION",       
  "ENUM",          "LT",            "GT",            "CONST",       
  "LOCAL",         "ASSIGN",        "COLON",         "O_SQUARE",    
  "C_SQUARE",      "IDENTIFIER",    "BOOL",          "UNSIGNED",    
  "SIGNED",        "WSTRING",       "STRING",        "CHAR",        
  "WCHAR",         "BYTE",          "TIME",          "DOSDATE",     
  "DOSTIME",       "OLETIME",       "FILETIME",      "UCHAR",       
  "UBYTE",         "SHORT",         "USHORT",        "INT32",       
  "UINT32",        "INT64",         "UINT64",        "HFLOAT",      
  "FLOAT",         "DOUBLE",        "IF",            "ELSE",        
  "WHILE",         "FOR",           "DO",            "SWITCH",      
  "BREAK",         "CONTINUE",      "RETURN",        "CASE",        
  "DEFAULT",       "ADD_ASSIGN",    "SUB_ASSIGN",    "MUL_ASSIGN",  
  "DIV_ASSIGN",    "XOR_ASSIGN",    "AND_ASSIGN",    "OR_ASSIGN",   
  "LS_ASSIGN",     "RS_ASSIGN",     "QUESTION",      "LOG_OR",      
  "LOG_AND",       "BIN_OR",        "BIN_XOR",       "EQ",          
  "NE",            "LE",            "GE",            "LSL",         
  "LSR",           "ADD",           "SUB",           "MUL",         
  "DIV",           "MOD",           "LOG_NOT",       "BIN_NOT",     
  "INC",           "DEC",           "SIZEOF",        "DOT",         
  "LITERAL_STRING",  "LITERAL_CHAR",  "LITERAL_OCT",   "LITERAL_DEC", 
  "LITERAL_HEX",   "LITERAL_REAL",  "TRUE",          "FALSE",       
  "error",         "stm_list",      "var_list",      "var_list_no_assign",
  "case_stms",     "enum_def",      "struct_stms",   "params",      
  "decls",         "expr",          "args_decl",     "custom_vars", 
  "custom_var_decl",  "scalar",        "string",        "character",   
  "datetime",      "param",         "var",           "var_no_assign",
  "custom_var",    "block",         "enum_type",     "type",        
  "id",            "sign",          "program",       "decl",        
  "func_decl",     "struct_decl",   "union_decl",    "enum_decl",   
  "var_decl",      "typedef_decl",  "stm",           "array",       
  "op_if",         "number",        "enum_val",      "literal",     
  "then_stm",      "arg",           "normal_stm",    "return_stm",  
  "case_stm",      "value",         "op_assign",     "op_or",       
  "op_and",        "op_binor",      "op_binxor",     "op_binand",   
  "op_equate",     "op_compare",    "op_shift",      "op_add",      
  "op_mult",       "op_unary",      "op_pointer",    "boolean",     
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= decls",
 /*   1 */ "decls ::= decls decl",
 /*   2 */ "decls ::= decl",
 /*   3 */ "decl ::= func_decl",
 /*   4 */ "decl ::= struct_decl",
 /*   5 */ "decl ::= union_decl",
 /*   6 */ "decl ::= enum_decl",
 /*   7 */ "decl ::= var_decl",
 /*   8 */ "decl ::= typedef_decl",
 /*   9 */ "decl ::= stm",
 /*  10 */ "func_decl ::= type id O_ROUND params C_ROUND block",
 /*  11 */ "func_decl ::= type id O_ROUND C_ROUND block",
 /*  12 */ "params ::= params COMMA param",
 /*  13 */ "params ::= param",
 /*  14 */ "params ::= VOID",
 /*  15 */ "param ::= type BIN_AND id array",
 /*  16 */ "param ::= type id array",
 /*  17 */ "param ::= id BIN_AND id array",
 /*  18 */ "param ::= id id array",
 /*  19 */ "typedef_decl ::= TYPEDEF type id array custom_var_decl SEMICOLON",
 /*  20 */ "struct_decl ::= STRUCT id args_decl O_CURLY struct_stms C_CURLY custom_var_decl SEMICOLON",
 /*  21 */ "union_decl ::= UNION id args_decl O_CURLY struct_stms C_CURLY custom_var_decl SEMICOLON",
 /*  22 */ "enum_decl ::= ENUM enum_type id O_CURLY enum_def C_CURLY SEMICOLON",
 /*  23 */ "enum_decl ::= ENUM enum_type O_CURLY enum_def C_CURLY SEMICOLON",
 /*  24 */ "enum_decl ::= ENUM type O_CURLY enum_def C_CURLY SEMICOLON",
 /*  25 */ "custom_var_decl ::= LT custom_vars GT",
 /*  26 */ "custom_var_decl ::=",
 /*  27 */ "args_decl ::= O_ROUND params C_ROUND",
 /*  28 */ "args_decl ::=",
 /*  29 */ "var_decl ::= CONST type var var_list SEMICOLON",
 /*  30 */ "var_decl ::= CONST id var var_list SEMICOLON",
 /*  31 */ "var_decl ::= LOCAL type var var_list SEMICOLON",
 /*  32 */ "var_decl ::= LOCAL id var var_list SEMICOLON",
 /*  33 */ "var_decl ::= type var_no_assign var_list_no_assign custom_var_decl SEMICOLON",
 /*  34 */ "var_decl ::= id var_no_assign var_list_no_assign custom_var_decl SEMICOLON",
 /*  35 */ "var ::= id array",
 /*  36 */ "var ::= id array ASSIGN op_if",
 /*  37 */ "var_no_assign ::= id array",
 /*  38 */ "var_no_assign ::= id COLON number",
 /*  39 */ "var_no_assign ::= id O_ROUND expr C_ROUND",
 /*  40 */ "var_no_assign ::= COLON number",
 /*  41 */ "array ::= O_SQUARE expr C_SQUARE",
 /*  42 */ "array ::= O_SQUARE C_SQUARE",
 /*  43 */ "array ::=",
 /*  44 */ "var_list ::= var_list COMMA var",
 /*  45 */ "var_list ::= COMMA var",
 /*  46 */ "var_list ::=",
 /*  47 */ "var_list_no_assign ::= var_list_no_assign COMMA var_no_assign",
 /*  48 */ "var_list_no_assign ::= COMMA var_no_assign",
 /*  49 */ "var_list_no_assign ::=",
 /*  50 */ "enum_def ::= enum_def COMMA enum_val",
 /*  51 */ "enum_def ::= enum_val",
 /*  52 */ "enum_val ::= id ASSIGN number",
 /*  53 */ "enum_val ::= id",
 /*  54 */ "enum_type ::= LT type GT",
 /*  55 */ "enum_type ::=",
 /*  56 */ "custom_vars ::= custom_vars COMMA custom_var",
 /*  57 */ "custom_vars ::= custom_var",
 /*  58 */ "custom_var ::= IDENTIFIER ASSIGN id",
 /*  59 */ "custom_var ::= IDENTIFIER ASSIGN literal",
 /*  60 */ "type ::= sign scalar",
 /*  61 */ "type ::= sign character",
 /*  62 */ "type ::= string",
 /*  63 */ "type ::= datetime",
 /*  64 */ "type ::= STRUCT id args_decl O_CURLY struct_stms C_CURLY",
 /*  65 */ "type ::= UNION id args_decl O_CURLY struct_stms C_CURLY",
 /*  66 */ "type ::= ENUM enum_type id O_CURLY enum_def C_CURLY",
 /*  67 */ "type ::= ENUM enum_type O_CURLY enum_def C_CURLY",
 /*  68 */ "type ::= ENUM type O_CURLY enum_def C_CURLY",
 /*  69 */ "type ::= STRUCT args_decl O_CURLY struct_stms C_CURLY",
 /*  70 */ "type ::= UNION args_decl O_CURLY struct_stms C_CURLY",
 /*  71 */ "type ::= VOID",
 /*  72 */ "type ::= BOOL",
 /*  73 */ "sign ::= UNSIGNED",
 /*  74 */ "sign ::= SIGNED",
 /*  75 */ "sign ::=",
 /*  76 */ "string ::= WSTRING",
 /*  77 */ "string ::= STRING",
 /*  78 */ "string ::= character",
 /*  79 */ "character ::= CHAR",
 /*  80 */ "character ::= WCHAR",
 /*  81 */ "character ::= BYTE",
 /*  82 */ "datetime ::= TIME",
 /*  83 */ "datetime ::= DOSDATE",
 /*  84 */ "datetime ::= DOSTIME",
 /*  85 */ "datetime ::= OLETIME",
 /*  86 */ "datetime ::= FILETIME",
 /*  87 */ "scalar ::= UCHAR",
 /*  88 */ "scalar ::= UBYTE",
 /*  89 */ "scalar ::= SHORT",
 /*  90 */ "scalar ::= USHORT",
 /*  91 */ "scalar ::= INT32",
 /*  92 */ "scalar ::= UINT32",
 /*  93 */ "scalar ::= INT64",
 /*  94 */ "scalar ::= UINT64",
 /*  95 */ "scalar ::= HFLOAT",
 /*  96 */ "scalar ::= FLOAT",
 /*  97 */ "scalar ::= DOUBLE",
 /*  98 */ "struct_stms ::= struct_stms stm",
 /*  99 */ "struct_stms ::= stm",
 /* 100 */ "struct_stms ::=",
 /* 101 */ "stm ::= IF O_ROUND expr C_ROUND stm",
 /* 102 */ "stm ::= IF O_ROUND expr C_ROUND then_stm ELSE stm",
 /* 103 */ "stm ::= WHILE O_ROUND expr C_ROUND stm",
 /* 104 */ "stm ::= FOR O_ROUND arg SEMICOLON arg SEMICOLON arg C_ROUND stm",
 /* 105 */ "stm ::= normal_stm",
 /* 106 */ "then_stm ::= IF O_ROUND expr C_ROUND then_stm ELSE then_stm",
 /* 107 */ "then_stm ::= WHILE O_ROUND expr C_ROUND then_stm",
 /* 108 */ "then_stm ::= FOR O_ROUND arg SEMICOLON arg SEMICOLON arg C_ROUND then_stm",
 /* 109 */ "then_stm ::= normal_stm",
 /* 110 */ "normal_stm ::= DO stm WHILE O_ROUND expr C_ROUND SEMICOLON",
 /* 111 */ "normal_stm ::= SWITCH O_ROUND expr C_ROUND O_CURLY case_stms C_CURLY",
 /* 112 */ "normal_stm ::= var_decl",
 /* 113 */ "normal_stm ::= block",
 /* 114 */ "normal_stm ::= return_stm",
 /* 115 */ "normal_stm ::= expr SEMICOLON",
 /* 116 */ "normal_stm ::= BREAK SEMICOLON",
 /* 117 */ "normal_stm ::= CONTINUE SEMICOLON",
 /* 118 */ "normal_stm ::= SEMICOLON",
 /* 119 */ "return_stm ::= RETURN expr SEMICOLON",
 /* 120 */ "return_stm ::= RETURN SEMICOLON",
 /* 121 */ "arg ::= expr",
 /* 122 */ "arg ::=",
 /* 123 */ "case_stms ::= case_stms case_stm",
 /* 124 */ "case_stms ::= case_stm",
 /* 125 */ "case_stms ::=",
 /* 126 */ "case_stm ::= CASE value COLON stm_list",
 /* 127 */ "case_stm ::= DEFAULT COLON stm_list",
 /* 128 */ "block ::= O_CURLY stm_list C_CURLY",
 /* 129 */ "stm_list ::= stm_list stm",
 /* 130 */ "stm_list ::= stm",
 /* 131 */ "stm_list ::=",
 /* 132 */ "expr ::= expr COMMA op_assign",
 /* 133 */ "expr ::= op_assign",
 /* 134 */ "op_assign ::= op_if ASSIGN op_assign",
 /* 135 */ "op_assign ::= op_if ADD_ASSIGN op_assign",
 /* 136 */ "op_assign ::= op_if SUB_ASSIGN op_assign",
 /* 137 */ "op_assign ::= op_if MUL_ASSIGN op_assign",
 /* 138 */ "op_assign ::= op_if DIV_ASSIGN op_assign",
 /* 139 */ "op_assign ::= op_if XOR_ASSIGN op_assign",
 /* 140 */ "op_assign ::= op_if AND_ASSIGN op_assign",
 /* 141 */ "op_assign ::= op_if OR_ASSIGN op_assign",
 /* 142 */ "op_assign ::= op_if LS_ASSIGN op_assign",
 /* 143 */ "op_assign ::= op_if RS_ASSIGN op_assign",
 /* 144 */ "op_assign ::= op_if",
 /* 145 */ "op_if ::= op_or QUESTION op_if COLON op_if",
 /* 146 */ "op_if ::= op_or",
 /* 147 */ "op_or ::= op_or LOG_OR op_and",
 /* 148 */ "op_or ::= op_and",
 /* 149 */ "op_and ::= op_and LOG_AND op_binor",
 /* 150 */ "op_and ::= op_binor",
 /* 151 */ "op_binor ::= op_binor BIN_OR op_binxor",
 /* 152 */ "op_binor ::= op_binxor",
 /* 153 */ "op_binxor ::= op_binxor BIN_XOR op_binand",
 /* 154 */ "op_binxor ::= op_binand",
 /* 155 */ "op_binand ::= op_binand BIN_AND op_equate",
 /* 156 */ "op_binand ::= op_equate",
 /* 157 */ "op_equate ::= op_equate EQ op_compare",
 /* 158 */ "op_equate ::= op_equate NE op_compare",
 /* 159 */ "op_equate ::= op_compare",
 /* 160 */ "op_compare ::= op_compare LT op_shift",
 /* 161 */ "op_compare ::= op_compare GT op_shift",
 /* 162 */ "op_compare ::= op_compare LE op_shift",
 /* 163 */ "op_compare ::= op_compare GE op_shift",
 /* 164 */ "op_compare ::= op_shift",
 /* 165 */ "op_shift ::= op_shift LSL op_add",
 /* 166 */ "op_shift ::= op_shift LSR op_add",
 /* 167 */ "op_shift ::= op_add",
 /* 168 */ "op_add ::= op_add ADD op_mult",
 /* 169 */ "op_add ::= op_add SUB op_mult",
 /* 170 */ "op_add ::= op_mult",
 /* 171 */ "op_mult ::= op_mult MUL op_unary",
 /* 172 */ "op_mult ::= op_mult DIV op_unary",
 /* 173 */ "op_mult ::= op_mult MOD op_unary",
 /* 174 */ "op_mult ::= op_unary",
 /* 175 */ "op_unary ::= LOG_NOT op_unary",
 /* 176 */ "op_unary ::= BIN_NOT op_unary",
 /* 177 */ "op_unary ::= SUB op_unary",
 /* 178 */ "op_unary ::= INC op_unary",
 /* 179 */ "op_unary ::= DEC op_unary",
 /* 180 */ "op_unary ::= op_unary INC",
 /* 181 */ "op_unary ::= op_unary DEC",
 /* 182 */ "op_unary ::= O_ROUND type C_ROUND op_unary",
 /* 183 */ "op_unary ::= SIZEOF O_ROUND type C_ROUND",
 /* 184 */ "op_unary ::= SIZEOF O_ROUND op_assign C_ROUND",
 /* 185 */ "op_unary ::= op_pointer",
 /* 186 */ "op_pointer ::= op_pointer DOT id",
 /* 187 */ "op_pointer ::= op_pointer O_SQUARE expr C_SQUARE",
 /* 188 */ "op_pointer ::= value",
 /* 189 */ "value ::= O_ROUND expr C_ROUND",
 /* 190 */ "value ::= id O_ROUND expr C_ROUND",
 /* 191 */ "value ::= id O_ROUND C_ROUND",
 /* 192 */ "value ::= id",
 /* 193 */ "value ::= literal",
 /* 194 */ "literal ::= LITERAL_STRING",
 /* 195 */ "literal ::= boolean",
 /* 196 */ "literal ::= number",
 /* 197 */ "number ::= LITERAL_CHAR",
 /* 198 */ "number ::= LITERAL_OCT",
 /* 199 */ "number ::= LITERAL_DEC",
 /* 200 */ "number ::= LITERAL_HEX",
 /* 201 */ "number ::= LITERAL_REAL",
 /* 202 */ "boolean ::= TRUE",
 /* 203 */ "boolean ::= FALSE",
 /* 204 */ "id ::= IDENTIFIER",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.  Return the number
** of errors.  Return 0 on success.
*/
static int yyGrowStack(yyParser *p){
  int newSize;
  int idx;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  idx = p->yytos ? (int)(p->yytos - p->yystack) : 0;
  if( p->yystack==&p->yystk0 ){
    pNew = malloc(newSize*sizeof(pNew[0]));
    if( pNew ) pNew[0] = p->yystk0;
  }else{
    pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  }
  if( pNew ){
    p->yystack = pNew;
    p->yytos = &p->yystack[idx];
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows from %d to %d entries.\n",
              yyTracePrompt, p->yystksz, newSize);
    }
#endif
    p->yystksz = newSize;
  }
  return pNew==0; 
}
#endif

/* Datatype of the argument to the memory allocated passed as the
** second argument to BTParserAlloc() below.  This can be changed by
** putting an appropriate #define in the %include section of the input
** grammar.
*/
#ifndef YYMALLOCARGTYPE
# define YYMALLOCARGTYPE size_t
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to BTParser and BTParserFree.
*/
void *BTParserAlloc(void *(*mallocProc)(YYMALLOCARGTYPE)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (YYMALLOCARGTYPE)sizeof(yyParser) );
  if( pParser ){
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyhwm = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yytos = NULL;
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    if( yyGrowStack(pParser) ){
      pParser->yystack = &pParser->yystk0;
      pParser->yystksz = 1;
    }
#endif
#ifndef YYNOERRORRECOVERY
    pParser->yyerrcnt = -1;
#endif
    pParser->yytos = pParser->yystack;
    pParser->yystack[0].stateno = 0;
    pParser->yystack[0].major = 0;
  }
  return pParser;
}

/* The following function deletes the "minor type" or semantic value
** associated with a symbol.  The symbol can be either a terminal
** or nonterminal. "yymajor" is the symbol code, and "yypminor" is
** a pointer to the value to be deleted.  The code used to do the 
** deletions is derived from the %destructor and/or %token_destructor
** directives of the input grammar.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  BTParserARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are *not* used
    ** inside the C code.
    */
/********* Begin destructor definitions ***************************************/
/********* End destructor definitions *****************************************/
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
*/
static void yy_pop_parser_stack(yyParser *pParser){
  yyStackEntry *yytos;
  assert( pParser->yytos!=0 );
  assert( pParser->yytos > pParser->yystack );
  yytos = pParser->yytos--;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yy_destructor(pParser, yytos->major, &yytos->minor);
}

/* 
** Deallocate and destroy a parser.  Destructors are called for
** all stack elements before shutting the parser down.
**
** If the YYPARSEFREENEVERNULL macro exists (for example because it
** is defined in a %include section of the input grammar) then it is
** assumed that the input pointer is never NULL.
*/
void BTParserFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
#ifndef YYPARSEFREENEVERNULL
  if( pParser==0 ) return;
#endif
  while( pParser->yytos>pParser->yystack ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  if( pParser->yystack!=&pParser->yystk0 ) free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int BTParserStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyhwm;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
*/
static unsigned int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yytos->stateno;
 
  if( stateno>=YY_MIN_REDUCE ) return stateno;
  assert( stateno <= YY_SHIFT_COUNT );
  do{
    i = yy_shift_ofst[stateno];
    assert( iLookAhead!=YYNOCODE );
    i += iLookAhead;
    if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        assert( yyFallback[iFallback]==0 ); /* Fallback loop must terminate */
        iLookAhead = iFallback;
        continue;
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD && iLookAhead>0
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead],
               yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
      return yy_default[stateno];
    }else{
      return yy_action[i];
    }
  }while(1);
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser){
   BTParserARG_FETCH;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
/******** Begin %stack_overflow code ******************************************/
#line 20 "bt_parser.y"

    btvm->error("Stack overflow");
#line 1894 "bt_parser.c"
/******** End %stack_overflow code ********************************************/
   BTParserARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Print tracing information for a SHIFT action
*/
#ifndef NDEBUG
static void yyTraceShift(yyParser *yypParser, int yyNewState){
  if( yyTraceFILE ){
    if( yyNewState<YYNSTATE ){
      fprintf(yyTraceFILE,"%sShift '%s', go to state %d\n",
         yyTracePrompt,yyTokenName[yypParser->yytos->major],
         yyNewState);
    }else{
      fprintf(yyTraceFILE,"%sShift '%s'\n",
         yyTracePrompt,yyTokenName[yypParser->yytos->major]);
    }
  }
}
#else
# define yyTraceShift(X,Y)
#endif

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  BTParserTOKENTYPE yyMinor        /* The minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yytos++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
    yypParser->yyhwm++;
    assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack) );
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yytos>=&yypParser->yystack[YYSTACKDEPTH] ){
    yypParser->yytos--;
    yyStackOverflow(yypParser);
    return;
  }
#else
  if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz] ){
    if( yyGrowStack(yypParser) ){
      yypParser->yytos--;
      yyStackOverflow(yypParser);
      return;
    }
  }
#endif
  if( yyNewState > YY_MAX_SHIFT ){
    yyNewState += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
  }
  yytos = yypParser->yytos;
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor.yy0 = yyMinor;
  yyTraceShift(yypParser, yyNewState);
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 122, 1 },
  { 104, 2 },
  { 104, 1 },
  { 123, 1 },
  { 123, 1 },
  { 123, 1 },
  { 123, 1 },
  { 123, 1 },
  { 123, 1 },
  { 123, 1 },
  { 124, 6 },
  { 124, 5 },
  { 103, 3 },
  { 103, 1 },
  { 103, 1 },
  { 113, 4 },
  { 113, 3 },
  { 113, 4 },
  { 113, 3 },
  { 129, 6 },
  { 125, 8 },
  { 126, 8 },
  { 127, 7 },
  { 127, 6 },
  { 127, 6 },
  { 108, 3 },
  { 108, 0 },
  { 106, 3 },
  { 106, 0 },
  { 128, 5 },
  { 128, 5 },
  { 128, 5 },
  { 128, 5 },
  { 128, 5 },
  { 128, 5 },
  { 114, 2 },
  { 114, 4 },
  { 115, 2 },
  { 115, 3 },
  { 115, 4 },
  { 115, 2 },
  { 131, 3 },
  { 131, 2 },
  { 131, 0 },
  { 98, 3 },
  { 98, 2 },
  { 98, 0 },
  { 99, 3 },
  { 99, 2 },
  { 99, 0 },
  { 101, 3 },
  { 101, 1 },
  { 134, 3 },
  { 134, 1 },
  { 118, 3 },
  { 118, 0 },
  { 107, 3 },
  { 107, 1 },
  { 116, 3 },
  { 116, 3 },
  { 119, 2 },
  { 119, 2 },
  { 119, 1 },
  { 119, 1 },
  { 119, 6 },
  { 119, 6 },
  { 119, 6 },
  { 119, 5 },
  { 119, 5 },
  { 119, 5 },
  { 119, 5 },
  { 119, 1 },
  { 119, 1 },
  { 121, 1 },
  { 121, 1 },
  { 121, 0 },
  { 110, 1 },
  { 110, 1 },
  { 110, 1 },
  { 111, 1 },
  { 111, 1 },
  { 111, 1 },
  { 112, 1 },
  { 112, 1 },
  { 112, 1 },
  { 112, 1 },
  { 112, 1 },
  { 109, 1 },
  { 109, 1 },
  { 109, 1 },
  { 109, 1 },
  { 109, 1 },
  { 109, 1 },
  { 109, 1 },
  { 109, 1 },
  { 109, 1 },
  { 109, 1 },
  { 109, 1 },
  { 102, 2 },
  { 102, 1 },
  { 102, 0 },
  { 130, 5 },
  { 130, 7 },
  { 130, 5 },
  { 130, 9 },
  { 130, 1 },
  { 136, 7 },
  { 136, 5 },
  { 136, 9 },
  { 136, 1 },
  { 138, 7 },
  { 138, 7 },
  { 138, 1 },
  { 138, 1 },
  { 138, 1 },
  { 138, 2 },
  { 138, 2 },
  { 138, 2 },
  { 138, 1 },
  { 139, 3 },
  { 139, 2 },
  { 137, 1 },
  { 137, 0 },
  { 100, 2 },
  { 100, 1 },
  { 100, 0 },
  { 140, 4 },
  { 140, 3 },
  { 117, 3 },
  { 97, 2 },
  { 97, 1 },
  { 97, 0 },
  { 105, 3 },
  { 105, 1 },
  { 142, 3 },
  { 142, 3 },
  { 142, 3 },
  { 142, 3 },
  { 142, 3 },
  { 142, 3 },
  { 142, 3 },
  { 142, 3 },
  { 142, 3 },
  { 142, 3 },
  { 142, 1 },
  { 132, 5 },
  { 132, 1 },
  { 143, 3 },
  { 143, 1 },
  { 144, 3 },
  { 144, 1 },
  { 145, 3 },
  { 145, 1 },
  { 146, 3 },
  { 146, 1 },
  { 147, 3 },
  { 147, 1 },
  { 148, 3 },
  { 148, 3 },
  { 148, 1 },
  { 149, 3 },
  { 149, 3 },
  { 149, 3 },
  { 149, 3 },
  { 149, 1 },
  { 150, 3 },
  { 150, 3 },
  { 150, 1 },
  { 151, 3 },
  { 151, 3 },
  { 151, 1 },
  { 152, 3 },
  { 152, 3 },
  { 152, 3 },
  { 152, 1 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 4 },
  { 153, 4 },
  { 153, 4 },
  { 153, 1 },
  { 154, 3 },
  { 154, 4 },
  { 154, 1 },
  { 141, 3 },
  { 141, 4 },
  { 141, 3 },
  { 141, 1 },
  { 141, 1 },
  { 135, 1 },
  { 135, 1 },
  { 135, 1 },
  { 133, 1 },
  { 133, 1 },
  { 133, 1 },
  { 133, 1 },
  { 133, 1 },
  { 155, 1 },
  { 155, 1 },
  { 120, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  unsigned int yyruleno        /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  BTParserARG_FETCH;
  yymsp = yypParser->yytos;
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    yysize = yyRuleInfo[yyruleno].nrhs;
    fprintf(yyTraceFILE, "%sReduce [%s], go to state %d.\n", yyTracePrompt,
      yyRuleName[yyruleno], yymsp[-yysize].stateno);
  }
#endif /* NDEBUG */

  /* Check that the stack is large enough to grow by a single entry
  ** if the RHS of the rule is empty.  This ensures that there is room
  ** enough on the stack to push the LHS value */
  if( yyRuleInfo[yyruleno].nrhs==0 ){
#ifdef YYTRACKMAXSTACKDEPTH
    if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
      yypParser->yyhwm++;
      assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack));
    }
#endif
#if YYSTACKDEPTH>0 
    if( yypParser->yytos>=&yypParser->yystack[YYSTACKDEPTH-1] ){
      yyStackOverflow(yypParser);
      return;
    }
#else
    if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz-1] ){
      if( yyGrowStack(yypParser) ){
        yyStackOverflow(yypParser);
        return;
      }
      yymsp = yypParser->yytos;
    }
#endif
  }

  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
/********** Begin reduce actions **********************************************/
        YYMINORTYPE yylhsminor;
      case 0: /* program ::= decls */
#line 50 "bt_parser.y"
{ btvm->loadAST(new NBlock(*yymsp[0].minor.yy121)); delete yymsp[0].minor.yy121; }
#line 2239 "bt_parser.c"
        break;
      case 1: /* decls ::= decls decl */
      case 98: /* struct_stms ::= struct_stms stm */ yytestcase(yyruleno==98);
      case 123: /* case_stms ::= case_stms case_stm */ yytestcase(yyruleno==123);
      case 129: /* stm_list ::= stm_list stm */ yytestcase(yyruleno==129);
#line 52 "bt_parser.y"
{ yymsp[-1].minor.yy121->push_back(yymsp[0].minor.yy225); }
#line 2247 "bt_parser.c"
        break;
      case 2: /* decls ::= decl */
      case 51: /* enum_def ::= enum_val */ yytestcase(yyruleno==51);
      case 99: /* struct_stms ::= stm */ yytestcase(yyruleno==99);
      case 124: /* case_stms ::= case_stm */ yytestcase(yyruleno==124);
      case 130: /* stm_list ::= stm */ yytestcase(yyruleno==130);
      case 133: /* expr ::= op_assign */ yytestcase(yyruleno==133);
#line 53 "bt_parser.y"
{ yylhsminor.yy121 = new NodeList(); yylhsminor.yy121->push_back(yymsp[0].minor.yy225); }
#line 2257 "bt_parser.c"
  yymsp[0].minor.yy121 = yylhsminor.yy121;
        break;
      case 3: /* decl ::= func_decl */
      case 4: /* decl ::= struct_decl */ yytestcase(yyruleno==4);
      case 5: /* decl ::= union_decl */ yytestcase(yyruleno==5);
      case 6: /* decl ::= enum_decl */ yytestcase(yyruleno==6);
      case 7: /* decl ::= var_decl */ yytestcase(yyruleno==7);
      case 8: /* decl ::= typedef_decl */ yytestcase(yyruleno==8);
      case 9: /* decl ::= stm */ yytestcase(yyruleno==9);
      case 105: /* stm ::= normal_stm */ yytestcase(yyruleno==105);
      case 109: /* then_stm ::= normal_stm */ yytestcase(yyruleno==109);
      case 112: /* normal_stm ::= var_decl */ yytestcase(yyruleno==112);
      case 114: /* normal_stm ::= return_stm */ yytestcase(yyruleno==114);
      case 144: /* op_assign ::= op_if */ yytestcase(yyruleno==144);
      case 146: /* op_if ::= op_or */ yytestcase(yyruleno==146);
      case 148: /* op_or ::= op_and */ yytestcase(yyruleno==148);
      case 150: /* op_and ::= op_binor */ yytestcase(yyruleno==150);
      case 152: /* op_binor ::= op_binxor */ yytestcase(yyruleno==152);
      case 154: /* op_binxor ::= op_binand */ yytestcase(yyruleno==154);
      case 156: /* op_binand ::= op_equate */ yytestcase(yyruleno==156);
      case 159: /* op_equate ::= op_compare */ yytestcase(yyruleno==159);
      case 164: /* op_compare ::= op_shift */ yytestcase(yyruleno==164);
      case 167: /* op_shift ::= op_add */ yytestcase(yyruleno==167);
      case 170: /* op_add ::= op_mult */ yytestcase(yyruleno==170);
      case 174: /* op_mult ::= op_unary */ yytestcase(yyruleno==174);
      case 185: /* op_unary ::= op_pointer */ yytestcase(yyruleno==185);
      case 188: /* op_pointer ::= value */ yytestcase(yyruleno==188);
      case 193: /* value ::= literal */ yytestcase(yyruleno==193);
      case 195: /* literal ::= boolean */ yytestcase(yyruleno==195);
      case 196: /* literal ::= number */ yytestcase(yyruleno==196);
#line 55 "bt_parser.y"
{ yylhsminor.yy225 = yymsp[0].minor.yy225; }
#line 2290 "bt_parser.c"
  yymsp[0].minor.yy225 = yylhsminor.yy225;
        break;
      case 10: /* func_decl ::= type id O_ROUND params C_ROUND block */
#line 67 "bt_parser.y"
{ yylhsminor.yy225 = new NFunction(yymsp[-5].minor.yy179, yymsp[-4].minor.yy132, *yymsp[-2].minor.yy121, yymsp[0].minor.yy220); delete yymsp[-2].minor.yy121; }
#line 2296 "bt_parser.c"
  yymsp[-5].minor.yy225 = yylhsminor.yy225;
        break;
      case 11: /* func_decl ::= type id O_ROUND C_ROUND block */
#line 68 "bt_parser.y"
{ yylhsminor.yy225 = new NFunction(yymsp[-4].minor.yy179, yymsp[-3].minor.yy132, yymsp[0].minor.yy220); }
#line 2302 "bt_parser.c"
  yymsp[-4].minor.yy225 = yylhsminor.yy225;
        break;
      case 12: /* params ::= params COMMA param */
#line 70 "bt_parser.y"
{ yymsp[-2].minor.yy121->push_back(yymsp[0].minor.yy100); }
#line 2308 "bt_parser.c"
        break;
      case 13: /* params ::= param */
#line 71 "bt_parser.y"
{ yylhsminor.yy121 = new NodeList(); yylhsminor.yy121->push_back(yymsp[0].minor.yy100); }
#line 2313 "bt_parser.c"
  yymsp[0].minor.yy121 = yylhsminor.yy121;
        break;
      case 14: /* params ::= VOID */
#line 72 "bt_parser.y"
{ yymsp[0].minor.yy121 = new NodeList(); }
#line 2319 "bt_parser.c"
        break;
      case 15: /* param ::= type BIN_AND id array */
#line 74 "bt_parser.y"
{ yylhsminor.yy100 = new NArgument(yymsp[-3].minor.yy179, yymsp[-1].minor.yy132, yymsp[0].minor.yy225); yylhsminor.yy100->by_reference = true; }
#line 2324 "bt_parser.c"
  yymsp[-3].minor.yy100 = yylhsminor.yy100;
        break;
      case 16: /* param ::= type id array */
#line 75 "bt_parser.y"
{ yylhsminor.yy100 = new NArgument(yymsp[-2].minor.yy179, yymsp[-1].minor.yy132, yymsp[0].minor.yy225); }
#line 2330 "bt_parser.c"
  yymsp[-2].minor.yy100 = yylhsminor.yy100;
        break;
      case 17: /* param ::= id BIN_AND id array */
#line 76 "bt_parser.y"
{ yylhsminor.yy100 = new NArgument(yymsp[-3].minor.yy132, yymsp[-1].minor.yy132, yymsp[0].minor.yy225); yylhsminor.yy100->by_reference = true; }
#line 2336 "bt_parser.c"
  yymsp[-3].minor.yy100 = yylhsminor.yy100;
        break;
      case 18: /* param ::= id id array */
#line 77 "bt_parser.y"
{ yylhsminor.yy100 = new NArgument(yymsp[-2].minor.yy132, yymsp[-1].minor.yy132, yymsp[0].minor.yy225); }
#line 2342 "bt_parser.c"
  yymsp[-2].minor.yy100 = yylhsminor.yy100;
        break;
      case 19: /* typedef_decl ::= TYPEDEF type id array custom_var_decl SEMICOLON */
#line 83 "bt_parser.y"
{ yymsp[-5].minor.yy225 = new NTypedef(yymsp[-4].minor.yy179, yymsp[-3].minor.yy132, *yymsp[-1].minor.yy121); yymsp[-4].minor.yy179->size = yymsp[-2].minor.yy225; delete yymsp[-1].minor.yy121; }
#line 2348 "bt_parser.c"
        break;
      case 20: /* struct_decl ::= STRUCT id args_decl O_CURLY struct_stms C_CURLY custom_var_decl SEMICOLON */
#line 85 "bt_parser.y"
{ yymsp[-7].minor.yy225 = new NStruct(yymsp[-6].minor.yy132, *yymsp[-5].minor.yy121, *yymsp[-3].minor.yy121, *yymsp[-1].minor.yy121); delete yymsp[-5].minor.yy121; delete yymsp[-3].minor.yy121; delete yymsp[-1].minor.yy121; }
#line 2353 "bt_parser.c"
        break;
      case 21: /* union_decl ::= UNION id args_decl O_CURLY struct_stms C_CURLY custom_var_decl SEMICOLON */
#line 87 "bt_parser.y"
{ yymsp[-7].minor.yy225 = new NUnion(yymsp[-6].minor.yy132, *yymsp[-5].minor.yy121, *yymsp[-3].minor.yy121, *yymsp[-1].minor.yy121); delete yymsp[-5].minor.yy121; delete yymsp[-3].minor.yy121; delete yymsp[-1].minor.yy121; }
#line 2358 "bt_parser.c"
        break;
      case 22: /* enum_decl ::= ENUM enum_type id O_CURLY enum_def C_CURLY SEMICOLON */
#line 89 "bt_parser.y"
{ yymsp[-6].minor.yy225 = new NEnum(yymsp[-4].minor.yy132, *yymsp[-2].minor.yy121, yymsp[-5].minor.yy179); delete yymsp[-2].minor.yy121; }
#line 2363 "bt_parser.c"
        break;
      case 23: /* enum_decl ::= ENUM enum_type O_CURLY enum_def C_CURLY SEMICOLON */
      case 24: /* enum_decl ::= ENUM type O_CURLY enum_def C_CURLY SEMICOLON */ yytestcase(yyruleno==24);
#line 90 "bt_parser.y"
{ yymsp[-5].minor.yy225 = new NEnum(*yymsp[-2].minor.yy121, yymsp[-4].minor.yy179); delete yymsp[-2].minor.yy121; }
#line 2369 "bt_parser.c"
        break;
      case 25: /* custom_var_decl ::= LT custom_vars GT */
      case 27: /* args_decl ::= O_ROUND params C_ROUND */ yytestcase(yyruleno==27);
#line 93 "bt_parser.y"
{ yymsp[-2].minor.yy121 = yymsp[-1].minor.yy121; }
#line 2375 "bt_parser.c"
        break;
      case 26: /* custom_var_decl ::= */
      case 28: /* args_decl ::= */ yytestcase(yyruleno==28);
      case 46: /* var_list ::= */ yytestcase(yyruleno==46);
      case 49: /* var_list_no_assign ::= */ yytestcase(yyruleno==49);
      case 100: /* struct_stms ::= */ yytestcase(yyruleno==100);
      case 125: /* case_stms ::= */ yytestcase(yyruleno==125);
      case 131: /* stm_list ::= */ yytestcase(yyruleno==131);
#line 94 "bt_parser.y"
{ yymsp[1].minor.yy121 = new NodeList(); }
#line 2386 "bt_parser.c"
        break;
      case 29: /* var_decl ::= CONST type var var_list SEMICOLON */
#line 103 "bt_parser.y"
{ yymsp[-2].minor.yy131->type = yymsp[-3].minor.yy179; yymsp[-2].minor.yy131->is_const = true; yymsp[-2].minor.yy131->names = *yymsp[-1].minor.yy121; yymsp[-4].minor.yy225 = yymsp[-2].minor.yy131; delete yymsp[-1].minor.yy121; }
#line 2391 "bt_parser.c"
        break;
      case 30: /* var_decl ::= CONST id var var_list SEMICOLON */
#line 104 "bt_parser.y"
{ yymsp[-2].minor.yy131->type = new NType(yymsp[-3].minor.yy132); yymsp[-2].minor.yy131->is_const = true; yymsp[-2].minor.yy131->names = *yymsp[-1].minor.yy121; yymsp[-4].minor.yy225 = yymsp[-2].minor.yy131; delete yymsp[-1].minor.yy121; }
#line 2396 "bt_parser.c"
        break;
      case 31: /* var_decl ::= LOCAL type var var_list SEMICOLON */
#line 105 "bt_parser.y"
{ yymsp[-2].minor.yy131->type = yymsp[-3].minor.yy179; yymsp[-2].minor.yy131->is_local = true; yymsp[-2].minor.yy131->names = *yymsp[-1].minor.yy121; yymsp[-4].minor.yy225 = yymsp[-2].minor.yy131; delete yymsp[-1].minor.yy121; }
#line 2401 "bt_parser.c"
        break;
      case 32: /* var_decl ::= LOCAL id var var_list SEMICOLON */
#line 106 "bt_parser.y"
{ yymsp[-2].minor.yy131->type = new NType(yymsp[-3].minor.yy132); yymsp[-2].minor.yy131->is_local = true; yymsp[-2].minor.yy131->names = *yymsp[-1].minor.yy121; yymsp[-4].minor.yy225 = yymsp[-2].minor.yy131; delete yymsp[-1].minor.yy121; }
#line 2406 "bt_parser.c"
        break;
      case 33: /* var_decl ::= type var_no_assign var_list_no_assign custom_var_decl SEMICOLON */
#line 107 "bt_parser.y"
{ yymsp[-3].minor.yy131->type = yymsp[-4].minor.yy179; yymsp[-3].minor.yy131->custom_vars = *yymsp[-1].minor.yy121; yymsp[-3].minor.yy131->names = *yymsp[-2].minor.yy121; yylhsminor.yy225 = yymsp[-3].minor.yy131; delete yymsp[-2].minor.yy121; delete yymsp[-1].minor.yy121; }
#line 2411 "bt_parser.c"
  yymsp[-4].minor.yy225 = yylhsminor.yy225;
        break;
      case 34: /* var_decl ::= id var_no_assign var_list_no_assign custom_var_decl SEMICOLON */
#line 108 "bt_parser.y"
{ yymsp[-3].minor.yy131->type = new NType(yymsp[-4].minor.yy132); yymsp[-3].minor.yy131->names = *yymsp[-2].minor.yy121; yymsp[-3].minor.yy131->custom_vars = *yymsp[-1].minor.yy121; yylhsminor.yy225 = yymsp[-3].minor.yy131; delete yymsp[-2].minor.yy121; delete yymsp[-1].minor.yy121; }
#line 2417 "bt_parser.c"
  yymsp[-4].minor.yy225 = yylhsminor.yy225;
        break;
      case 35: /* var ::= id array */
      case 37: /* var_no_assign ::= id array */ yytestcase(yyruleno==37);
#line 110 "bt_parser.y"
{ yylhsminor.yy131 = new NVariable(yymsp[-1].minor.yy132, yymsp[0].minor.yy225); }
#line 2424 "bt_parser.c"
  yymsp[-1].minor.yy131 = yylhsminor.yy131;
        break;
      case 36: /* var ::= id array ASSIGN op_if */
#line 111 "bt_parser.y"
{ yylhsminor.yy131 = new NVariable(yymsp[-3].minor.yy132, yymsp[-2].minor.yy225); yylhsminor.yy131->value = yymsp[0].minor.yy225; }
#line 2430 "bt_parser.c"
  yymsp[-3].minor.yy131 = yylhsminor.yy131;
        break;
      case 38: /* var_no_assign ::= id COLON number */
#line 114 "bt_parser.y"
{ yylhsminor.yy131 = new NVariable(yymsp[-2].minor.yy132, NULL, yymsp[0].minor.yy225); }
#line 2436 "bt_parser.c"
  yymsp[-2].minor.yy131 = yylhsminor.yy131;
        break;
      case 39: /* var_no_assign ::= id O_ROUND expr C_ROUND */
#line 115 "bt_parser.y"
{ yylhsminor.yy131 = new NVariable(yymsp[-3].minor.yy132, NULL); yylhsminor.yy131->constructor = *yymsp[-1].minor.yy121; delete yymsp[-1].minor.yy121; }
#line 2442 "bt_parser.c"
  yymsp[-3].minor.yy131 = yylhsminor.yy131;
        break;
      case 40: /* var_no_assign ::= COLON number */
#line 116 "bt_parser.y"
{ yymsp[-1].minor.yy131 = new NVariable(yymsp[0].minor.yy225); }
#line 2448 "bt_parser.c"
        break;
      case 41: /* array ::= O_SQUARE expr C_SQUARE */
      case 189: /* value ::= O_ROUND expr C_ROUND */ yytestcase(yyruleno==189);
#line 118 "bt_parser.y"
{ yymsp[-2].minor.yy225 = new NBlock(*yymsp[-1].minor.yy121); delete yymsp[-1].minor.yy121; }
#line 2454 "bt_parser.c"
        break;
      case 42: /* array ::= O_SQUARE C_SQUARE */
#line 119 "bt_parser.y"
{ yymsp[-1].minor.yy225 = new NBlock(); }
#line 2459 "bt_parser.c"
        break;
      case 43: /* array ::= */
#line 120 "bt_parser.y"
{ yymsp[1].minor.yy225 = NULL; }
#line 2464 "bt_parser.c"
        break;
      case 44: /* var_list ::= var_list COMMA var */
      case 47: /* var_list_no_assign ::= var_list_no_assign COMMA var_no_assign */ yytestcase(yyruleno==47);
#line 122 "bt_parser.y"
{ yymsp[-2].minor.yy121->push_back(yymsp[0].minor.yy131); }
#line 2470 "bt_parser.c"
        break;
      case 45: /* var_list ::= COMMA var */
      case 48: /* var_list_no_assign ::= COMMA var_no_assign */ yytestcase(yyruleno==48);
#line 123 "bt_parser.y"
{ yymsp[-1].minor.yy121 = new NodeList(); yymsp[-1].minor.yy121->push_back(yymsp[0].minor.yy131); }
#line 2476 "bt_parser.c"
        break;
      case 50: /* enum_def ::= enum_def COMMA enum_val */
      case 132: /* expr ::= expr COMMA op_assign */ yytestcase(yyruleno==132);
#line 134 "bt_parser.y"
{ yymsp[-2].minor.yy121->push_back(yymsp[0].minor.yy225); }
#line 2482 "bt_parser.c"
        break;
      case 52: /* enum_val ::= id ASSIGN number */
#line 137 "bt_parser.y"
{ yylhsminor.yy225 = new NEnumValue(yymsp[-2].minor.yy132, yymsp[0].minor.yy225); }
#line 2487 "bt_parser.c"
  yymsp[-2].minor.yy225 = yylhsminor.yy225;
        break;
      case 53: /* enum_val ::= id */
#line 138 "bt_parser.y"
{ yylhsminor.yy225 = new NEnumValue(yymsp[0].minor.yy132); }
#line 2493 "bt_parser.c"
  yymsp[0].minor.yy225 = yylhsminor.yy225;
        break;
      case 54: /* enum_type ::= LT type GT */
#line 140 "bt_parser.y"
{ yymsp[-2].minor.yy179 = yymsp[-1].minor.yy179; }
#line 2499 "bt_parser.c"
        break;
      case 55: /* enum_type ::= */
#line 141 "bt_parser.y"
{ yymsp[1].minor.yy179 = NULL; }
#line 2504 "bt_parser.c"
        break;
      case 56: /* custom_vars ::= custom_vars COMMA custom_var */
#line 147 "bt_parser.y"
{ yymsp[-2].minor.yy121->push_back(yymsp[0].minor.yy294); }
#line 2509 "bt_parser.c"
        break;
      case 57: /* custom_vars ::= custom_var */
#line 148 "bt_parser.y"
{ yylhsminor.yy121 = new NodeList(); yylhsminor.yy121->push_back(yymsp[0].minor.yy294); }
#line 2514 "bt_parser.c"
  yymsp[0].minor.yy121 = yylhsminor.yy121;
        break;
      case 58: /* custom_var ::= IDENTIFIER ASSIGN id */
#line 150 "bt_parser.y"
{ yylhsminor.yy294 = new NCustomVariable(yymsp[-2].minor.yy0->value, yymsp[0].minor.yy132); }
#line 2520 "bt_parser.c"
  yymsp[-2].minor.yy294 = yylhsminor.yy294;
        break;
      case 59: /* custom_var ::= IDENTIFIER ASSIGN literal */
#line 151 "bt_parser.y"
{ yylhsminor.yy294 = new NCustomVariable(yymsp[-2].minor.yy0->value, yymsp[0].minor.yy225); }
#line 2526 "bt_parser.c"
  yymsp[-2].minor.yy294 = yylhsminor.yy294;
        break;
      case 60: /* type ::= sign scalar */
#line 153 "bt_parser.y"
{ if(yymsp[-1].minor.yy124 != -1) yymsp[0].minor.yy237->is_signed = yymsp[-1].minor.yy124; yylhsminor.yy179 = yymsp[0].minor.yy237; }
#line 2532 "bt_parser.c"
  yymsp[-1].minor.yy179 = yylhsminor.yy179;
        break;
      case 61: /* type ::= sign character */
#line 154 "bt_parser.y"
{ yymsp[-1].minor.yy179 = yymsp[0].minor.yy179; }
#line 2538 "bt_parser.c"
        break;
      case 62: /* type ::= string */
      case 63: /* type ::= datetime */ yytestcase(yyruleno==63);
      case 78: /* string ::= character */ yytestcase(yyruleno==78);
#line 155 "bt_parser.y"
{ yylhsminor.yy179 = yymsp[0].minor.yy179; }
#line 2545 "bt_parser.c"
  yymsp[0].minor.yy179 = yylhsminor.yy179;
        break;
      case 64: /* type ::= STRUCT id args_decl O_CURLY struct_stms C_CURLY */
#line 157 "bt_parser.y"
{ yymsp[-5].minor.yy179 = new NStruct(yymsp[-4].minor.yy132, *yymsp[-3].minor.yy121, *yymsp[-1].minor.yy121); delete yymsp[-3].minor.yy121; delete yymsp[-1].minor.yy121; }
#line 2551 "bt_parser.c"
        break;
      case 65: /* type ::= UNION id args_decl O_CURLY struct_stms C_CURLY */
#line 158 "bt_parser.y"
{ yymsp[-5].minor.yy179 = new NUnion(yymsp[-4].minor.yy132, *yymsp[-3].minor.yy121, *yymsp[-1].minor.yy121); delete yymsp[-3].minor.yy121; delete yymsp[-1].minor.yy121; }
#line 2556 "bt_parser.c"
        break;
      case 66: /* type ::= ENUM enum_type id O_CURLY enum_def C_CURLY */
#line 159 "bt_parser.y"
{ yymsp[-5].minor.yy179 = new NEnum(yymsp[-3].minor.yy132, *yymsp[-1].minor.yy121, yymsp[-4].minor.yy179); delete yymsp[-1].minor.yy121; }
#line 2561 "bt_parser.c"
        break;
      case 67: /* type ::= ENUM enum_type O_CURLY enum_def C_CURLY */
      case 68: /* type ::= ENUM type O_CURLY enum_def C_CURLY */ yytestcase(yyruleno==68);
#line 160 "bt_parser.y"
{ yymsp[-4].minor.yy179 = new NEnum(*yymsp[-1].minor.yy121, yymsp[-3].minor.yy179); delete yymsp[-1].minor.yy121; }
#line 2567 "bt_parser.c"
        break;
      case 69: /* type ::= STRUCT args_decl O_CURLY struct_stms C_CURLY */
#line 162 "bt_parser.y"
{ yymsp[-4].minor.yy179 = new NStruct(*yymsp[-3].minor.yy121, *yymsp[-1].minor.yy121); delete yymsp[-3].minor.yy121; delete yymsp[-1].minor.yy121; }
#line 2572 "bt_parser.c"
        break;
      case 70: /* type ::= UNION args_decl O_CURLY struct_stms C_CURLY */
#line 163 "bt_parser.y"
{ yymsp[-4].minor.yy179 = new NUnion(*yymsp[-3].minor.yy121, *yymsp[-1].minor.yy121); delete yymsp[-3].minor.yy121; delete yymsp[-1].minor.yy121; }
#line 2577 "bt_parser.c"
        break;
      case 71: /* type ::= VOID */
#line 164 "bt_parser.y"
{ yylhsminor.yy179 = new NType(yymsp[0].minor.yy0->value); }
#line 2582 "bt_parser.c"
  yymsp[0].minor.yy179 = yylhsminor.yy179;
        break;
      case 72: /* type ::= BOOL */
#line 165 "bt_parser.y"
{ yylhsminor.yy179 = new NBooleanType(yymsp[0].minor.yy0->value); }
#line 2588 "bt_parser.c"
  yymsp[0].minor.yy179 = yylhsminor.yy179;
        break;
      case 73: /* sign ::= UNSIGNED */
#line 167 "bt_parser.y"
{ yymsp[0].minor.yy124 =  0; }
#line 2594 "bt_parser.c"
        break;
      case 74: /* sign ::= SIGNED */
#line 168 "bt_parser.y"
{ yymsp[0].minor.yy124 =  1; }
#line 2599 "bt_parser.c"
        break;
      case 75: /* sign ::= */
#line 169 "bt_parser.y"
{ yymsp[1].minor.yy124 = -1; }
#line 2604 "bt_parser.c"
        break;
      case 76: /* string ::= WSTRING */
      case 77: /* string ::= STRING */ yytestcase(yyruleno==77);
#line 171 "bt_parser.y"
{ yylhsminor.yy179 = new NStringType(yymsp[0].minor.yy0->value); }
#line 2610 "bt_parser.c"
  yymsp[0].minor.yy179 = yylhsminor.yy179;
        break;
      case 79: /* character ::= CHAR */
      case 80: /* character ::= WCHAR */ yytestcase(yyruleno==80);
      case 81: /* character ::= BYTE */ yytestcase(yyruleno==81);
#line 175 "bt_parser.y"
{ yylhsminor.yy179 = new NCharType(yymsp[0].minor.yy0->value); }
#line 2618 "bt_parser.c"
  yymsp[0].minor.yy179 = yylhsminor.yy179;
        break;
      case 82: /* datetime ::= TIME */
#line 179 "bt_parser.y"
{ yylhsminor.yy179 = new NTime(yymsp[0].minor.yy0->value); }
#line 2624 "bt_parser.c"
  yymsp[0].minor.yy179 = yylhsminor.yy179;
        break;
      case 83: /* datetime ::= DOSDATE */
#line 180 "bt_parser.y"
{ yylhsminor.yy179 = new NDosDate(yymsp[0].minor.yy0->value); }
#line 2630 "bt_parser.c"
  yymsp[0].minor.yy179 = yylhsminor.yy179;
        break;
      case 84: /* datetime ::= DOSTIME */
#line 181 "bt_parser.y"
{ yylhsminor.yy179 = new NDosTime(yymsp[0].minor.yy0->value); }
#line 2636 "bt_parser.c"
  yymsp[0].minor.yy179 = yylhsminor.yy179;
        break;
      case 85: /* datetime ::= OLETIME */
#line 182 "bt_parser.y"
{ yylhsminor.yy179 = new NOleTime(yymsp[0].minor.yy0->value); }
#line 2642 "bt_parser.c"
  yymsp[0].minor.yy179 = yylhsminor.yy179;
        break;
      case 86: /* datetime ::= FILETIME */
#line 183 "bt_parser.y"
{ yylhsminor.yy179 = new NFileTime(yymsp[0].minor.yy0->value); }
#line 2648 "bt_parser.c"
  yymsp[0].minor.yy179 = yylhsminor.yy179;
        break;
      case 87: /* scalar ::= UCHAR */
      case 88: /* scalar ::= UBYTE */ yytestcase(yyruleno==88);
#line 185 "bt_parser.y"
{ yylhsminor.yy237 = new NScalarType(yymsp[0].minor.yy0->value, 8);  yylhsminor.yy237->is_signed = false; }
#line 2655 "bt_parser.c"
  yymsp[0].minor.yy237 = yylhsminor.yy237;
        break;
      case 89: /* scalar ::= SHORT */
#line 187 "bt_parser.y"
{ yylhsminor.yy237 = new NScalarType(yymsp[0].minor.yy0->value, 16); }
#line 2661 "bt_parser.c"
  yymsp[0].minor.yy237 = yylhsminor.yy237;
        break;
      case 90: /* scalar ::= USHORT */
#line 188 "bt_parser.y"
{ yylhsminor.yy237 = new NScalarType(yymsp[0].minor.yy0->value, 16); yylhsminor.yy237->is_signed = false; }
#line 2667 "bt_parser.c"
  yymsp[0].minor.yy237 = yylhsminor.yy237;
        break;
      case 91: /* scalar ::= INT32 */
#line 189 "bt_parser.y"
{ yylhsminor.yy237 = new NScalarType(yymsp[0].minor.yy0->value, 32); }
#line 2673 "bt_parser.c"
  yymsp[0].minor.yy237 = yylhsminor.yy237;
        break;
      case 92: /* scalar ::= UINT32 */
#line 190 "bt_parser.y"
{ yylhsminor.yy237 = new NScalarType(yymsp[0].minor.yy0->value, 32); yylhsminor.yy237->is_signed = false; }
#line 2679 "bt_parser.c"
  yymsp[0].minor.yy237 = yylhsminor.yy237;
        break;
      case 93: /* scalar ::= INT64 */
#line 191 "bt_parser.y"
{ yylhsminor.yy237 = new NScalarType(yymsp[0].minor.yy0->value, 64); }
#line 2685 "bt_parser.c"
  yymsp[0].minor.yy237 = yylhsminor.yy237;
        break;
      case 94: /* scalar ::= UINT64 */
#line 192 "bt_parser.y"
{ yylhsminor.yy237 = new NScalarType(yymsp[0].minor.yy0->value, 64); yylhsminor.yy237->is_signed = false; }
#line 2691 "bt_parser.c"
  yymsp[0].minor.yy237 = yylhsminor.yy237;
        break;
      case 95: /* scalar ::= HFLOAT */
#line 193 "bt_parser.y"
{ yylhsminor.yy237 = new NScalarType(yymsp[0].minor.yy0->value, 16); yylhsminor.yy237->is_fp = true; }
#line 2697 "bt_parser.c"
  yymsp[0].minor.yy237 = yylhsminor.yy237;
        break;
      case 96: /* scalar ::= FLOAT */
#line 194 "bt_parser.y"
{ yylhsminor.yy237 = new NScalarType(yymsp[0].minor.yy0->value, 32); yylhsminor.yy237->is_fp = true; }
#line 2703 "bt_parser.c"
  yymsp[0].minor.yy237 = yylhsminor.yy237;
        break;
      case 97: /* scalar ::= DOUBLE */
#line 195 "bt_parser.y"
{ yylhsminor.yy237 = new NScalarType(yymsp[0].minor.yy0->value, 64); yylhsminor.yy237->is_fp = true; }
#line 2709 "bt_parser.c"
  yymsp[0].minor.yy237 = yylhsminor.yy237;
        break;
      case 101: /* stm ::= IF O_ROUND expr C_ROUND stm */
#line 205 "bt_parser.y"
{ yymsp[-4].minor.yy225 = new NConditional(new NBlock(*yymsp[-2].minor.yy121), yymsp[0].minor.yy225); delete yymsp[-2].minor.yy121; }
#line 2715 "bt_parser.c"
        break;
      case 102: /* stm ::= IF O_ROUND expr C_ROUND then_stm ELSE stm */
      case 106: /* then_stm ::= IF O_ROUND expr C_ROUND then_stm ELSE then_stm */ yytestcase(yyruleno==106);
#line 206 "bt_parser.y"
{ yymsp[-6].minor.yy225 = new NConditional(new NBlock(*yymsp[-4].minor.yy121), yymsp[-2].minor.yy225, yymsp[0].minor.yy225); delete yymsp[-4].minor.yy121; }
#line 2721 "bt_parser.c"
        break;
      case 103: /* stm ::= WHILE O_ROUND expr C_ROUND stm */
      case 107: /* then_stm ::= WHILE O_ROUND expr C_ROUND then_stm */ yytestcase(yyruleno==107);
#line 207 "bt_parser.y"
{ yymsp[-4].minor.yy225 = new NWhile(new NBlock(*yymsp[-2].minor.yy121), yymsp[0].minor.yy225); delete yymsp[-2].minor.yy121; }
#line 2727 "bt_parser.c"
        break;
      case 104: /* stm ::= FOR O_ROUND arg SEMICOLON arg SEMICOLON arg C_ROUND stm */
      case 108: /* then_stm ::= FOR O_ROUND arg SEMICOLON arg SEMICOLON arg C_ROUND then_stm */ yytestcase(yyruleno==108);
#line 208 "bt_parser.y"
{ yymsp[-8].minor.yy225 = new NFor(yymsp[-6].minor.yy225, yymsp[-4].minor.yy225, yymsp[-2].minor.yy225, yymsp[0].minor.yy225); }
#line 2733 "bt_parser.c"
        break;
      case 110: /* normal_stm ::= DO stm WHILE O_ROUND expr C_ROUND SEMICOLON */
#line 216 "bt_parser.y"
{ yymsp[-6].minor.yy225 = new NDoWhile(yymsp[-5].minor.yy225, new NBlock(*yymsp[-2].minor.yy121)); delete yymsp[-2].minor.yy121; }
#line 2738 "bt_parser.c"
        break;
      case 111: /* normal_stm ::= SWITCH O_ROUND expr C_ROUND O_CURLY case_stms C_CURLY */
#line 217 "bt_parser.y"
{ yymsp[-6].minor.yy225 = new NSwitch(new NBlock(*yymsp[-4].minor.yy121), *yymsp[-1].minor.yy121); delete yymsp[-4].minor.yy121, delete yymsp[-1].minor.yy121; }
#line 2743 "bt_parser.c"
        break;
      case 113: /* normal_stm ::= block */
#line 219 "bt_parser.y"
{ yylhsminor.yy225 = yymsp[0].minor.yy220; }
#line 2748 "bt_parser.c"
  yymsp[0].minor.yy225 = yylhsminor.yy225;
        break;
      case 115: /* normal_stm ::= expr SEMICOLON */
#line 221 "bt_parser.y"
{ yylhsminor.yy225 = new NBlock(*yymsp[-1].minor.yy121); delete yymsp[-1].minor.yy121; }
#line 2754 "bt_parser.c"
  yymsp[-1].minor.yy225 = yylhsminor.yy225;
        break;
      case 116: /* normal_stm ::= BREAK SEMICOLON */
#line 222 "bt_parser.y"
{ yymsp[-1].minor.yy225 = new NVMState(VMState::Break); }
#line 2760 "bt_parser.c"
        break;
      case 117: /* normal_stm ::= CONTINUE SEMICOLON */
#line 223 "bt_parser.y"
{ yymsp[-1].minor.yy225 = new NVMState(VMState::Continue); }
#line 2765 "bt_parser.c"
        break;
      case 118: /* normal_stm ::= SEMICOLON */
#line 224 "bt_parser.y"
{ yymsp[0].minor.yy225 = new NBlock(); }
#line 2770 "bt_parser.c"
        break;
      case 119: /* return_stm ::= RETURN expr SEMICOLON */
#line 226 "bt_parser.y"
{ yymsp[-2].minor.yy225 = new NReturn(new NBlock(*yymsp[-1].minor.yy121)); delete yymsp[-1].minor.yy121; }
#line 2775 "bt_parser.c"
        break;
      case 120: /* return_stm ::= RETURN SEMICOLON */
#line 227 "bt_parser.y"
{ yymsp[-1].minor.yy225 = new NReturn(new NBlock()); }
#line 2780 "bt_parser.c"
        break;
      case 121: /* arg ::= expr */
#line 229 "bt_parser.y"
{ yylhsminor.yy225 = new NBlock(*yymsp[0].minor.yy121); delete yymsp[0].minor.yy121; }
#line 2785 "bt_parser.c"
  yymsp[0].minor.yy225 = yylhsminor.yy225;
        break;
      case 122: /* arg ::= */
#line 230 "bt_parser.y"
{ yymsp[1].minor.yy225 = new NBlock(); }
#line 2791 "bt_parser.c"
        break;
      case 126: /* case_stm ::= CASE value COLON stm_list */
#line 236 "bt_parser.y"
{ yymsp[-3].minor.yy225 = new NCase(yymsp[-2].minor.yy225, new NBlock(*yymsp[0].minor.yy121)); delete yymsp[0].minor.yy121; }
#line 2796 "bt_parser.c"
        break;
      case 127: /* case_stm ::= DEFAULT COLON stm_list */
#line 237 "bt_parser.y"
{ yymsp[-2].minor.yy225 = new NCase(new NBlock(*yymsp[0].minor.yy121)); delete yymsp[0].minor.yy121; }
#line 2801 "bt_parser.c"
        break;
      case 128: /* block ::= O_CURLY stm_list C_CURLY */
#line 239 "bt_parser.y"
{ yymsp[-2].minor.yy220 = new NBlock(*yymsp[-1].minor.yy121); delete yymsp[-1].minor.yy121; }
#line 2806 "bt_parser.c"
        break;
      case 134: /* op_assign ::= op_if ASSIGN op_assign */
      case 135: /* op_assign ::= op_if ADD_ASSIGN op_assign */ yytestcase(yyruleno==135);
      case 136: /* op_assign ::= op_if SUB_ASSIGN op_assign */ yytestcase(yyruleno==136);
      case 137: /* op_assign ::= op_if MUL_ASSIGN op_assign */ yytestcase(yyruleno==137);
      case 138: /* op_assign ::= op_if DIV_ASSIGN op_assign */ yytestcase(yyruleno==138);
      case 139: /* op_assign ::= op_if XOR_ASSIGN op_assign */ yytestcase(yyruleno==139);
      case 140: /* op_assign ::= op_if AND_ASSIGN op_assign */ yytestcase(yyruleno==140);
      case 141: /* op_assign ::= op_if OR_ASSIGN op_assign */ yytestcase(yyruleno==141);
      case 142: /* op_assign ::= op_if LS_ASSIGN op_assign */ yytestcase(yyruleno==142);
      case 143: /* op_assign ::= op_if RS_ASSIGN op_assign */ yytestcase(yyruleno==143);
      case 147: /* op_or ::= op_or LOG_OR op_and */ yytestcase(yyruleno==147);
      case 149: /* op_and ::= op_and LOG_AND op_binor */ yytestcase(yyruleno==149);
      case 151: /* op_binor ::= op_binor BIN_OR op_binxor */ yytestcase(yyruleno==151);
      case 153: /* op_binxor ::= op_binxor BIN_XOR op_binand */ yytestcase(yyruleno==153);
      case 155: /* op_binand ::= op_binand BIN_AND op_equate */ yytestcase(yyruleno==155);
      case 165: /* op_shift ::= op_shift LSL op_add */ yytestcase(yyruleno==165);
      case 166: /* op_shift ::= op_shift LSR op_add */ yytestcase(yyruleno==166);
      case 168: /* op_add ::= op_add ADD op_mult */ yytestcase(yyruleno==168);
      case 169: /* op_add ::= op_add SUB op_mult */ yytestcase(yyruleno==169);
      case 171: /* op_mult ::= op_mult MUL op_unary */ yytestcase(yyruleno==171);
      case 172: /* op_mult ::= op_mult DIV op_unary */ yytestcase(yyruleno==172);
      case 173: /* op_mult ::= op_mult MOD op_unary */ yytestcase(yyruleno==173);
#line 252 "bt_parser.y"
{ yylhsminor.yy225 = new NBinaryOperator(yymsp[-2].minor.yy225, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy225); }
#line 2832 "bt_parser.c"
  yymsp[-2].minor.yy225 = yylhsminor.yy225;
        break;
      case 145: /* op_if ::= op_or QUESTION op_if COLON op_if */
#line 264 "bt_parser.y"
{ yylhsminor.yy225 = new NConditional(yymsp[-4].minor.yy225, yymsp[-2].minor.yy225, yymsp[0].minor.yy225); }
#line 2838 "bt_parser.c"
  yymsp[-4].minor.yy225 = yylhsminor.yy225;
        break;
      case 157: /* op_equate ::= op_equate EQ op_compare */
      case 158: /* op_equate ::= op_equate NE op_compare */ yytestcase(yyruleno==158);
      case 160: /* op_compare ::= op_compare LT op_shift */ yytestcase(yyruleno==160);
      case 161: /* op_compare ::= op_compare GT op_shift */ yytestcase(yyruleno==161);
      case 162: /* op_compare ::= op_compare LE op_shift */ yytestcase(yyruleno==162);
      case 163: /* op_compare ::= op_compare GE op_shift */ yytestcase(yyruleno==163);
#line 282 "bt_parser.y"
{ yylhsminor.yy225 = new NCompareOperator(yymsp[-2].minor.yy225, yymsp[0].minor.yy225, yymsp[-1].minor.yy0->value); }
#line 2849 "bt_parser.c"
  yymsp[-2].minor.yy225 = yylhsminor.yy225;
        break;
      case 175: /* op_unary ::= LOG_NOT op_unary */
      case 176: /* op_unary ::= BIN_NOT op_unary */ yytestcase(yyruleno==176);
      case 177: /* op_unary ::= SUB op_unary */ yytestcase(yyruleno==177);
      case 178: /* op_unary ::= INC op_unary */ yytestcase(yyruleno==178);
      case 179: /* op_unary ::= DEC op_unary */ yytestcase(yyruleno==179);
#line 305 "bt_parser.y"
{ yylhsminor.yy225 = new NUnaryOperator(yymsp[-1].minor.yy0->value, yymsp[0].minor.yy225, true); }
#line 2859 "bt_parser.c"
  yymsp[-1].minor.yy225 = yylhsminor.yy225;
        break;
      case 180: /* op_unary ::= op_unary INC */
      case 181: /* op_unary ::= op_unary DEC */ yytestcase(yyruleno==181);
#line 310 "bt_parser.y"
{ yylhsminor.yy225 = new NUnaryOperator(yymsp[0].minor.yy0->value, yymsp[-1].minor.yy225, false); }
#line 2866 "bt_parser.c"
  yymsp[-1].minor.yy225 = yylhsminor.yy225;
        break;
      case 182: /* op_unary ::= O_ROUND type C_ROUND op_unary */
#line 312 "bt_parser.y"
{ yymsp[-3].minor.yy225 = new NCast(yymsp[-2].minor.yy179, yymsp[0].minor.yy225); }
#line 2872 "bt_parser.c"
        break;
      case 183: /* op_unary ::= SIZEOF O_ROUND type C_ROUND */
#line 313 "bt_parser.y"
{ yymsp[-3].minor.yy225 = new NSizeOf(yymsp[-1].minor.yy179); }
#line 2877 "bt_parser.c"
        break;
      case 184: /* op_unary ::= SIZEOF O_ROUND op_assign C_ROUND */
#line 314 "bt_parser.y"
{ yymsp[-3].minor.yy225 = new NSizeOf(yymsp[-1].minor.yy225); }
#line 2882 "bt_parser.c"
        break;
      case 186: /* op_pointer ::= op_pointer DOT id */
#line 317 "bt_parser.y"
{ yylhsminor.yy225 = new NDotOperator(yymsp[-2].minor.yy225, yymsp[0].minor.yy132); }
#line 2887 "bt_parser.c"
  yymsp[-2].minor.yy225 = yylhsminor.yy225;
        break;
      case 187: /* op_pointer ::= op_pointer O_SQUARE expr C_SQUARE */
#line 318 "bt_parser.y"
{ yylhsminor.yy225 = new NIndexOperator(yymsp[-3].minor.yy225, new NBlock(*yymsp[-1].minor.yy121)); delete yymsp[-1].minor.yy121; }
#line 2893 "bt_parser.c"
  yymsp[-3].minor.yy225 = yylhsminor.yy225;
        break;
      case 190: /* value ::= id O_ROUND expr C_ROUND */
#line 326 "bt_parser.y"
{ yylhsminor.yy225 = new NCall(yymsp[-3].minor.yy132, *yymsp[-1].minor.yy121); delete yymsp[-1].minor.yy121; }
#line 2899 "bt_parser.c"
  yymsp[-3].minor.yy225 = yylhsminor.yy225;
        break;
      case 191: /* value ::= id O_ROUND C_ROUND */
#line 327 "bt_parser.y"
{ yylhsminor.yy225 = new NCall(yymsp[-2].minor.yy132); }
#line 2905 "bt_parser.c"
  yymsp[-2].minor.yy225 = yylhsminor.yy225;
        break;
      case 192: /* value ::= id */
#line 328 "bt_parser.y"
{ yylhsminor.yy225 = yymsp[0].minor.yy132; }
#line 2911 "bt_parser.c"
  yymsp[0].minor.yy225 = yylhsminor.yy225;
        break;
      case 194: /* literal ::= LITERAL_STRING */
#line 331 "bt_parser.y"
{ yylhsminor.yy225 = new NString(yymsp[0].minor.yy0->value); }
#line 2917 "bt_parser.c"
  yymsp[0].minor.yy225 = yylhsminor.yy225;
        break;
      case 197: /* number ::= LITERAL_CHAR */
      case 198: /* number ::= LITERAL_OCT */ yytestcase(yyruleno==198);
#line 335 "bt_parser.y"
{ yylhsminor.yy225 = new NInteger(VMFunctions::string_to_number(yymsp[0].minor.yy0->value, 8)); }
#line 2924 "bt_parser.c"
  yymsp[0].minor.yy225 = yylhsminor.yy225;
        break;
      case 199: /* number ::= LITERAL_DEC */
#line 337 "bt_parser.y"
{ yylhsminor.yy225 = new NInteger(VMFunctions::string_to_number(yymsp[0].minor.yy0->value, 10)); }
#line 2930 "bt_parser.c"
  yymsp[0].minor.yy225 = yylhsminor.yy225;
        break;
      case 200: /* number ::= LITERAL_HEX */
#line 338 "bt_parser.y"
{ yylhsminor.yy225 = new NInteger(VMFunctions::string_to_number(yymsp[0].minor.yy0->value, 16)); }
#line 2936 "bt_parser.c"
  yymsp[0].minor.yy225 = yylhsminor.yy225;
        break;
      case 201: /* number ::= LITERAL_REAL */
#line 339 "bt_parser.y"
{ yylhsminor.yy225 = new NReal(VMFunctions::string_to_number(yymsp[0].minor.yy0->value)); }
#line 2942 "bt_parser.c"
  yymsp[0].minor.yy225 = yylhsminor.yy225;
        break;
      case 202: /* boolean ::= TRUE */
#line 341 "bt_parser.y"
{ yymsp[0].minor.yy225 = new NBoolean(true); }
#line 2948 "bt_parser.c"
        break;
      case 203: /* boolean ::= FALSE */
#line 342 "bt_parser.y"
{ yymsp[0].minor.yy225 = new NBoolean(false); }
#line 2953 "bt_parser.c"
        break;
      case 204: /* id ::= IDENTIFIER */
#line 344 "bt_parser.y"
{ yylhsminor.yy132 = new NIdentifier(yymsp[0].minor.yy0->value); }
#line 2958 "bt_parser.c"
  yymsp[0].minor.yy132 = yylhsminor.yy132;
        break;
      default:
        break;
/********** End reduce actions ************************************************/
  };
  assert( yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact <= YY_MAX_SHIFTREDUCE ){
    if( yyact>YY_MAX_SHIFT ){
      yyact += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
    }
    yymsp -= yysize-1;
    yypParser->yytos = yymsp;
    yymsp->stateno = (YYACTIONTYPE)yyact;
    yymsp->major = (YYCODETYPE)yygoto;
    yyTraceShift(yypParser, yyact);
  }else{
    assert( yyact == YY_ACCEPT_ACTION );
    yypParser->yytos -= yysize;
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  BTParserARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
/************ Begin %parse_failure code ***************************************/
/************ End %parse_failure code *****************************************/
  BTParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  BTParserTOKENTYPE yyminor         /* The minor type of the error token */
){
  BTParserARG_FETCH;
#define TOKEN yyminor
/************ Begin %syntax_error code ****************************************/
#line 15 "bt_parser.y"

    VMUnused(yymajor); // Silence compiler warnings
    btvm->syntaxError(TOKEN->value, TOKEN->line);
#line 3022 "bt_parser.c"
/************ End %syntax_error code ******************************************/
  BTParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  BTParserARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  assert( yypParser->yytos==yypParser->yystack );
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
/*********** Begin %parse_accept code *****************************************/
/*********** End %parse_accept code *******************************************/
  BTParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "BTParserAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void BTParser(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  BTParserTOKENTYPE yyminor       /* The value for the token */
  BTParserARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  unsigned int yyact;   /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  yypParser = (yyParser*)yyp;
  assert( yypParser->yytos!=0 );
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  BTParserARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput '%s'\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact <= YY_MAX_SHIFTREDUCE ){
      yy_shift(yypParser,yyact,yymajor,yyminor);
#ifndef YYNOERRORRECOVERY
      yypParser->yyerrcnt--;
#endif
      yymajor = YYNOCODE;
    }else if( yyact <= YY_MAX_REDUCE ){
      yy_reduce(yypParser,yyact-YY_MIN_REDUCE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
      yyminorunion.yy0 = yyminor;
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminor);
      }
      yymx = yypParser->yytos->major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor, &yyminorunion);
        yymajor = YYNOCODE;
      }else{
        while( yypParser->yytos >= yypParser->yystack
            && yymx != YYERRORSYMBOL
            && (yyact = yy_find_reduce_action(
                        yypParser->yytos->stateno,
                        YYERRORSYMBOL)) >= YY_MIN_REDUCE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yytos < yypParser->yystack || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
          yypParser->yyerrcnt = -1;
#endif
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          yy_shift(yypParser,yyact,YYERRORSYMBOL,yyminor);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor, yyminor);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor, yyminor);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
        yypParser->yyerrcnt = -1;
#endif
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yytos>yypParser->yystack );
#ifndef NDEBUG
  if( yyTraceFILE ){
    yyStackEntry *i;
    char cDiv = '[';
    fprintf(yyTraceFILE,"%sReturn. Stack=",yyTracePrompt);
    for(i=&yypParser->yystack[1]; i<=yypParser->yytos; i++){
      fprintf(yyTraceFILE,"%c%s", cDiv, yyTokenName[i->major]);
      cDiv = ' ';
    }
    fprintf(yyTraceFILE,"]\n");
  }
#endif
  return;
}
