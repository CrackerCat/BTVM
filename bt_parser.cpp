/*
** 2000-05-29
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Driver template for the LEMON parser generator.
**
** The "lemon" program processes an LALR(1) input grammar file, then uses
** this template to construct a parser.  The "lemon" program inserts text
** at each "%%" line.  Also, any "P-a-r-s-e" identifer prefix (without the
** interstitial "-" characters) contained in this template is changed into
** the value of the %name directive from the grammar.  Otherwise, the content
** of this template is copied straight through into the generate parser
** source file.
**
** The following is the concatenation of all %include directives from the
** input grammar file:
*/
#include <stdio.h>
/************ Begin %include sections from the grammar ************************/
#line 3 "bt_parser.y"

    #include <cassert>
    #include "btvm/vm/vm_functions.h"
    #include "btvm/btvm.h"
    #include "bt_lexer.h"
#line 34 "bt_parser.c"
/**************** End of %include directives **********************************/
/* These constants specify the various numeric values for terminal symbols
** in a format understandable to "makeheaders".  This section is blank unless
** "lemon" is run with the "-m" command-line option.
***************** Begin makeheaders token definitions *************************/
/**************** End makeheaders token definitions ***************************/

/* The next sections is a series of control #defines.
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used to store the integer codes
**                       that represent terminal and non-terminal symbols.
**                       "unsigned char" is used if there are fewer than
**                       256 symbols.  Larger types otherwise.
**    YYNOCODE           is a number of type YYCODETYPE that is not used for
**                       any terminal or nonterminal symbol.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       (also known as: "terminal symbols") have fall-back
**                       values which should be used if the original symbol
**                       would not parse.  This permits keywords to sometimes
**                       be used as identifiers, for example.
**    YYACTIONTYPE       is the data type used for "action codes" - numbers
**                       that indicate what to do in response to the next
**                       token.
**    BTParserTOKENTYPE     is the data type used for minor type for terminal
**                       symbols.  Background: A "minor type" is a semantic
**                       value associated with a terminal or non-terminal
**                       symbols.  For example, for an "ID" terminal symbol,
**                       the minor type might be the name of the identifier.
**                       Each non-terminal can have a different minor type.
**                       Terminal symbols all have the same minor type, though.
**                       This macros defines the minor type for terminal 
**                       symbols.
**    YYMINORTYPE        is the data type used for all minor types.
**                       This is typically a union of many types, one of
**                       which is BTParserTOKENTYPE.  The entry in the union
**                       for terminal symbols is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    BTParserARG_SDECL     A static variable declaration for the %extra_argument
**    BTParserARG_PDECL     A parameter declaration for the %extra_argument
**    BTParserARG_STORE     Code to store %extra_argument into yypParser
**    BTParserARG_FETCH     Code to extract %extra_argument from yypParser
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YY_MAX_SHIFT       Maximum value for shift actions
**    YY_MIN_SHIFTREDUCE Minimum value for shift-reduce actions
**    YY_MAX_SHIFTREDUCE Maximum value for shift-reduce actions
**    YY_MIN_REDUCE      Maximum value for reduce actions
**    YY_ERROR_ACTION    The yy_action[] code for syntax error
**    YY_ACCEPT_ACTION   The yy_action[] code for accept
**    YY_NO_ACTION       The yy_action[] code for no-op
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/************* Begin control #defines *****************************************/
#define YYCODETYPE unsigned char
#define YYNOCODE 156
#define YYACTIONTYPE unsigned short int
#define BTParserTOKENTYPE  BTLexer::Token* 
typedef union {
  int yyinit;
  BTParserTOKENTYPE yy0;
  NBlock* yy16;
  NType* yy49;
  NCustomVariable* yy82;
  NVariable* yy85;
  NIdentifier* yy188;
  int yy192;
  NodeList* yy247;
  Node* yy291;
  NScalarType* yy292;
  NArgument* yy293;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define BTParserARG_SDECL  BTVM* btvm      ;
#define BTParserARG_PDECL , BTVM* btvm      
#define BTParserARG_FETCH  BTVM* btvm       = yypParser->btvm      
#define BTParserARG_STORE yypParser->btvm       = btvm      
#define YYNSTATE             272
#define YYNRULE              202
#define YY_MAX_SHIFT         271
#define YY_MIN_SHIFTREDUCE   417
#define YY_MAX_SHIFTREDUCE   618
#define YY_MIN_REDUCE        619
#define YY_MAX_REDUCE        820
#define YY_ERROR_ACTION      821
#define YY_ACCEPT_ACTION     822
#define YY_NO_ACTION         823
/************* End control #defines *******************************************/

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N <= YY_MAX_SHIFT             Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   N between YY_MIN_SHIFTREDUCE       Shift to an arbitrary state then
**     and YY_MAX_SHIFTREDUCE           reduce by rule N-YY_MIN_SHIFTREDUCE.
**
**   N between YY_MIN_REDUCE            Reduce by rule N-YY_MIN_REDUCE
**     and YY_MAX_REDUCE
**
**   N == YY_ERROR_ACTION               A syntax error has occurred.
**
**   N == YY_ACCEPT_ACTION              The parser accepts its input.
**
**   N == YY_NO_ACTION                  No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as either:
**
**    (A)   N = yy_action[ yy_shift_ofst[S] + X ]
**    (B)   N = yy_default[S]
**
** The (A) formula is preferred.  The B formula is used instead if:
**    (1)  The yy_shift_ofst[S]+X value is out of range, or
**    (2)  yy_lookahead[yy_shift_ofst[S]+X] is not equal to X, or
**    (3)  yy_shift_ofst[S] equal YY_SHIFT_USE_DFLT.
** (Implementation note: YY_SHIFT_USE_DFLT is chosen so that
** YY_SHIFT_USE_DFLT+X will be out of range for all possible lookaheads X.
** Hence only tests (1) and (2) need to be evaluated.)
**
** The formulas above are for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
**
*********** Begin parsing tables **********************************************/
#define YY_ACTTAB_COUNT (4837)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */    30,   74,   73,  486,  474,  618,  533,  109,   10,  748,
 /*    10 */   108,  151,   94,  234,   91,   90,  476,  611,  477,  475,
 /*    20 */   618,  487,  488,  489,  491,  492,  494,  495,  496,  497,
 /*    30 */   498,  499,  500,  501,  257,  478,  493,  479,  123,  610,
 /*    40 */   612,  613,  614,  615,  139,  253,  100,  244,  243,   28,
 /*    50 */   239,  236,  235,   38,  748,  748,  494,  495,  496,  456,
 /*    60 */   119,   72,   71,  618,  502,  503,  504,  505,  506,  507,
 /*    70 */   508,  509,  510,  511,  512,   42,   77,   86,  539,  167,
 /*    80 */   168,   88,   87,   85,   84,  262,  526,  609,  612,  613,
 /*    90 */   614,  615,  616,  617,   30,  618,  618,  486,  258,  258,
 /*   100 */   533,  109,   10,  744,  108,  151,  117,  454,   91,   90,
 /*   110 */   446,   59,  467,  467,  618,  487,  488,  489,  491,  492,
 /*   120 */   494,  495,  496,  497,  498,  499,  500,  501,   89,   83,
 /*   130 */    82,   94,  234,  147,  468,  464,  228,  143,  124,  253,
 /*   140 */   124,  244,  243,   28,  239,  236,  235,   38,  744,  744,
 /*   150 */   135,   58,   57,   56,   55,   54,   53,   52,   51,   50,
 /*   160 */   191,  149,  609,  612,  613,  614,  615,  616,  617,  473,
 /*   170 */    39,   86,  441,  192,  145,   88,   87,   85,   84,  262,
 /*   180 */   538,  609,  612,  613,  614,  615,  616,  617,   30,   96,
 /*   190 */   618,  486,  258,  224,  533,  109,   10,  743,  108,  151,
 /*   200 */    60,  618,   91,   90,  534,   39,  467,  136,  618,  487,
 /*   210 */   488,  489,  491,  492,  494,  495,  496,  497,  498,  499,
 /*   220 */   500,  501,  119,  463,  150,  618,   60,  150,  124,  124,
 /*   230 */   530,  228,  125,  253,  224,  244,  243,   28,  239,  236,
 /*   240 */   235,   38,  743,  743,  201,  154,   49,  453,  142,  141,
 /*   250 */   152,  478,  493,  479,  430,  157,  157,  478,  493,  479,
 /*   260 */   133,  129,  100,  120,   40,   86,  116,  114,  100,   88,
 /*   270 */    87,   85,   84,  262,  216,  609,  612,  613,  614,  615,
 /*   280 */   616,  617,  619,   30,  618,  258,  486,  259,   92,  533,
 /*   290 */   103,   10,  217,  102,  134,  461,  153,   91,   90,  466,
 /*   300 */   219,  157,  157,  618,  487,  488,  489,  491,  492,  494,
 /*   310 */   495,  496,  497,  498,  499,  500,  501,   98,  644,  486,
 /*   320 */   595,  596,  254,  109,  112,  256,  108,  151,  253,  618,
 /*   330 */   244,  243,   28,  239,  236,  235,   38,  487,  488,  489,
 /*   340 */   491,  492,  494,  495,  496,  497,  498,  499,  500,  501,
 /*   350 */   146,  609,  612,  613,  614,  615,  616,  617,  230,   60,
 /*   360 */    86,   93,  193,  460,   88,   87,   85,   84,  262,  157,
 /*   370 */   609,  612,  613,  614,  615,  616,  617,   30,  145,   77,
 /*   380 */   486,  258,   92,  533,  103,   10,  113,  102,  134,   48,
 /*   390 */   158,   91,   90,  214,  618,  467,  157,  618,  487,  488,
 /*   400 */   489,  491,  492,  494,  495,  496,  497,  498,  499,  500,
 /*   410 */   501,  106,  113,  117,  604,   60,  156,  448,  255,  215,
 /*   420 */    29,  112,  253,  126,  244,  243,   28,  239,  236,  235,
 /*   430 */    38,  611,  618,  608,  238,   60,  218,  120,   40,  603,
 /*   440 */    27,   60,  222,  265,  264,  263,  199,  161,  184,  188,
 /*   450 */   164,  183,  186,  610,   86,  220,  688,  148,   88,   87,
 /*   460 */    85,   84,  262,  112,  609,  612,  613,  614,  615,  616,
 /*   470 */   617,   30,  688,  221,  486,   12,   60,  533,  109,   10,
 /*   480 */   717,  108,  151,   14,   60,   91,   90,   15,   60,   70,
 /*   490 */    69,  618,  487,  488,  489,  491,  492,  494,  495,  496,
 /*   500 */   497,  498,  499,  500,  501,   76,   75,  605,   60,   60,
 /*   510 */    79,   78,  255,  455,   60,   60,  253,   40,  244,  243,
 /*   520 */    28,  239,  236,  235,   38,  611,  602,  608,  113,  113,
 /*   530 */   117,  137,  457,  603,  447,  485,  482,  268,  264,  263,
 /*   540 */   199,  161,  184,  188,  164,  183,  186,  610,   86,  443,
 /*   550 */    80,   10,   88,   87,   85,   84,  262,  428,  609,  612,
 /*   560 */   613,  614,  615,  616,  617,   30,   62,   64,  486,  159,
 /*   570 */    80,  533,  109,   10,  748,  108,  151,  117,  138,   91,
 /*   580 */    90,  445,  115,  169,  225,  618,  487,  488,  489,  491,
 /*   590 */   492,  494,  495,  496,  497,  498,  499,  500,  501,  435,
 /*   600 */   105,  434,  144,  601,  433,  130,  255,  472,  131,  261,
 /*   610 */   253,  132,  244,  243,   28,  239,  236,  235,   38,  611,
 /*   620 */   194,  608,  155,  432,  427,  195,  271,  603,  212,  440,
 /*   630 */   439,  438,  267,  263,  199,  161,  184,  188,  164,  183,
 /*   640 */   186,  610,   86,   97,    4,  437,   88,   87,   85,   84,
 /*   650 */   262,    5,  609,  612,  613,  614,  615,  616,  617,   30,
 /*   660 */   436,   65,  486,   81,    6,  533,  109,   10,  127,  108,
 /*   670 */   151,    7,  599,   91,   90,  598,    8,   25,  525,  618,
 /*   680 */   487,  488,  489,  491,  492,  494,  495,  496,  497,  498,
 /*   690 */   499,  500,  501,   41,  231,    2,   60,  532,  531,    3,
 /*   700 */   255,   43,   32,  104,  253,   33,  244,  243,   28,  239,
 /*   710 */   236,  235,   38,  611,   26,  608,   34,   44,   35,  726,
 /*   720 */    11,  603,   37,   45,   36,   13,   46,  266,  199,  161,
 /*   730 */   184,  188,  164,  183,  186,  610,   86,   47,  450,   39,
 /*   740 */    88,   87,   85,   84,  262,   95,  609,  612,  613,  614,
 /*   750 */   615,  616,  617,   30,  449,   99,  486,  121,  470,  533,
 /*   760 */   109,   10,  128,  108,  151,    9,   31,   91,   90,   68,
 /*   770 */   621,   61,   67,  618,  487,  488,  489,  491,  492,  494,
 /*   780 */   495,  496,  497,  498,  499,  500,  501,   63,   66,  621,
 /*   790 */   621,  621,  621,  621,  255,  621,  621,  621,  253,  621,
 /*   800 */   244,  243,   28,  239,  236,  235,   38,  611,  621,  608,
 /*   810 */   478,  493,  479,  429,  621,  603,  621,  621,  621,  133,
 /*   820 */   129,  100,  210,  161,  184,  188,  164,  183,  186,  610,
 /*   830 */    86,  621,  621,  621,   88,   87,   85,   84,  262,  621,
 /*   840 */   609,  612,  613,  614,  615,  616,  617,   30,  621,  621,
 /*   850 */   486,  621,  621,  533,  109,   10,  543,  108,  151,  621,
 /*   860 */   621,   91,   90,  621,  621,  621,  621,  618,  487,  488,
 /*   870 */   489,  491,  492,  494,  495,  496,  497,  498,  499,  500,
 /*   880 */   501,  621,  621,  621,  621,  621,  621,  621,  255,  621,
 /*   890 */   621,  621,  253,  621,  244,  243,   28,  239,  236,  235,
 /*   900 */    38,  611,  621,  608,  478,  493,  479,  621,  621,  603,
 /*   910 */   621,  621,  621,  118,  111,  100,  621,  162,  184,  188,
 /*   920 */   164,  183,  186,  610,   86,  621,  621,  621,   88,   87,
 /*   930 */    85,   84,  262,  621,  609,  612,  613,  614,  615,  616,
 /*   940 */   617,   30,  621,  621,  486,  621,  621,  533,  109,   10,
 /*   950 */   483,  108,  151,  621,  621,   91,   90,  621,  621,  621,
 /*   960 */   621,  618,  487,  488,  489,  491,  492,  494,  495,  496,
 /*   970 */   497,  498,  499,  500,  501,  621,  621,  621,  621,  621,
 /*   980 */   621,  621,  255,  621,  621,  621,  253,  621,  244,  243,
 /*   990 */    28,  239,  236,  235,   38,  611,  621,  608,  478,  493,
 /*  1000 */   479,  621,  621,  603,  621,  621,  621,  260,  621,  100,
 /*  1010 */   621,  163,  184,  188,  164,  183,  186,  610,   86,  621,
 /*  1020 */   621,  621,   88,   87,   85,   84,  262,  621,  609,  612,
 /*  1030 */   613,  614,  615,  616,  617,   30,  621,  621,  486,  621,
 /*  1040 */   621,  533,  109,   10,  480,  108,  151,  621,  621,   91,
 /*  1050 */    90,  621,  621,  621,  621,  618,  487,  488,  489,  491,
 /*  1060 */   492,  494,  495,  496,  497,  498,  499,  500,  501,  621,
 /*  1070 */   621,  621,  621,  621,  621,  621,  255,  621,  621,  621,
 /*  1080 */   253,  621,  244,  243,   28,  239,  236,  235,   38,  611,
 /*  1090 */   621,  608,  621,  621,  621,  621,  621,  603,  621,  621,
 /*  1100 */   621,  621,  621,  621,  621,  621,  181,  188,  164,  183,
 /*  1110 */   186,  610,   86,  621,  621,  621,   88,   87,   85,   84,
 /*  1120 */   262,  621,  609,  612,  613,  614,  615,  616,  617,   30,
 /*  1130 */   621,  621,  486,  621,  621,  533,  109,   10,  484,  108,
 /*  1140 */   151,  621,  621,   91,   90,  621,  621,  621,  621,  618,
 /*  1150 */   487,  488,  489,  491,  492,  494,  495,  496,  497,  498,
 /*  1160 */   499,  500,  501,  621,  621,  621,  621,  621,  621,  621,
 /*  1170 */   255,  621,  621,  621,  253,  621,  244,  243,   28,  239,
 /*  1180 */   236,  235,   38,  611,  621,  608,  621,  621,  621,  621,
 /*  1190 */   621,  603,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  1200 */   189,  188,  164,  183,  186,  610,   86,  621,  621,  621,
 /*  1210 */    88,   87,   85,   84,  262,  621,  609,  612,  613,  614,
 /*  1220 */   615,  616,  617,   30,  621,  621,  486,  621,  621,  533,
 /*  1230 */   109,   10,  481,  108,  151,  621,  621,   91,   90,  621,
 /*  1240 */   621,  621,  621,  618,  487,  488,  489,  491,  492,  494,
 /*  1250 */   495,  496,  497,  498,  499,  500,  501,  621,  621,  621,
 /*  1260 */   621,  621,  621,  621,  255,  621,  621,  621,  253,  621,
 /*  1270 */   244,  243,   28,  239,  236,  235,   38,  611,  621,  608,
 /*  1280 */   621,  621,  621,  621,  621,  603,  621,  621,  621,  621,
 /*  1290 */   621,  621,  621,  621,  198,  188,  164,  183,  186,  610,
 /*  1300 */    86,  621,  621,  621,   88,   87,   85,   84,  262,  621,
 /*  1310 */   609,  612,  613,  614,  615,  616,  617,   30,  621,  621,
 /*  1320 */   486,  621,  621,  533,  109,   10,  621,  108,  151,  621,
 /*  1330 */   621,   91,   90,  621,  621,  621,  621,  618,  487,  488,
 /*  1340 */   489,  491,  492,  494,  495,  496,  497,  498,  499,  500,
 /*  1350 */   501,  621,  621,  621,  621,  621,  621,  621,  255,  621,
 /*  1360 */   621,  621,  252,  621,  250,  249,   28,  239,  236,  235,
 /*  1370 */    38,  611,  621,  608,  621,  621,  621,  621,  621,  603,
 /*  1380 */   621,  621,  621,  621,  621,  621,  621,  621,  209,  188,
 /*  1390 */   164,  183,  186,  610,   86,  621,  621,  621,   88,   87,
 /*  1400 */    85,   84,  262,  621,  609,  612,  613,  614,  615,  616,
 /*  1410 */   617,   30,  621,  621,  486,  621,  621,  533,  109,   10,
 /*  1420 */   621,  108,  151,  621,  621,   91,   90,  621,  621,  621,
 /*  1430 */   621,  618,  487,  488,  489,  491,  492,  494,  495,  496,
 /*  1440 */   497,  498,  499,  500,  501,  621,  621,  621,  621,  621,
 /*  1450 */   621,  621,  255,  621,  621,  621,  253,  621,  244,  243,
 /*  1460 */    28,  239,  236,  235,   38,  611,  621,  608,  621,  621,
 /*  1470 */   621,  621,  621,  603,  621,  621,  621,  621,  621,  621,
 /*  1480 */   621,  621,  621,  197,  164,  183,  186,  610,   86,  621,
 /*  1490 */   621,  621,   88,   87,   85,   84,  262,  621,  609,  612,
 /*  1500 */   613,  614,  615,  616,  617,    1,  175,  621,  621,  621,
 /*  1510 */   621,  478,  493,  479,  621,  621,  621,  621,  528,  621,
 /*  1520 */   110,  101,  100,  822,  419,  420,  421,  422,  423,  424,
 /*  1530 */   425,  426,  621,  160,  611,  621,  608,  621,  621,  520,
 /*  1540 */   529,  621,  603,  548,  211,  269,  265,  264,  263,  199,
 /*  1550 */   161,  184,  188,  164,  183,  186,  610,  255,  621,  621,
 /*  1560 */   621,  175,  621,  621,  621,  621,  478,  493,  479,  621,
 /*  1570 */   611,  621,  608,  528,  621,  110,  101,  100,  237,  418,
 /*  1580 */   420,  421,  422,  423,  424,  425,  426,  621,  160,  611,
 /*  1590 */   621,  608,  610,  621,  520,  529,  621,  603,  548,  211,
 /*  1600 */   269,  265,  264,  263,  199,  161,  184,  188,  164,  183,
 /*  1610 */   186,  610,   30,  140,  621,  171,  621,  621,  621,  109,
 /*  1620 */   621,  621,  108,  151,  621,  621,  621,  621,  621,  621,
 /*  1630 */   621,  621,  618,  487,  488,  489,  491,  492,  494,  495,
 /*  1640 */   496,  497,  498,  499,  500,  501,   30,  621,  621,  486,
 /*  1650 */   621,  621,  621,  109,  621,  621,  108,  151,  621,  621,
 /*  1660 */   621,  621,  621,  621,  621,  621,  618,  487,  488,  489,
 /*  1670 */   491,  492,  494,  495,  496,  497,  498,  499,  500,  501,
 /*  1680 */   621,  621,  621,  621,  621,  621,  621,  621,  621,   86,
 /*  1690 */   621,  621,  621,   88,   87,   85,   84,  262,  621,  609,
 /*  1700 */   612,  613,  614,  615,  616,  617,  621,  621,  621,  621,
 /*  1710 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  1720 */   621,  621,  621,   86,  621,  621,  621,   88,   87,   85,
 /*  1730 */    84,  262,   16,  609,  612,  613,  614,  615,  616,  617,
 /*  1740 */   175,  621,  621,  621,  621,  478,  493,  479,  621,  621,
 /*  1750 */   621,  621,  528,  621,  107,  101,  100,  621,  621,  621,
 /*  1760 */   621,  621,  621,  527,  621,  545,  621,  160,  611,  621,
 /*  1770 */   608,  621,  621,  520,  529,  621,  603,  548,  211,  269,
 /*  1780 */   265,  264,  263,  199,  161,  184,  188,  164,  183,  186,
 /*  1790 */   610,   17,  621,  621,  621,  621,  621,  621,  621,  175,
 /*  1800 */   621,  621,  621,  621,  478,  493,  479,  621,  621,  621,
 /*  1810 */   621,  528,  621,  107,  101,  100,  621,  621,  621,  621,
 /*  1820 */   621,  621,  527,  621,  545,  621,  160,  611,  621,  608,
 /*  1830 */   621,  621,  520,  529,  621,  603,  548,  211,  269,  265,
 /*  1840 */   264,  263,  199,  161,  184,  188,  164,  183,  186,  610,
 /*  1850 */   621,  621,  621,  621,   18,  621,  621,  175,  621,  621,
 /*  1860 */   621,  621,  478,  493,  479,  621,  621,  621,  621,  528,
 /*  1870 */   621,  107,  101,  100,  621,  621,  621,  621,  621,  621,
 /*  1880 */   527,  621,  514,  621,  160,  611,  621,  608,  621,  621,
 /*  1890 */   520,  529,  621,  603,  548,  211,  269,  265,  264,  263,
 /*  1900 */   199,  161,  184,  188,  164,  183,  186,  610,   19,  621,
 /*  1910 */   621,  175,  621,  621,  621,  621,  478,  493,  479,  621,
 /*  1920 */   621,  621,  621,  528,  621,  107,  101,  100,  621,  621,
 /*  1930 */   621,  621,  621,  621,  527,  621,  514,  621,  160,  611,
 /*  1940 */   621,  608,  621,  621,  520,  529,  621,  603,  548,  211,
 /*  1950 */   269,  265,  264,  263,  199,  161,  184,  188,  164,  183,
 /*  1960 */   186,  610,  621,  621,   21,  621,  621,  175,  621,  621,
 /*  1970 */   621,  621,  478,  493,  479,  621,  621,  621,  621,  528,
 /*  1980 */   621,  107,  101,  100,  621,  621,  621,  621,  621,  621,
 /*  1990 */   527,  621,  514,  621,  160,  611,  621,  608,  621,  621,
 /*  2000 */   520,  529,  621,  603,  548,  211,  269,  265,  264,  263,
 /*  2010 */   199,  161,  184,  188,  164,  183,  186,  610,   22,  621,
 /*  2020 */   621,  175,  621,  621,  621,  621,  478,  493,  479,  621,
 /*  2030 */   621,  621,  621,  528,  621,  107,  101,  100,  621,  621,
 /*  2040 */   621,  621,  621,  621,  527,  621,  514,  621,  160,  611,
 /*  2050 */   621,  608,  621,  621,  520,  529,  621,  603,  548,  211,
 /*  2060 */   269,  265,  264,  263,  199,  161,  184,  188,  164,  183,
 /*  2070 */   186,  610,  621,  621,   23,  621,  621,  175,  621,  621,
 /*  2080 */   621,  621,  478,  493,  479,  621,  621,  621,  621,  528,
 /*  2090 */   621,  107,  101,  100,  621,  621,  621,  621,  621,  621,
 /*  2100 */   527,  621,  514,  621,  160,  611,  621,  608,  621,  621,
 /*  2110 */   520,  529,  621,  603,  548,  211,  269,  265,  264,  263,
 /*  2120 */   199,  161,  184,  188,  164,  183,  186,  610,   24,  621,
 /*  2130 */   621,  175,  621,  621,  621,  621,  478,  493,  479,  621,
 /*  2140 */   621,  621,  621,  528,  621,  107,  101,  100,  621,  621,
 /*  2150 */   621,  621,  621,  621,  527,  621,  514,  621,  160,  611,
 /*  2160 */   621,  608,  621,  621,  520,  529,  621,  603,  548,  211,
 /*  2170 */   269,  265,  264,  263,  199,  161,  184,  188,  164,  183,
 /*  2180 */   186,  610,  621,  621,  621,  621,   20,  621,  621,  621,
 /*  2190 */   621,  621,  621,  621,  175,  621,  621,  621,  621,  478,
 /*  2200 */   493,  479,  621,  621,  621,  621,  528,  621,  107,  101,
 /*  2210 */   100,  621,  621,  621,  621,  621,  621,  527,  621,  545,
 /*  2220 */   621,  160,  611,  621,  608,  621,  621,  520,  529,  621,
 /*  2230 */   603,  548,  211,  269,  265,  264,  263,  199,  161,  184,
 /*  2240 */   188,  164,  183,  186,  610,  621,  621,  621,  175,  621,
 /*  2250 */   621,  621,  621,  478,  493,  479,  621,  621,  621,  621,
 /*  2260 */   528,  621,  107,  101,  100,  621,  621,  621,  621,  621,
 /*  2270 */   621,  527,  621,  519,  621,  160,  611,  621,  608,  523,
 /*  2280 */   621,  245,  529,  621,  603,  548,  211,  269,  265,  264,
 /*  2290 */   263,  199,  161,  184,  188,  164,  183,  186,  610,  175,
 /*  2300 */   621,  621,  621,  621,  478,  493,  479,  621,  621,  621,
 /*  2310 */   621,  528,  621,  107,  101,  100,  621,  621,  621,  621,
 /*  2320 */   621,  621,  527,  621,  518,  621,  160,  611,  621,  608,
 /*  2330 */   522,  621,  245,  529,  621,  603,  548,  211,  269,  265,
 /*  2340 */   264,  263,  199,  161,  184,  188,  164,  183,  186,  610,
 /*  2350 */   621,  621,  621,  175,  621,  621,  621,  621,  478,  493,
 /*  2360 */   479,  621,  621,  621,  621,  528,  621,  107,  101,  100,
 /*  2370 */   621,  621,  621,  621,  621,  621,  527,  621,  517,  621,
 /*  2380 */   160,  611,  621,  608,  521,  621,  245,  529,  621,  603,
 /*  2390 */   548,  211,  269,  265,  264,  263,  199,  161,  184,  188,
 /*  2400 */   164,  183,  186,  610,  175,  621,  621,  621,  621,  478,
 /*  2410 */   493,  479,  621,  621,  621,  621,  528,  621,  107,  101,
 /*  2420 */   100,  621,  621,  621,  621,  621,  621,  527,  621,  516,
 /*  2430 */   621,  160,  611,  621,  608,  251,  621,  245,  529,  621,
 /*  2440 */   603,  548,  211,  269,  265,  264,  263,  199,  161,  184,
 /*  2450 */   188,  164,  183,  186,  610,  621,  621,  621,  175,  621,
 /*  2460 */   621,  621,  621,  478,  493,  479,  621,  621,  621,  621,
 /*  2470 */   528,  621,  107,  101,  100,  621,  621,  621,  621,  621,
 /*  2480 */   621,  527,  621,  516,  621,  160,  611,  621,  608,  229,
 /*  2490 */   621,  245,  529,  621,  603,  548,  211,  269,  265,  264,
 /*  2500 */   263,  199,  161,  184,  188,  164,  183,  186,  610,  175,
 /*  2510 */   621,  621,  621,  621,  478,  493,  479,  621,  621,  621,
 /*  2520 */   621,  528,  621,  107,  101,  100,  621,  621,  621,  621,
 /*  2530 */   621,  621,  527,  621,  544,  621,  160,  611,  621,  608,
 /*  2540 */   621,  621,  520,  529,  621,  603,  548,  211,  269,  265,
 /*  2550 */   264,  263,  199,  161,  184,  188,  164,  183,  186,  610,
 /*  2560 */   621,  621,  621,  175,  621,  621,  621,  621,  478,  493,
 /*  2570 */   479,  621,  621,  621,  621,  528,  621,  107,  101,  100,
 /*  2580 */   621,  621,  621,  621,  621,  621,  527,  621,  513,  621,
 /*  2590 */   160,  611,  621,  608,  621,  621,  520,  529,  621,  603,
 /*  2600 */   548,  211,  269,  265,  264,  263,  199,  161,  184,  188,
 /*  2610 */   164,  183,  186,  610,  175,  621,  621,  621,  621,  478,
 /*  2620 */   493,  479,  621,  621,  621,  621,  528,  621,  107,  101,
 /*  2630 */   100,  621,  621,  621,  621,  621,  621,  527,  621,  517,
 /*  2640 */   621,  160,  611,  621,  608,  621,  621,  520,  529,  621,
 /*  2650 */   603,  548,  211,  269,  265,  264,  263,  199,  161,  184,
 /*  2660 */   188,  164,  183,  186,  610,  621,  621,  621,  175,  621,
 /*  2670 */   621,  621,  621,  478,  493,  479,  621,  621,  621,  621,
 /*  2680 */   528,  621,  107,  101,  100,  621,  621,  621,  621,  621,
 /*  2690 */   621,  527,  621,  519,  621,  160,  611,  621,  608,  621,
 /*  2700 */   621,  520,  529,  621,  603,  548,  211,  269,  265,  264,
 /*  2710 */   263,  199,  161,  184,  188,  164,  183,  186,  610,  175,
 /*  2720 */   621,  621,  621,  621,  478,  493,  479,  621,  621,  621,
 /*  2730 */   621,  528,  621,  107,  101,  100,  621,  621,  621,  621,
 /*  2740 */   621,  621,  527,  621,  518,  621,  160,  611,  621,  608,
 /*  2750 */   621,  621,  520,  529,  621,  603,  548,  211,  269,  265,
 /*  2760 */   264,  263,  199,  161,  184,  188,  164,  183,  186,  610,
 /*  2770 */   621,  621,  621,  175,  621,  621,  621,  621,  478,  493,
 /*  2780 */   479,  621,  621,  621,  621,  528,  621,  107,  101,  100,
 /*  2790 */   621,  621,  621,  621,  621,  621,  527,  621,  232,  621,
 /*  2800 */   160,  611,  621,  608,  621,  621,  520,  529,  621,  603,
 /*  2810 */   548,  211,  269,  265,  264,  263,  199,  161,  184,  188,
 /*  2820 */   164,  183,  186,  610,  621,  621,  621,  213,  621,  190,
 /*  2830 */   621,  621,  621,  621,  478,  493,  479,  430,  621,  621,
 /*  2840 */   621,  621,  621,  133,  122,  100,  621,  621,  621,  621,
 /*  2850 */   621,  621,  621,  621,  621,  621,  160,  611,  621,  608,
 /*  2860 */   621,  621,  621,  621,  621,  603,  548,  211,  269,  265,
 /*  2870 */   264,  263,  199,  161,  184,  188,  164,  183,  186,  610,
 /*  2880 */   621,  255,  621,  173,  621,  621,  621,  621,  478,  493,
 /*  2890 */   479,  621,  621,  621,  611,  621,  608,  223,  255,  100,
 /*  2900 */   621,  621,  603,  621,  621,  621,  621,  621,  621,  621,
 /*  2910 */   160,  611,  621,  608,  170,  186,  610,  621,  621,  603,
 /*  2920 */   548,  211,  269,  265,  264,  263,  199,  161,  184,  188,
 /*  2930 */   164,  183,  186,  610,  621,  621,  621,  478,  493,  479,
 /*  2940 */   621,  621,  621,  621,  621,  621,  227,  255,  100,  621,
 /*  2950 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  160,
 /*  2960 */   611,  621,  608,  621,  621,  621,  621,  621,  603,  226,
 /*  2970 */   211,  269,  265,  264,  263,  199,  161,  184,  188,  164,
 /*  2980 */   183,  186,  610,  233,  621,  621,  621,  621,  621,  621,
 /*  2990 */   621,  621,  621,  621,  621,  621,  621,  621,  255,  621,
 /*  3000 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3010 */   160,  611,  621,  608,  621,  240,  621,  621,  621,  603,
 /*  3020 */   548,  211,  269,  265,  264,  263,  199,  161,  184,  188,
 /*  3030 */   164,  183,  186,  610,  233,  621,  621,  621,  621,  621,
 /*  3040 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  255,
 /*  3050 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3060 */   621,  160,  611,  621,  608,  621,  241,  621,  621,  621,
 /*  3070 */   603,  548,  211,  269,  265,  264,  263,  199,  161,  184,
 /*  3080 */   188,  164,  183,  186,  610,  233,  621,  621,  621,  621,
 /*  3090 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3100 */   255,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3110 */   621,  621,  160,  611,  621,  608,  621,  242,  621,  621,
 /*  3120 */   621,  603,  548,  211,  269,  265,  264,  263,  199,  161,
 /*  3130 */   184,  188,  164,  183,  186,  610,  233,  621,  621,  621,
 /*  3140 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3150 */   621,  255,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3160 */   621,  621,  621,  160,  611,  621,  608,  621,  246,  621,
 /*  3170 */   621,  621,  603,  548,  211,  269,  265,  264,  263,  199,
 /*  3180 */   161,  184,  188,  164,  183,  186,  610,  233,  621,  621,
 /*  3190 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3200 */   621,  621,  255,  621,  621,  621,  621,  621,  621,  621,
 /*  3210 */   621,  621,  621,  621,  160,  611,  621,  608,  621,  247,
 /*  3220 */   621,  621,  621,  603,  548,  211,  269,  265,  264,  263,
 /*  3230 */   199,  161,  184,  188,  164,  183,  186,  610,  233,  621,
 /*  3240 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3250 */   621,  621,  621,  255,  621,  621,  621,  621,  621,  621,
 /*  3260 */   621,  621,  621,  621,  621,  160,  611,  621,  608,  621,
 /*  3270 */   248,  621,  621,  621,  603,  548,  211,  269,  265,  264,
 /*  3280 */   263,  199,  161,  184,  188,  164,  183,  186,  610,  174,
 /*  3290 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3300 */   621,  621,  621,  621,  255,  621,  621,  621,  621,  621,
 /*  3310 */   621,  621,  621,  621,  621,  621,  160,  611,  621,  608,
 /*  3320 */   621,  621,  621,  621,  621,  603,  548,  211,  269,  265,
 /*  3330 */   264,  263,  199,  161,  184,  188,  164,  183,  186,  610,
 /*  3340 */   182,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3350 */   621,  621,  621,  621,  621,  255,  621,  621,  621,  621,
 /*  3360 */   621,  621,  621,  621,  621,  621,  621,  160,  611,  621,
 /*  3370 */   608,  621,  621,  621,  621,  621,  603,  548,  211,  269,
 /*  3380 */   265,  264,  263,  199,  161,  184,  188,  164,  183,  186,
 /*  3390 */   610,  200,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3400 */   621,  621,  621,  621,  621,  621,  255,  621,  621,  621,
 /*  3410 */   621,  621,  621,  621,  621,  621,  621,  621,  160,  611,
 /*  3420 */   621,  608,  621,  621,  621,  621,  621,  603,  548,  211,
 /*  3430 */   269,  265,  264,  263,  199,  161,  184,  188,  164,  183,
 /*  3440 */   186,  610,  172,  621,  621,  621,  621,  621,  621,  621,
 /*  3450 */   621,  621,  621,  621,  621,  621,  621,  255,  621,  621,
 /*  3460 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  160,
 /*  3470 */   611,  621,  608,  621,  621,  621,  621,  621,  603,  548,
 /*  3480 */   211,  269,  265,  264,  263,  199,  161,  184,  188,  164,
 /*  3490 */   183,  186,  610,  173,  621,  621,  621,  621,  621,  621,
 /*  3500 */   621,  621,  621,  621,  621,  621,  621,  621,  255,  621,
 /*  3510 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3520 */   160,  611,  621,  608,  621,  621,  621,  621,  621,  603,
 /*  3530 */   548,  211,  269,  265,  264,  263,  199,  161,  184,  188,
 /*  3540 */   164,  183,  186,  610,  176,  621,  621,  621,  621,  621,
 /*  3550 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  255,
 /*  3560 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3570 */   621,  160,  611,  621,  608,  621,  621,  621,  621,  621,
 /*  3580 */   603,  548,  211,  269,  265,  264,  263,  199,  161,  184,
 /*  3590 */   188,  164,  183,  186,  610,  177,  621,  621,  621,  621,
 /*  3600 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3610 */   255,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3620 */   621,  621,  160,  611,  621,  608,  621,  621,  621,  621,
 /*  3630 */   621,  603,  548,  211,  269,  265,  264,  263,  199,  161,
 /*  3640 */   184,  188,  164,  183,  186,  610,  178,  621,  621,  621,
 /*  3650 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3660 */   621,  255,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3670 */   621,  621,  621,  160,  611,  621,  608,  621,  621,  621,
 /*  3680 */   621,  621,  603,  548,  211,  269,  265,  264,  263,  199,
 /*  3690 */   161,  184,  188,  164,  183,  186,  610,  179,  621,  621,
 /*  3700 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3710 */   621,  621,  255,  621,  621,  621,  621,  621,  621,  621,
 /*  3720 */   621,  621,  621,  621,  160,  611,  621,  608,  621,  621,
 /*  3730 */   621,  621,  621,  603,  548,  211,  269,  265,  264,  263,
 /*  3740 */   199,  161,  184,  188,  164,  183,  186,  610,  180,  621,
 /*  3750 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3760 */   621,  621,  621,  255,  621,  621,  621,  621,  621,  621,
 /*  3770 */   621,  621,  621,  621,  621,  160,  611,  621,  608,  621,
 /*  3780 */   621,  621,  621,  621,  603,  548,  211,  269,  265,  264,
 /*  3790 */   263,  199,  161,  184,  188,  164,  183,  186,  610,  185,
 /*  3800 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3810 */   621,  621,  621,  621,  255,  621,  621,  621,  621,  621,
 /*  3820 */   621,  621,  621,  621,  621,  621,  160,  611,  621,  608,
 /*  3830 */   621,  621,  621,  621,  621,  603,  548,  211,  269,  265,
 /*  3840 */   264,  263,  199,  161,  184,  188,  164,  183,  186,  610,
 /*  3850 */   190,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  3860 */   621,  621,  621,  621,  621,  255,  621,  621,  621,  621,
 /*  3870 */   621,  621,  621,  621,  621,  621,  621,  160,  611,  621,
 /*  3880 */   608,  621,  621,  621,  621,  621,  603,  548,  211,  269,
 /*  3890 */   265,  264,  263,  199,  161,  184,  188,  164,  183,  186,
 /*  3900 */   610,  621,  621,  621,  255,  621,  621,  621,  621,  621,
 /*  3910 */   621,  621,  621,  621,  621,  621,  160,  611,  621,  608,
 /*  3920 */   621,  621,  621,  621,  621,  603,  558,  211,  269,  265,
 /*  3930 */   264,  263,  199,  161,  184,  188,  164,  183,  186,  610,
 /*  3940 */   621,  621,  621,  621,  621,  621,  255,  621,  621,  621,
 /*  3950 */   621,  621,  621,  621,  621,  621,  621,  621,  160,  611,
 /*  3960 */   621,  608,  621,  621,  621,  621,  621,  603,  557,  211,
 /*  3970 */   269,  265,  264,  263,  199,  161,  184,  188,  164,  183,
 /*  3980 */   186,  610,  621,  621,  621,  255,  621,  621,  621,  621,
 /*  3990 */   621,  621,  621,  621,  621,  621,  621,  160,  611,  621,
 /*  4000 */   608,  621,  621,  621,  621,  621,  603,  556,  211,  269,
 /*  4010 */   265,  264,  263,  199,  161,  184,  188,  164,  183,  186,
 /*  4020 */   610,  621,  621,  621,  255,  621,  621,  621,  621,  621,
 /*  4030 */   621,  621,  621,  621,  621,  621,  160,  611,  621,  608,
 /*  4040 */   621,  621,  621,  621,  621,  603,  555,  211,  269,  265,
 /*  4050 */   264,  263,  199,  161,  184,  188,  164,  183,  186,  610,
 /*  4060 */   621,  621,  621,  621,  621,  621,  255,  621,  621,  621,
 /*  4070 */   621,  621,  621,  621,  621,  621,  621,  621,  160,  611,
 /*  4080 */   621,  608,  621,  621,  621,  621,  621,  603,  554,  211,
 /*  4090 */   269,  265,  264,  263,  199,  161,  184,  188,  164,  183,
 /*  4100 */   186,  610,  621,  621,  621,  255,  621,  621,  621,  621,
 /*  4110 */   621,  621,  621,  621,  621,  621,  621,  160,  611,  621,
 /*  4120 */   608,  621,  621,  621,  621,  621,  603,  553,  211,  269,
 /*  4130 */   265,  264,  263,  199,  161,  184,  188,  164,  183,  186,
 /*  4140 */   610,  621,  621,  621,  255,  621,  621,  621,  621,  621,
 /*  4150 */   621,  621,  621,  621,  621,  621,  160,  611,  621,  608,
 /*  4160 */   621,  621,  621,  621,  621,  603,  552,  211,  269,  265,
 /*  4170 */   264,  263,  199,  161,  184,  188,  164,  183,  186,  610,
 /*  4180 */   621,  621,  621,  621,  621,  621,  255,  621,  621,  621,
 /*  4190 */   621,  621,  621,  621,  621,  621,  621,  621,  160,  611,
 /*  4200 */   621,  608,  621,  621,  621,  621,  621,  603,  551,  211,
 /*  4210 */   269,  265,  264,  263,  199,  161,  184,  188,  164,  183,
 /*  4220 */   186,  610,  621,  621,  621,  255,  621,  621,  621,  621,
 /*  4230 */   621,  621,  621,  621,  621,  621,  621,  160,  611,  621,
 /*  4240 */   608,  621,  621,  621,  621,  621,  603,  550,  211,  269,
 /*  4250 */   265,  264,  263,  199,  161,  184,  188,  164,  183,  186,
 /*  4260 */   610,  621,  621,  621,  255,  621,  621,  621,  621,  621,
 /*  4270 */   621,  621,  621,  621,  621,  621,  160,  611,  621,  608,
 /*  4280 */   621,  621,  621,  621,  621,  603,  549,  211,  269,  265,
 /*  4290 */   264,  263,  199,  161,  184,  188,  164,  183,  186,  610,
 /*  4300 */   621,  621,  621,  621,  621,  621,  255,  621,  621,  621,
 /*  4310 */   621,  621,  621,  621,  621,  621,  621,  621,  160,  611,
 /*  4320 */   621,  608,  621,  621,  621,  621,  621,  603,  547,  211,
 /*  4330 */   269,  265,  264,  263,  199,  161,  184,  188,  164,  183,
 /*  4340 */   186,  610,  621,  621,  621,  255,  621,  621,  621,  621,
 /*  4350 */   621,  621,  621,  621,  621,  621,  621,  560,  611,  621,
 /*  4360 */   608,  621,  621,  621,  621,  621,  603,  621,  211,  269,
 /*  4370 */   265,  264,  263,  199,  161,  184,  188,  164,  183,  186,
 /*  4380 */   610,  621,  621,  621,  255,  621,  621,  621,  621,  621,
 /*  4390 */   621,  621,  621,  621,  621,  621,  270,  611,  621,  608,
 /*  4400 */   621,  621,  621,  621,  621,  603,  621,  211,  269,  265,
 /*  4410 */   264,  263,  199,  161,  184,  188,  164,  183,  186,  610,
 /*  4420 */   621,  621,  621,  621,  621,  621,  255,  621,  621,  621,
 /*  4430 */   621,  621,  621,  621,  621,  621,  621,  621,  452,  611,
 /*  4440 */   621,  608,  621,  621,  621,  621,  621,  603,  621,  211,
 /*  4450 */   269,  265,  264,  263,  199,  161,  184,  188,  164,  183,
 /*  4460 */   186,  610,  171,  621,  621,  621,  109,  621,  621,  108,
 /*  4470 */   151,  621,  621,  621,  621,  621,  621,  621,  621,  618,
 /*  4480 */   487,  488,  489,  491,  492,  494,  495,  496,  497,  498,
 /*  4490 */   499,  500,  501,  486,  621,  621,  621,  109,  621,  621,
 /*  4500 */   108,  151,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  4510 */   618,  487,  488,  489,  491,  492,  494,  495,  496,  497,
 /*  4520 */   498,  499,  500,  501,   30,  621,  621,  255,  621,  621,
 /*  4530 */   535,  621,  621,  621,  621,  621,  255,  621,  621,  621,
 /*  4540 */   611,  621,  608,  621,  618,  621,   30,  606,  603,  611,
 /*  4550 */   621,  608,  621,  621,  621,  621,  621,  603,  208,  164,
 /*  4560 */   183,  186,  610,  621,  621,  621,  618,  621,   30,  187,
 /*  4570 */   186,  610,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  4580 */   621,  621,  621,  621,  621,  621,  621,  458,  618,  621,
 /*  4590 */    30,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  4600 */   621,   86,  621,  621,  621,   88,   87,   85,   84,  262,
 /*  4610 */   618,  609,  612,  613,  614,  615,  616,  617,  621,  621,
 /*  4620 */   621,  621,  621,   86,  621,  621,  621,   88,   87,   85,
 /*  4630 */    84,  262,  621,  609,  612,  613,  614,  615,  616,  617,
 /*  4640 */   621,  621,  621,  621,  621,   86,  621,  621,  621,   88,
 /*  4650 */    87,   85,   84,  262,  621,  609,  612,  613,  614,  615,
 /*  4660 */   616,  617,  621,  621,  621,  621,  621,   86,  621,  621,
 /*  4670 */   621,   88,   87,   85,   84,  262,  621,  609,  612,  613,
 /*  4680 */   614,  615,  616,  617,  621,  621,  621,  621,  255,  621,
 /*  4690 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  4700 */   621,  611,  621,  608,  621,  621,  621,  621,  621,  603,
 /*  4710 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*  4720 */   165,  183,  186,  610,  621,  255,  621,  621,  255,  621,
 /*  4730 */   621,  621,  255,  621,  621,  255,  621,  621,  611,  621,
 /*  4740 */   608,  611,  621,  608,  621,  611,  603,  608,  611,  603,
 /*  4750 */   608,  621,  621,  603,  621,  621,  603,  166,  183,  186,
 /*  4760 */   610,  196,  186,  610,  621,  202,  186,  610,  203,  186,
 /*  4770 */   610,  255,  621,  621,  621,  255,  621,  621,  255,  621,
 /*  4780 */   621,  621,  621,  621,  611,  621,  608,  621,  611,  621,
 /*  4790 */   608,  611,  603,  608,  621,  621,  603,  621,  621,  603,
 /*  4800 */   621,  255,  621,  621,  204,  186,  610,  621,  205,  186,
 /*  4810 */   610,  206,  186,  610,  611,  621,  608,  621,  621,  621,
 /*  4820 */   621,  621,  603,  621,  621,  621,  621,  621,  621,  621,
 /*  4830 */   621,  621,  621,  621,  207,  186,  610,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     1,   13,   14,    4,  119,   21,    7,    8,    9,   10,
 /*    10 */    11,   12,   55,   56,   15,   16,  108,  132,  110,  134,
 /*    20 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*    30 */    31,   32,   33,   34,   21,  109,  110,  111,   99,  154,
 /*    40 */    89,   90,   91,   92,  118,   46,  120,   48,   49,   50,
 /*    50 */    51,   52,   53,   54,   55,   56,   27,   28,   29,  132,
 /*    60 */    18,   73,   74,   21,   35,   36,   37,   38,   39,   40,
 /*    70 */    41,   42,   43,   44,   45,    1,    1,   78,  139,  100,
 /*    80 */   100,   82,   83,   84,   85,   86,   10,   88,   89,   90,
 /*    90 */    91,   92,   93,   94,    1,   21,   21,    4,  119,  119,
 /*   100 */     7,    8,    9,   10,   11,   12,    3,  132,   15,   16,
 /*   110 */     7,   17,  133,  133,   21,   22,   23,   24,   25,   26,
 /*   120 */    27,   28,   29,   30,   31,   32,   33,   34,   79,   80,
 /*   130 */    81,   55,   56,  114,  132,  114,  105,  119,  119,   46,
 /*   140 */   119,   48,   49,   50,   51,   52,   53,   54,   55,   56,
 /*   150 */   119,   57,   58,   59,   60,   61,   62,   63,   64,   65,
 /*   160 */   106,    3,   88,   89,   90,   91,   92,   93,   94,  115,
 /*   170 */     1,   78,   14,  100,    5,   82,   83,   84,   85,   86,
 /*   180 */   139,   88,   89,   90,   91,   92,   93,   94,    1,    9,
 /*   190 */    21,    4,  119,  105,    7,    8,    9,   10,   11,   12,
 /*   200 */     3,   21,   15,   16,    7,    1,  133,  119,   21,   22,
 /*   210 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   220 */    33,   34,   18,  114,  114,   21,    3,  114,  119,  119,
 /*   230 */     7,  105,  119,   46,  105,   48,   49,   50,   51,   52,
 /*   240 */    53,   54,   55,   56,  102,  119,    1,  130,  119,  113,
 /*   250 */   113,  109,  110,  111,  112,  119,  119,  109,  110,  111,
 /*   260 */   118,  119,  120,   18,   19,   78,  118,  119,  120,   82,
 /*   270 */    83,   84,   85,   86,  119,   88,   89,   90,   91,   92,
 /*   280 */    93,   94,    0,    1,   21,  119,    4,  119,    6,    7,
 /*   290 */     8,    9,  107,   11,   12,  113,  113,   15,   16,  133,
 /*   300 */   107,  119,  119,   21,   22,   23,   24,   25,   26,   27,
 /*   310 */    28,   29,   30,   31,   32,   33,   34,    9,    7,    4,
 /*   320 */    84,   85,  107,    8,   13,  107,   11,   12,   46,   21,
 /*   330 */    48,   49,   50,   51,   52,   53,   54,   22,   23,   24,
 /*   340 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   350 */   119,   88,   89,   90,   91,   92,   93,   94,    2,    3,
 /*   360 */    78,   13,  100,  113,   82,   83,   84,   85,   86,  119,
 /*   370 */    88,   89,   90,   91,   92,   93,   94,    1,    5,    1,
 /*   380 */     4,  119,    6,    7,    8,    9,    3,   11,   12,   19,
 /*   390 */   113,   15,   16,   10,   21,  133,  119,   21,   22,   23,
 /*   400 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   410 */    34,    3,    3,    3,    2,    3,    5,    7,  119,   10,
 /*   420 */     1,   13,   46,  117,   48,   49,   50,   51,   52,   53,
 /*   430 */    54,  132,   21,  134,    2,    3,  105,   18,   19,  140,
 /*   440 */     2,    3,  143,  144,  145,  146,  147,  148,  149,  150,
 /*   450 */   151,  152,  153,  154,   78,  105,    5,   87,   82,   83,
 /*   460 */    84,   85,   86,   13,   88,   89,   90,   91,   92,   93,
 /*   470 */    94,    1,   21,  107,    4,    2,    3,    7,    8,    9,
 /*   480 */    10,   11,   12,    2,    3,   15,   16,    2,    3,   71,
 /*   490 */    72,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   500 */    30,   31,   32,   33,   34,   75,   76,    2,    3,    3,
 /*   510 */    77,   78,  119,    2,    3,    3,   46,   19,   48,   49,
 /*   520 */    50,   51,   52,   53,   54,  132,   20,  134,    3,    3,
 /*   530 */     3,  130,   20,  140,    7,   10,   10,  144,  145,  146,
 /*   540 */   147,  148,  149,  150,  151,  152,  153,  154,   78,    2,
 /*   550 */     3,    9,   82,   83,   84,   85,   86,  116,   88,   89,
 /*   560 */    90,   91,   92,   93,   94,    1,   66,   67,    4,    2,
 /*   570 */     3,    7,    8,    9,   10,   11,   12,    3,  119,   15,
 /*   580 */    16,    7,    3,   97,  105,   21,   22,   23,   24,   25,
 /*   590 */    26,   27,   28,   29,   30,   31,   32,   33,   34,  130,
 /*   600 */     3,  130,  119,  119,  130,   98,  119,  115,   98,  105,
 /*   610 */    46,  117,   48,   49,   50,   51,   52,   53,   54,  132,
 /*   620 */    97,  134,  119,  130,  116,   97,  130,  140,   97,    7,
 /*   630 */     7,    7,  145,  146,  147,  148,  149,  150,  151,  152,
 /*   640 */   153,  154,   78,    9,    9,    7,   82,   83,   84,   85,
 /*   650 */    86,    9,   88,   89,   90,   91,   92,   93,   94,    1,
 /*   660 */     7,   68,    4,    2,    9,    7,    8,    9,   10,   11,
 /*   670 */    12,    9,    2,   15,   16,    2,    9,   47,    7,   21,
 /*   680 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   690 */    32,   33,   34,    1,   48,   18,    3,    7,    7,   18,
 /*   700 */   119,    1,    7,    9,   46,    7,   48,   49,   50,   51,
 /*   710 */    52,   53,   54,  132,    2,  134,    1,    1,    7,   47,
 /*   720 */     2,  140,    1,    1,    7,   47,    1,  146,  147,  148,
 /*   730 */   149,  150,  151,  152,  153,  154,   78,    1,    7,    1,
 /*   740 */    82,   83,   84,   85,   86,   17,   88,   89,   90,   91,
 /*   750 */    92,   93,   94,    1,    7,    9,    4,   17,   14,    7,
 /*   760 */     8,    9,   10,   11,   12,    9,    1,   15,   16,    5,
 /*   770 */   155,   18,   70,   21,   22,   23,   24,   25,   26,   27,
 /*   780 */    28,   29,   30,   31,   32,   33,   34,   17,   69,  155,
 /*   790 */   155,  155,  155,  155,  119,  155,  155,  155,   46,  155,
 /*   800 */    48,   49,   50,   51,   52,   53,   54,  132,  155,  134,
 /*   810 */   109,  110,  111,  112,  155,  140,  155,  155,  155,  118,
 /*   820 */   119,  120,  147,  148,  149,  150,  151,  152,  153,  154,
 /*   830 */    78,  155,  155,  155,   82,   83,   84,   85,   86,  155,
 /*   840 */    88,   89,   90,   91,   92,   93,   94,    1,  155,  155,
 /*   850 */     4,  155,  155,    7,    8,    9,   10,   11,   12,  155,
 /*   860 */   155,   15,   16,  155,  155,  155,  155,   21,   22,   23,
 /*   870 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   880 */    34,  155,  155,  155,  155,  155,  155,  155,  119,  155,
 /*   890 */   155,  155,   46,  155,   48,   49,   50,   51,   52,   53,
 /*   900 */    54,  132,  155,  134,  109,  110,  111,  155,  155,  140,
 /*   910 */   155,  155,  155,  118,  119,  120,  155,  148,  149,  150,
 /*   920 */   151,  152,  153,  154,   78,  155,  155,  155,   82,   83,
 /*   930 */    84,   85,   86,  155,   88,   89,   90,   91,   92,   93,
 /*   940 */    94,    1,  155,  155,    4,  155,  155,    7,    8,    9,
 /*   950 */    10,   11,   12,  155,  155,   15,   16,  155,  155,  155,
 /*   960 */   155,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   970 */    30,   31,   32,   33,   34,  155,  155,  155,  155,  155,
 /*   980 */   155,  155,  119,  155,  155,  155,   46,  155,   48,   49,
 /*   990 */    50,   51,   52,   53,   54,  132,  155,  134,  109,  110,
 /*  1000 */   111,  155,  155,  140,  155,  155,  155,  118,  155,  120,
 /*  1010 */   155,  148,  149,  150,  151,  152,  153,  154,   78,  155,
 /*  1020 */   155,  155,   82,   83,   84,   85,   86,  155,   88,   89,
 /*  1030 */    90,   91,   92,   93,   94,    1,  155,  155,    4,  155,
 /*  1040 */   155,    7,    8,    9,   10,   11,   12,  155,  155,   15,
 /*  1050 */    16,  155,  155,  155,  155,   21,   22,   23,   24,   25,
 /*  1060 */    26,   27,   28,   29,   30,   31,   32,   33,   34,  155,
 /*  1070 */   155,  155,  155,  155,  155,  155,  119,  155,  155,  155,
 /*  1080 */    46,  155,   48,   49,   50,   51,   52,   53,   54,  132,
 /*  1090 */   155,  134,  155,  155,  155,  155,  155,  140,  155,  155,
 /*  1100 */   155,  155,  155,  155,  155,  155,  149,  150,  151,  152,
 /*  1110 */   153,  154,   78,  155,  155,  155,   82,   83,   84,   85,
 /*  1120 */    86,  155,   88,   89,   90,   91,   92,   93,   94,    1,
 /*  1130 */   155,  155,    4,  155,  155,    7,    8,    9,   10,   11,
 /*  1140 */    12,  155,  155,   15,   16,  155,  155,  155,  155,   21,
 /*  1150 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1160 */    32,   33,   34,  155,  155,  155,  155,  155,  155,  155,
 /*  1170 */   119,  155,  155,  155,   46,  155,   48,   49,   50,   51,
 /*  1180 */    52,   53,   54,  132,  155,  134,  155,  155,  155,  155,
 /*  1190 */   155,  140,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  1200 */   149,  150,  151,  152,  153,  154,   78,  155,  155,  155,
 /*  1210 */    82,   83,   84,   85,   86,  155,   88,   89,   90,   91,
 /*  1220 */    92,   93,   94,    1,  155,  155,    4,  155,  155,    7,
 /*  1230 */     8,    9,   10,   11,   12,  155,  155,   15,   16,  155,
 /*  1240 */   155,  155,  155,   21,   22,   23,   24,   25,   26,   27,
 /*  1250 */    28,   29,   30,   31,   32,   33,   34,  155,  155,  155,
 /*  1260 */   155,  155,  155,  155,  119,  155,  155,  155,   46,  155,
 /*  1270 */    48,   49,   50,   51,   52,   53,   54,  132,  155,  134,
 /*  1280 */   155,  155,  155,  155,  155,  140,  155,  155,  155,  155,
 /*  1290 */   155,  155,  155,  155,  149,  150,  151,  152,  153,  154,
 /*  1300 */    78,  155,  155,  155,   82,   83,   84,   85,   86,  155,
 /*  1310 */    88,   89,   90,   91,   92,   93,   94,    1,  155,  155,
 /*  1320 */     4,  155,  155,    7,    8,    9,  155,   11,   12,  155,
 /*  1330 */   155,   15,   16,  155,  155,  155,  155,   21,   22,   23,
 /*  1340 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  1350 */    34,  155,  155,  155,  155,  155,  155,  155,  119,  155,
 /*  1360 */   155,  155,   46,  155,   48,   49,   50,   51,   52,   53,
 /*  1370 */    54,  132,  155,  134,  155,  155,  155,  155,  155,  140,
 /*  1380 */   155,  155,  155,  155,  155,  155,  155,  155,  149,  150,
 /*  1390 */   151,  152,  153,  154,   78,  155,  155,  155,   82,   83,
 /*  1400 */    84,   85,   86,  155,   88,   89,   90,   91,   92,   93,
 /*  1410 */    94,    1,  155,  155,    4,  155,  155,    7,    8,    9,
 /*  1420 */   155,   11,   12,  155,  155,   15,   16,  155,  155,  155,
 /*  1430 */   155,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1440 */    30,   31,   32,   33,   34,  155,  155,  155,  155,  155,
 /*  1450 */   155,  155,  119,  155,  155,  155,   46,  155,   48,   49,
 /*  1460 */    50,   51,   52,   53,   54,  132,  155,  134,  155,  155,
 /*  1470 */   155,  155,  155,  140,  155,  155,  155,  155,  155,  155,
 /*  1480 */   155,  155,  155,  150,  151,  152,  153,  154,   78,  155,
 /*  1490 */   155,  155,   82,   83,   84,   85,   86,  155,   88,   89,
 /*  1500 */    90,   91,   92,   93,   94,  103,  104,  155,  155,  155,
 /*  1510 */   155,  109,  110,  111,  155,  155,  155,  155,  116,  155,
 /*  1520 */   118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
 /*  1530 */   128,  129,  155,  131,  132,  155,  134,  155,  155,  137,
 /*  1540 */   138,  155,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  1550 */   148,  149,  150,  151,  152,  153,  154,  119,  155,  155,
 /*  1560 */   155,  104,  155,  155,  155,  155,  109,  110,  111,  155,
 /*  1570 */   132,  155,  134,  116,  155,  118,  119,  120,  140,  122,
 /*  1580 */   123,  124,  125,  126,  127,  128,  129,  155,  131,  132,
 /*  1590 */   155,  134,  154,  155,  137,  138,  155,  140,  141,  142,
 /*  1600 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  1610 */   153,  154,    1,    2,  155,    4,  155,  155,  155,    8,
 /*  1620 */   155,  155,   11,   12,  155,  155,  155,  155,  155,  155,
 /*  1630 */   155,  155,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1640 */    29,   30,   31,   32,   33,   34,    1,  155,  155,    4,
 /*  1650 */   155,  155,  155,    8,  155,  155,   11,   12,  155,  155,
 /*  1660 */   155,  155,  155,  155,  155,  155,   21,   22,   23,   24,
 /*  1670 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1680 */   155,  155,  155,  155,  155,  155,  155,  155,  155,   78,
 /*  1690 */   155,  155,  155,   82,   83,   84,   85,   86,  155,   88,
 /*  1700 */    89,   90,   91,   92,   93,   94,  155,  155,  155,  155,
 /*  1710 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  1720 */   155,  155,  155,   78,  155,  155,  155,   82,   83,   84,
 /*  1730 */    85,   86,   96,   88,   89,   90,   91,   92,   93,   94,
 /*  1740 */   104,  155,  155,  155,  155,  109,  110,  111,  155,  155,
 /*  1750 */   155,  155,  116,  155,  118,  119,  120,  155,  155,  155,
 /*  1760 */   155,  155,  155,  127,  155,  129,  155,  131,  132,  155,
 /*  1770 */   134,  155,  155,  137,  138,  155,  140,  141,  142,  143,
 /*  1780 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  1790 */   154,   96,  155,  155,  155,  155,  155,  155,  155,  104,
 /*  1800 */   155,  155,  155,  155,  109,  110,  111,  155,  155,  155,
 /*  1810 */   155,  116,  155,  118,  119,  120,  155,  155,  155,  155,
 /*  1820 */   155,  155,  127,  155,  129,  155,  131,  132,  155,  134,
 /*  1830 */   155,  155,  137,  138,  155,  140,  141,  142,  143,  144,
 /*  1840 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  1850 */   155,  155,  155,  155,  101,  155,  155,  104,  155,  155,
 /*  1860 */   155,  155,  109,  110,  111,  155,  155,  155,  155,  116,
 /*  1870 */   155,  118,  119,  120,  155,  155,  155,  155,  155,  155,
 /*  1880 */   127,  155,  129,  155,  131,  132,  155,  134,  155,  155,
 /*  1890 */   137,  138,  155,  140,  141,  142,  143,  144,  145,  146,
 /*  1900 */   147,  148,  149,  150,  151,  152,  153,  154,  101,  155,
 /*  1910 */   155,  104,  155,  155,  155,  155,  109,  110,  111,  155,
 /*  1920 */   155,  155,  155,  116,  155,  118,  119,  120,  155,  155,
 /*  1930 */   155,  155,  155,  155,  127,  155,  129,  155,  131,  132,
 /*  1940 */   155,  134,  155,  155,  137,  138,  155,  140,  141,  142,
 /*  1950 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  1960 */   153,  154,  155,  155,  101,  155,  155,  104,  155,  155,
 /*  1970 */   155,  155,  109,  110,  111,  155,  155,  155,  155,  116,
 /*  1980 */   155,  118,  119,  120,  155,  155,  155,  155,  155,  155,
 /*  1990 */   127,  155,  129,  155,  131,  132,  155,  134,  155,  155,
 /*  2000 */   137,  138,  155,  140,  141,  142,  143,  144,  145,  146,
 /*  2010 */   147,  148,  149,  150,  151,  152,  153,  154,  101,  155,
 /*  2020 */   155,  104,  155,  155,  155,  155,  109,  110,  111,  155,
 /*  2030 */   155,  155,  155,  116,  155,  118,  119,  120,  155,  155,
 /*  2040 */   155,  155,  155,  155,  127,  155,  129,  155,  131,  132,
 /*  2050 */   155,  134,  155,  155,  137,  138,  155,  140,  141,  142,
 /*  2060 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  2070 */   153,  154,  155,  155,  101,  155,  155,  104,  155,  155,
 /*  2080 */   155,  155,  109,  110,  111,  155,  155,  155,  155,  116,
 /*  2090 */   155,  118,  119,  120,  155,  155,  155,  155,  155,  155,
 /*  2100 */   127,  155,  129,  155,  131,  132,  155,  134,  155,  155,
 /*  2110 */   137,  138,  155,  140,  141,  142,  143,  144,  145,  146,
 /*  2120 */   147,  148,  149,  150,  151,  152,  153,  154,  101,  155,
 /*  2130 */   155,  104,  155,  155,  155,  155,  109,  110,  111,  155,
 /*  2140 */   155,  155,  155,  116,  155,  118,  119,  120,  155,  155,
 /*  2150 */   155,  155,  155,  155,  127,  155,  129,  155,  131,  132,
 /*  2160 */   155,  134,  155,  155,  137,  138,  155,  140,  141,  142,
 /*  2170 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  2180 */   153,  154,  155,  155,  155,  155,   96,  155,  155,  155,
 /*  2190 */   155,  155,  155,  155,  104,  155,  155,  155,  155,  109,
 /*  2200 */   110,  111,  155,  155,  155,  155,  116,  155,  118,  119,
 /*  2210 */   120,  155,  155,  155,  155,  155,  155,  127,  155,  129,
 /*  2220 */   155,  131,  132,  155,  134,  155,  155,  137,  138,  155,
 /*  2230 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  2240 */   150,  151,  152,  153,  154,  155,  155,  155,  104,  155,
 /*  2250 */   155,  155,  155,  109,  110,  111,  155,  155,  155,  155,
 /*  2260 */   116,  155,  118,  119,  120,  155,  155,  155,  155,  155,
 /*  2270 */   155,  127,  155,  129,  155,  131,  132,  155,  134,  135,
 /*  2280 */   155,  137,  138,  155,  140,  141,  142,  143,  144,  145,
 /*  2290 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  104,
 /*  2300 */   155,  155,  155,  155,  109,  110,  111,  155,  155,  155,
 /*  2310 */   155,  116,  155,  118,  119,  120,  155,  155,  155,  155,
 /*  2320 */   155,  155,  127,  155,  129,  155,  131,  132,  155,  134,
 /*  2330 */   135,  155,  137,  138,  155,  140,  141,  142,  143,  144,
 /*  2340 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  2350 */   155,  155,  155,  104,  155,  155,  155,  155,  109,  110,
 /*  2360 */   111,  155,  155,  155,  155,  116,  155,  118,  119,  120,
 /*  2370 */   155,  155,  155,  155,  155,  155,  127,  155,  129,  155,
 /*  2380 */   131,  132,  155,  134,  135,  155,  137,  138,  155,  140,
 /*  2390 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  2400 */   151,  152,  153,  154,  104,  155,  155,  155,  155,  109,
 /*  2410 */   110,  111,  155,  155,  155,  155,  116,  155,  118,  119,
 /*  2420 */   120,  155,  155,  155,  155,  155,  155,  127,  155,  129,
 /*  2430 */   155,  131,  132,  155,  134,  135,  155,  137,  138,  155,
 /*  2440 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  2450 */   150,  151,  152,  153,  154,  155,  155,  155,  104,  155,
 /*  2460 */   155,  155,  155,  109,  110,  111,  155,  155,  155,  155,
 /*  2470 */   116,  155,  118,  119,  120,  155,  155,  155,  155,  155,
 /*  2480 */   155,  127,  155,  129,  155,  131,  132,  155,  134,  135,
 /*  2490 */   155,  137,  138,  155,  140,  141,  142,  143,  144,  145,
 /*  2500 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  104,
 /*  2510 */   155,  155,  155,  155,  109,  110,  111,  155,  155,  155,
 /*  2520 */   155,  116,  155,  118,  119,  120,  155,  155,  155,  155,
 /*  2530 */   155,  155,  127,  155,  129,  155,  131,  132,  155,  134,
 /*  2540 */   155,  155,  137,  138,  155,  140,  141,  142,  143,  144,
 /*  2550 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  2560 */   155,  155,  155,  104,  155,  155,  155,  155,  109,  110,
 /*  2570 */   111,  155,  155,  155,  155,  116,  155,  118,  119,  120,
 /*  2580 */   155,  155,  155,  155,  155,  155,  127,  155,  129,  155,
 /*  2590 */   131,  132,  155,  134,  155,  155,  137,  138,  155,  140,
 /*  2600 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  2610 */   151,  152,  153,  154,  104,  155,  155,  155,  155,  109,
 /*  2620 */   110,  111,  155,  155,  155,  155,  116,  155,  118,  119,
 /*  2630 */   120,  155,  155,  155,  155,  155,  155,  127,  155,  129,
 /*  2640 */   155,  131,  132,  155,  134,  155,  155,  137,  138,  155,
 /*  2650 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  2660 */   150,  151,  152,  153,  154,  155,  155,  155,  104,  155,
 /*  2670 */   155,  155,  155,  109,  110,  111,  155,  155,  155,  155,
 /*  2680 */   116,  155,  118,  119,  120,  155,  155,  155,  155,  155,
 /*  2690 */   155,  127,  155,  129,  155,  131,  132,  155,  134,  155,
 /*  2700 */   155,  137,  138,  155,  140,  141,  142,  143,  144,  145,
 /*  2710 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  104,
 /*  2720 */   155,  155,  155,  155,  109,  110,  111,  155,  155,  155,
 /*  2730 */   155,  116,  155,  118,  119,  120,  155,  155,  155,  155,
 /*  2740 */   155,  155,  127,  155,  129,  155,  131,  132,  155,  134,
 /*  2750 */   155,  155,  137,  138,  155,  140,  141,  142,  143,  144,
 /*  2760 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  2770 */   155,  155,  155,  104,  155,  155,  155,  155,  109,  110,
 /*  2780 */   111,  155,  155,  155,  155,  116,  155,  118,  119,  120,
 /*  2790 */   155,  155,  155,  155,  155,  155,  127,  155,  129,  155,
 /*  2800 */   131,  132,  155,  134,  155,  155,  137,  138,  155,  140,
 /*  2810 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  2820 */   151,  152,  153,  154,  155,  155,  155,  102,  155,  104,
 /*  2830 */   155,  155,  155,  155,  109,  110,  111,  112,  155,  155,
 /*  2840 */   155,  155,  155,  118,  119,  120,  155,  155,  155,  155,
 /*  2850 */   155,  155,  155,  155,  155,  155,  131,  132,  155,  134,
 /*  2860 */   155,  155,  155,  155,  155,  140,  141,  142,  143,  144,
 /*  2870 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  2880 */   155,  119,  155,  104,  155,  155,  155,  155,  109,  110,
 /*  2890 */   111,  155,  155,  155,  132,  155,  134,  118,  119,  120,
 /*  2900 */   155,  155,  140,  155,  155,  155,  155,  155,  155,  155,
 /*  2910 */   131,  132,  155,  134,  152,  153,  154,  155,  155,  140,
 /*  2920 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  2930 */   151,  152,  153,  154,  155,  155,  155,  109,  110,  111,
 /*  2940 */   155,  155,  155,  155,  155,  155,  118,  119,  120,  155,
 /*  2950 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  131,
 /*  2960 */   132,  155,  134,  155,  155,  155,  155,  155,  140,  141,
 /*  2970 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  2980 */   152,  153,  154,  104,  155,  155,  155,  155,  155,  155,
 /*  2990 */   155,  155,  155,  155,  155,  155,  155,  155,  119,  155,
 /*  3000 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3010 */   131,  132,  155,  134,  155,  136,  155,  155,  155,  140,
 /*  3020 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  3030 */   151,  152,  153,  154,  104,  155,  155,  155,  155,  155,
 /*  3040 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  119,
 /*  3050 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3060 */   155,  131,  132,  155,  134,  155,  136,  155,  155,  155,
 /*  3070 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  3080 */   150,  151,  152,  153,  154,  104,  155,  155,  155,  155,
 /*  3090 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3100 */   119,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3110 */   155,  155,  131,  132,  155,  134,  155,  136,  155,  155,
 /*  3120 */   155,  140,  141,  142,  143,  144,  145,  146,  147,  148,
 /*  3130 */   149,  150,  151,  152,  153,  154,  104,  155,  155,  155,
 /*  3140 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3150 */   155,  119,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3160 */   155,  155,  155,  131,  132,  155,  134,  155,  136,  155,
 /*  3170 */   155,  155,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  3180 */   148,  149,  150,  151,  152,  153,  154,  104,  155,  155,
 /*  3190 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3200 */   155,  155,  119,  155,  155,  155,  155,  155,  155,  155,
 /*  3210 */   155,  155,  155,  155,  131,  132,  155,  134,  155,  136,
 /*  3220 */   155,  155,  155,  140,  141,  142,  143,  144,  145,  146,
 /*  3230 */   147,  148,  149,  150,  151,  152,  153,  154,  104,  155,
 /*  3240 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3250 */   155,  155,  155,  119,  155,  155,  155,  155,  155,  155,
 /*  3260 */   155,  155,  155,  155,  155,  131,  132,  155,  134,  155,
 /*  3270 */   136,  155,  155,  155,  140,  141,  142,  143,  144,  145,
 /*  3280 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  104,
 /*  3290 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3300 */   155,  155,  155,  155,  119,  155,  155,  155,  155,  155,
 /*  3310 */   155,  155,  155,  155,  155,  155,  131,  132,  155,  134,
 /*  3320 */   155,  155,  155,  155,  155,  140,  141,  142,  143,  144,
 /*  3330 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  3340 */   104,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3350 */   155,  155,  155,  155,  155,  119,  155,  155,  155,  155,
 /*  3360 */   155,  155,  155,  155,  155,  155,  155,  131,  132,  155,
 /*  3370 */   134,  155,  155,  155,  155,  155,  140,  141,  142,  143,
 /*  3380 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  3390 */   154,  104,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3400 */   155,  155,  155,  155,  155,  155,  119,  155,  155,  155,
 /*  3410 */   155,  155,  155,  155,  155,  155,  155,  155,  131,  132,
 /*  3420 */   155,  134,  155,  155,  155,  155,  155,  140,  141,  142,
 /*  3430 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  3440 */   153,  154,  104,  155,  155,  155,  155,  155,  155,  155,
 /*  3450 */   155,  155,  155,  155,  155,  155,  155,  119,  155,  155,
 /*  3460 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  131,
 /*  3470 */   132,  155,  134,  155,  155,  155,  155,  155,  140,  141,
 /*  3480 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  3490 */   152,  153,  154,  104,  155,  155,  155,  155,  155,  155,
 /*  3500 */   155,  155,  155,  155,  155,  155,  155,  155,  119,  155,
 /*  3510 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3520 */   131,  132,  155,  134,  155,  155,  155,  155,  155,  140,
 /*  3530 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  3540 */   151,  152,  153,  154,  104,  155,  155,  155,  155,  155,
 /*  3550 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  119,
 /*  3560 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3570 */   155,  131,  132,  155,  134,  155,  155,  155,  155,  155,
 /*  3580 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  3590 */   150,  151,  152,  153,  154,  104,  155,  155,  155,  155,
 /*  3600 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3610 */   119,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3620 */   155,  155,  131,  132,  155,  134,  155,  155,  155,  155,
 /*  3630 */   155,  140,  141,  142,  143,  144,  145,  146,  147,  148,
 /*  3640 */   149,  150,  151,  152,  153,  154,  104,  155,  155,  155,
 /*  3650 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3660 */   155,  119,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3670 */   155,  155,  155,  131,  132,  155,  134,  155,  155,  155,
 /*  3680 */   155,  155,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  3690 */   148,  149,  150,  151,  152,  153,  154,  104,  155,  155,
 /*  3700 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3710 */   155,  155,  119,  155,  155,  155,  155,  155,  155,  155,
 /*  3720 */   155,  155,  155,  155,  131,  132,  155,  134,  155,  155,
 /*  3730 */   155,  155,  155,  140,  141,  142,  143,  144,  145,  146,
 /*  3740 */   147,  148,  149,  150,  151,  152,  153,  154,  104,  155,
 /*  3750 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3760 */   155,  155,  155,  119,  155,  155,  155,  155,  155,  155,
 /*  3770 */   155,  155,  155,  155,  155,  131,  132,  155,  134,  155,
 /*  3780 */   155,  155,  155,  155,  140,  141,  142,  143,  144,  145,
 /*  3790 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  104,
 /*  3800 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3810 */   155,  155,  155,  155,  119,  155,  155,  155,  155,  155,
 /*  3820 */   155,  155,  155,  155,  155,  155,  131,  132,  155,  134,
 /*  3830 */   155,  155,  155,  155,  155,  140,  141,  142,  143,  144,
 /*  3840 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  3850 */   104,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  3860 */   155,  155,  155,  155,  155,  119,  155,  155,  155,  155,
 /*  3870 */   155,  155,  155,  155,  155,  155,  155,  131,  132,  155,
 /*  3880 */   134,  155,  155,  155,  155,  155,  140,  141,  142,  143,
 /*  3890 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  3900 */   154,  155,  155,  155,  119,  155,  155,  155,  155,  155,
 /*  3910 */   155,  155,  155,  155,  155,  155,  131,  132,  155,  134,
 /*  3920 */   155,  155,  155,  155,  155,  140,  141,  142,  143,  144,
 /*  3930 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  3940 */   155,  155,  155,  155,  155,  155,  119,  155,  155,  155,
 /*  3950 */   155,  155,  155,  155,  155,  155,  155,  155,  131,  132,
 /*  3960 */   155,  134,  155,  155,  155,  155,  155,  140,  141,  142,
 /*  3970 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  3980 */   153,  154,  155,  155,  155,  119,  155,  155,  155,  155,
 /*  3990 */   155,  155,  155,  155,  155,  155,  155,  131,  132,  155,
 /*  4000 */   134,  155,  155,  155,  155,  155,  140,  141,  142,  143,
 /*  4010 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  4020 */   154,  155,  155,  155,  119,  155,  155,  155,  155,  155,
 /*  4030 */   155,  155,  155,  155,  155,  155,  131,  132,  155,  134,
 /*  4040 */   155,  155,  155,  155,  155,  140,  141,  142,  143,  144,
 /*  4050 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  4060 */   155,  155,  155,  155,  155,  155,  119,  155,  155,  155,
 /*  4070 */   155,  155,  155,  155,  155,  155,  155,  155,  131,  132,
 /*  4080 */   155,  134,  155,  155,  155,  155,  155,  140,  141,  142,
 /*  4090 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  4100 */   153,  154,  155,  155,  155,  119,  155,  155,  155,  155,
 /*  4110 */   155,  155,  155,  155,  155,  155,  155,  131,  132,  155,
 /*  4120 */   134,  155,  155,  155,  155,  155,  140,  141,  142,  143,
 /*  4130 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  4140 */   154,  155,  155,  155,  119,  155,  155,  155,  155,  155,
 /*  4150 */   155,  155,  155,  155,  155,  155,  131,  132,  155,  134,
 /*  4160 */   155,  155,  155,  155,  155,  140,  141,  142,  143,  144,
 /*  4170 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  4180 */   155,  155,  155,  155,  155,  155,  119,  155,  155,  155,
 /*  4190 */   155,  155,  155,  155,  155,  155,  155,  155,  131,  132,
 /*  4200 */   155,  134,  155,  155,  155,  155,  155,  140,  141,  142,
 /*  4210 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  4220 */   153,  154,  155,  155,  155,  119,  155,  155,  155,  155,
 /*  4230 */   155,  155,  155,  155,  155,  155,  155,  131,  132,  155,
 /*  4240 */   134,  155,  155,  155,  155,  155,  140,  141,  142,  143,
 /*  4250 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  4260 */   154,  155,  155,  155,  119,  155,  155,  155,  155,  155,
 /*  4270 */   155,  155,  155,  155,  155,  155,  131,  132,  155,  134,
 /*  4280 */   155,  155,  155,  155,  155,  140,  141,  142,  143,  144,
 /*  4290 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  4300 */   155,  155,  155,  155,  155,  155,  119,  155,  155,  155,
 /*  4310 */   155,  155,  155,  155,  155,  155,  155,  155,  131,  132,
 /*  4320 */   155,  134,  155,  155,  155,  155,  155,  140,  141,  142,
 /*  4330 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  4340 */   153,  154,  155,  155,  155,  119,  155,  155,  155,  155,
 /*  4350 */   155,  155,  155,  155,  155,  155,  155,  131,  132,  155,
 /*  4360 */   134,  155,  155,  155,  155,  155,  140,  155,  142,  143,
 /*  4370 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  4380 */   154,  155,  155,  155,  119,  155,  155,  155,  155,  155,
 /*  4390 */   155,  155,  155,  155,  155,  155,  131,  132,  155,  134,
 /*  4400 */   155,  155,  155,  155,  155,  140,  155,  142,  143,  144,
 /*  4410 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  4420 */   155,  155,  155,  155,  155,  155,  119,  155,  155,  155,
 /*  4430 */   155,  155,  155,  155,  155,  155,  155,  155,  131,  132,
 /*  4440 */   155,  134,  155,  155,  155,  155,  155,  140,  155,  142,
 /*  4450 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  4460 */   153,  154,    4,  155,  155,  155,    8,  155,  155,   11,
 /*  4470 */    12,  155,  155,  155,  155,  155,  155,  155,  155,   21,
 /*  4480 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  4490 */    32,   33,   34,    4,  155,  155,  155,    8,  155,  155,
 /*  4500 */    11,   12,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4510 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  4520 */    31,   32,   33,   34,    1,  155,  155,  119,  155,  155,
 /*  4530 */     7,  155,  155,  155,  155,  155,  119,  155,  155,  155,
 /*  4540 */   132,  155,  134,  155,   21,  155,    1,    2,  140,  132,
 /*  4550 */   155,  134,  155,  155,  155,  155,  155,  140,  150,  151,
 /*  4560 */   152,  153,  154,  155,  155,  155,   21,  155,    1,  152,
 /*  4570 */   153,  154,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4580 */   155,  155,  155,  155,  155,  155,  155,   20,   21,  155,
 /*  4590 */     1,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4600 */   155,   78,  155,  155,  155,   82,   83,   84,   85,   86,
 /*  4610 */    21,   88,   89,   90,   91,   92,   93,   94,  155,  155,
 /*  4620 */   155,  155,  155,   78,  155,  155,  155,   82,   83,   84,
 /*  4630 */    85,   86,  155,   88,   89,   90,   91,   92,   93,   94,
 /*  4640 */   155,  155,  155,  155,  155,   78,  155,  155,  155,   82,
 /*  4650 */    83,   84,   85,   86,  155,   88,   89,   90,   91,   92,
 /*  4660 */    93,   94,  155,  155,  155,  155,  155,   78,  155,  155,
 /*  4670 */   155,   82,   83,   84,   85,   86,  155,   88,   89,   90,
 /*  4680 */    91,   92,   93,   94,  155,  155,  155,  155,  119,  155,
 /*  4690 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4700 */   155,  132,  155,  134,  155,  155,  155,  155,  155,  140,
 /*  4710 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4720 */   151,  152,  153,  154,  155,  119,  155,  155,  119,  155,
 /*  4730 */   155,  155,  119,  155,  155,  119,  155,  155,  132,  155,
 /*  4740 */   134,  132,  155,  134,  155,  132,  140,  134,  132,  140,
 /*  4750 */   134,  155,  155,  140,  155,  155,  140,  151,  152,  153,
 /*  4760 */   154,  152,  153,  154,  155,  152,  153,  154,  152,  153,
 /*  4770 */   154,  119,  155,  155,  155,  119,  155,  155,  119,  155,
 /*  4780 */   155,  155,  155,  155,  132,  155,  134,  155,  132,  155,
 /*  4790 */   134,  132,  140,  134,  155,  155,  140,  155,  155,  140,
 /*  4800 */   155,  119,  155,  155,  152,  153,  154,  155,  152,  153,
 /*  4810 */   154,  152,  153,  154,  132,  155,  134,  155,  155,  155,
 /*  4820 */   155,  155,  140,  155,  155,  155,  155,  155,  155,  155,
 /*  4830 */   155,  155,  155,  155,  152,  153,  154,
};
#define YY_SHIFT_USE_DFLT (4837)
#define YY_SHIFT_COUNT    (271)
#define YY_SHIFT_MIN      (-49)
#define YY_SHIFT_MAX      (4589)
static const short yy_shift_ofst[] = {
 /*     0 */   376,  282,   -1,   -1,  470,  470,  470,  470,  470,  470,
 /*    10 */   564, 1316, 1316, 1316, 1316, 1316,   93,  187,  658,  752,
 /*    20 */   846,  940, 1034, 1128, 1222, 1410, 1410, 1410, 1410, 1611,
 /*    30 */  1645, 1645, 4589, 4589, 4589, 4589, 4589, 4589, 4523, 4545,
 /*    40 */  4567, 4589, 4589, 4589, 4589, 4589, 4589, 4589, 4589, 4589,
 /*    50 */  4589, 4589, 4589, 4589, 4589, 4589, 4589, 4589, 4589, 4589,
 /*    60 */  4589, 4589, 4589, 4589, 4589, 4589, 4589, 4589, 4589, 4589,
 /*    70 */  4589, 4589, 4589, 4589, 4589, 4589, 4589, 4458, 4589, 4589,
 /*    80 */  4489, 4589, 4589, 4589, 4589, 4589, 4589, 4589, 4589, 4589,
 /*    90 */  4489, 4489,  315,  315,   74,  263,  -16,  -16,  -16,  -16,
 /*   100 */    29,  204,   75,   75,  -43,   42,   42,   42,   75,   75,
 /*   110 */    42,  -16,   13,  -16,  -16,  -16,  -16,  -16,  -16,  -49,
 /*   120 */   -49,  -49,  169,   76,  245,  419,  180,  311,  311,  373,
 /*   130 */   408,  408,  308,  411,  348,  378,  378,  450,  498,  -16,
 /*   140 */   542,  579,  378,  498,  498,  -16,  498,  597,  -16,   13,
 /*   150 */   597,  348,  579,  579,  378,  498,  -16,  498,  579,  542,
 /*   160 */    94,  -12,  -12,  -12,   49,   49,   49,  383,  409,  103,
 /*   170 */   236,  451,  356,  412,  197,  223,  432,  438,  473,  481,
 /*   180 */   485,  430,  505,  236,  430,  506,  370,  236,  433,  430,
 /*   190 */   511,  158,  525,  526,  410,  527,  236,  433,  430,  418,
 /*   200 */   512,  547,  236,  236,  236,  236,  236,  236,  433,  430,
 /*   210 */   418,  500,  574,  567,  622,  623,  634,  624,  635,  638,
 /*   220 */   642,  653,  593,  661,  655,  662,  670,  673,  667,  630,
 /*   230 */   671,  692,  646,  693,  677,  690,  691,  681,  694,  700,
 /*   240 */   712,  695,  698,  715,  716,  672,  718,  711,  717,  721,
 /*   250 */   722,  678,  725,  736,  731,  738,  747,  728,  740,  746,
 /*   260 */   744,  756,  765,  764,  702,  719,  764,  702,  719,  593,
 /*   270 */   753,  770,
};
#define YY_REDUCE_USE_DFLT (-116)
#define YY_REDUCE_COUNT (159)
#define YY_REDUCE_MIN   (-115)
#define YY_REDUCE_MAX   (4682)
static const short yy_reduce_ofst[] = {
 /*     0 */  1402, 1457, 1636, 1695, 1753, 1807, 1863, 1917, 1973, 2027,
 /*    10 */  2090, 2144, 2195, 2249, 2300, 2354, 2405, 2405, 2459, 2459,
 /*    20 */  2405, 2459, 2459, 2459, 2459, 2510, 2564, 2615, 2669, 2725,
 /*    30 */  2779, 2828, 2879, 2930, 2981, 3032, 3083, 3134, 3185, 3236,
 /*    40 */  3287, 3338, 3389, 3440, 3491, 3542, 3593, 3644, 3695, 3746,
 /*    50 */  3785, 3827, 3866, 3905, 3947, 3986, 4025, 4067, 4106, 4145,
 /*    60 */  4187, 4226, 4265, 4307,  299,  393,  487,  581,  675,  769,
 /*    70 */   863,  957, 1051, 1145, 1239, 1333, 4408,  142, 4569, 4606,
 /*    80 */   701, 2762, 4417, 4609, 4613, 4616, 4652, 4656, 4659, 4682,
 /*    90 */   148,  795,  -74,  889, 1438, -115,  -21,  -20,   73,  262,
 /*   100 */   -92,   19,   31,   88,  -61,   21,  109,  110,  126,  129,
 /*   110 */   113,  136,   54,  166,  137,  182,  183,  250,  277,  -73,
 /*   120 */   -25,    2,   18,   41,  117,  117,  155,  185,  193,   18,
 /*   130 */   215,  218,  168,  231,  306,  331,  350,  366,  401,  459,
 /*   140 */   441,  486,  479,  469,  471,  483,  474,  507,  484,  492,
 /*   150 */   510,  494,  523,  528,  504,  493,  503,  496,  531,  508,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
 /*    10 */   692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
 /*    20 */   692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
 /*    30 */   692,  692,  739,  739,  739,  739,  739,  739,  821,  821,
 /*    40 */   821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
 /*    50 */   821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
 /*    60 */   821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
 /*    70 */   821,  821,  821,  821,  821,  821,  821,  692,  821,  821,
 /*    80 */   692,  821,  821,  821,  821,  821,  821,  821,  821,  821,
 /*    90 */   692,  692,  692,  692,  821,  821,  821,  821,  821,  821,
 /*   100 */   821,  809,  646,  646,  742,  821,  821,  821,  646,  646,
 /*   110 */   821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
 /*   120 */   821,  821,  809,  821,  661,  661,  821,  683,  682,  821,
 /*   130 */   644,  644,  821,  821,  673,  646,  646,  644,  661,  821,
 /*   140 */   821,  664,  646,  661,  661,  821,  661,  667,  821,  821,
 /*   150 */   667,  673,  664,  664,  646,  661,  821,  661,  664,  821,
 /*   160 */   761,  776,  775,  774,  787,  786,  785,  821,  821,  821,
 /*   170 */   799,  633,  821,  821,  821,  821,  821,  821,  821,  821,
 /*   180 */   821,  780,  821,  791,  781,  821,  802,  790,  784,  779,
 /*   190 */   821,  821,  821,  821,  821,  821,  789,  783,  778,  773,
 /*   200 */   821,  821,  796,  795,  794,  793,  792,  788,  782,  777,
 /*   210 */   772,  763,  821,  821,  687,  684,  821,  821,  821,  821,
 /*   220 */   821,  821,  764,  821,  821,  821,  821,  821,  821,  821,
 /*   230 */   821,  821,  821,  738,  821,  821,  821,  821,  821,  821,
 /*   240 */   821,  821,  821,  821,  821,  722,  821,  821,  821,  821,
 /*   250 */   821,  821,  821,  821,  821,  809,  821,  821,  671,  821,
 /*   260 */   821,  821,  821,  771,  769,  767,  770,  768,  766,  765,
 /*   270 */   821,  653,
};
/********** End of lemon-generated parsing tables *****************************/

/* The next table maps tokens (terminal symbols) into fallback tokens.  
** If a construct like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
**
** This feature can be used, for example, to cause some keywords in a language
** to revert to identifiers if they keyword does not apply in the context where
** it appears.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
**
** After the "shift" half of a SHIFTREDUCE action, the stateno field
** actually contains the reduce action for the second half of the
** SHIFTREDUCE.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  yyStackEntry *yytos;          /* Pointer to top element of the stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyhwm;                    /* High-water mark of the stack */
#endif
#ifndef YYNOERRORRECOVERY
  int yyerrcnt;                 /* Shifts left before out of the error */
#endif
  BTParserARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
  yyStackEntry yystk0;          /* First stack entry */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void BTParserTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "O_ROUND",       "C_ROUND",       "COMMA",       
  "VOID",          "BIN_AND",       "TYPEDEF",       "SEMICOLON",   
  "STRUCT",        "O_CURLY",       "C_CURLY",       "UNION",       
  "ENUM",          "LT",            "GT",            "CONST",       
  "LOCAL",         "ASSIGN",        "COLON",         "O_SQUARE",    
  "C_SQUARE",      "IDENTIFIER",    "BOOL",          "UNSIGNED",    
  "SIGNED",        "WSTRING",       "STRING",        "CHAR",        
  "WCHAR",         "BYTE",          "TIME",          "DOSDATE",     
  "DOSTIME",       "OLETIME",       "FILETIME",      "UCHAR",       
  "UBYTE",         "SHORT",         "USHORT",        "INT32",       
  "UINT32",        "INT64",         "UINT64",        "HFLOAT",      
  "FLOAT",         "DOUBLE",        "IF",            "ELSE",        
  "WHILE",         "FOR",           "DO",            "SWITCH",      
  "BREAK",         "CONTINUE",      "RETURN",        "CASE",        
  "DEFAULT",       "ADD_ASSIGN",    "SUB_ASSIGN",    "MUL_ASSIGN",  
  "DIV_ASSIGN",    "XOR_ASSIGN",    "AND_ASSIGN",    "OR_ASSIGN",   
  "LS_ASSIGN",     "RS_ASSIGN",     "QUESTION",      "LOG_OR",      
  "LOG_AND",       "BIN_OR",        "BIN_XOR",       "EQ",          
  "NE",            "LE",            "GE",            "LSL",         
  "LSR",           "ADD",           "SUB",           "MUL",         
  "DIV",           "MOD",           "LOG_NOT",       "BIN_NOT",     
  "INC",           "DEC",           "SIZEOF",        "DOT",         
  "LITERAL_STRING",  "LITERAL_OCT",   "LITERAL_DEC",   "LITERAL_HEX", 
  "LITERAL_REAL",  "TRUE",          "FALSE",         "error",       
  "stm_list",      "var_list",      "var_list_no_assign",  "case_stms",   
  "enum_def",      "struct_stms",   "params",        "decls",       
  "expr",          "args_decl",     "custom_vars",   "custom_var_decl",
  "scalar",        "string",        "character",     "datetime",    
  "param",         "var",           "var_no_assign",  "custom_var",  
  "block",         "enum_type",     "type",          "id",          
  "sign",          "program",       "decl",          "func_decl",   
  "struct_decl",   "union_decl",    "enum_decl",     "var_decl",    
  "typedef_decl",  "stm",           "array",         "op_if",       
  "number",        "enum_val",      "literal",       "then_stm",    
  "arg",           "normal_stm",    "return_stm",    "case_stm",    
  "value",         "op_assign",     "op_or",         "op_and",      
  "op_binor",      "op_binxor",     "op_binand",     "op_equate",   
  "op_compare",    "op_shift",      "op_add",        "op_mult",     
  "op_unary",      "op_pointer",    "boolean",     
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= decls",
 /*   1 */ "decls ::= decls decl",
 /*   2 */ "decls ::= decl",
 /*   3 */ "decl ::= func_decl",
 /*   4 */ "decl ::= struct_decl",
 /*   5 */ "decl ::= union_decl",
 /*   6 */ "decl ::= enum_decl",
 /*   7 */ "decl ::= var_decl",
 /*   8 */ "decl ::= typedef_decl",
 /*   9 */ "decl ::= stm",
 /*  10 */ "func_decl ::= type id O_ROUND params C_ROUND block",
 /*  11 */ "func_decl ::= type id O_ROUND C_ROUND block",
 /*  12 */ "params ::= params COMMA param",
 /*  13 */ "params ::= param",
 /*  14 */ "params ::= VOID",
 /*  15 */ "param ::= type BIN_AND id array",
 /*  16 */ "param ::= type id array",
 /*  17 */ "param ::= id BIN_AND id array",
 /*  18 */ "param ::= id id array",
 /*  19 */ "typedef_decl ::= TYPEDEF type id array custom_var_decl SEMICOLON",
 /*  20 */ "struct_decl ::= STRUCT id args_decl O_CURLY struct_stms C_CURLY custom_var_decl SEMICOLON",
 /*  21 */ "union_decl ::= UNION id args_decl O_CURLY struct_stms C_CURLY custom_var_decl SEMICOLON",
 /*  22 */ "enum_decl ::= ENUM enum_type id O_CURLY enum_def C_CURLY SEMICOLON",
 /*  23 */ "enum_decl ::= ENUM enum_type O_CURLY enum_def C_CURLY SEMICOLON",
 /*  24 */ "custom_var_decl ::= LT custom_vars GT",
 /*  25 */ "custom_var_decl ::=",
 /*  26 */ "args_decl ::= O_ROUND params C_ROUND",
 /*  27 */ "args_decl ::=",
 /*  28 */ "var_decl ::= CONST type var var_list SEMICOLON",
 /*  29 */ "var_decl ::= CONST id var var_list SEMICOLON",
 /*  30 */ "var_decl ::= LOCAL type var var_list SEMICOLON",
 /*  31 */ "var_decl ::= LOCAL id var var_list SEMICOLON",
 /*  32 */ "var_decl ::= type var_no_assign var_list_no_assign custom_var_decl SEMICOLON",
 /*  33 */ "var_decl ::= id var_no_assign var_list_no_assign custom_var_decl SEMICOLON",
 /*  34 */ "var ::= id array",
 /*  35 */ "var ::= id array ASSIGN op_if",
 /*  36 */ "var_no_assign ::= id array",
 /*  37 */ "var_no_assign ::= id COLON number",
 /*  38 */ "var_no_assign ::= id O_ROUND expr C_ROUND",
 /*  39 */ "var_no_assign ::= COLON number",
 /*  40 */ "array ::= O_SQUARE expr C_SQUARE",
 /*  41 */ "array ::= O_SQUARE C_SQUARE",
 /*  42 */ "array ::=",
 /*  43 */ "var_list ::= var_list COMMA var",
 /*  44 */ "var_list ::= COMMA var",
 /*  45 */ "var_list ::=",
 /*  46 */ "var_list_no_assign ::= var_list_no_assign COMMA var_no_assign",
 /*  47 */ "var_list_no_assign ::= COMMA var_no_assign",
 /*  48 */ "var_list_no_assign ::=",
 /*  49 */ "enum_def ::= enum_def COMMA enum_val",
 /*  50 */ "enum_def ::= enum_val",
 /*  51 */ "enum_val ::= id ASSIGN number",
 /*  52 */ "enum_val ::= id",
 /*  53 */ "enum_type ::= LT type GT",
 /*  54 */ "enum_type ::=",
 /*  55 */ "custom_vars ::= custom_vars COMMA custom_var",
 /*  56 */ "custom_vars ::= custom_var",
 /*  57 */ "custom_var ::= IDENTIFIER ASSIGN id",
 /*  58 */ "custom_var ::= IDENTIFIER ASSIGN literal",
 /*  59 */ "type ::= sign scalar",
 /*  60 */ "type ::= sign character",
 /*  61 */ "type ::= string",
 /*  62 */ "type ::= datetime",
 /*  63 */ "type ::= STRUCT id args_decl O_CURLY struct_stms C_CURLY",
 /*  64 */ "type ::= UNION id args_decl O_CURLY struct_stms C_CURLY",
 /*  65 */ "type ::= ENUM enum_type id O_CURLY enum_def C_CURLY",
 /*  66 */ "type ::= STRUCT args_decl O_CURLY struct_stms C_CURLY",
 /*  67 */ "type ::= UNION args_decl O_CURLY struct_stms C_CURLY",
 /*  68 */ "type ::= ENUM enum_type O_CURLY enum_def C_CURLY",
 /*  69 */ "type ::= VOID",
 /*  70 */ "type ::= BOOL",
 /*  71 */ "sign ::= UNSIGNED",
 /*  72 */ "sign ::= SIGNED",
 /*  73 */ "sign ::=",
 /*  74 */ "string ::= WSTRING",
 /*  75 */ "string ::= STRING",
 /*  76 */ "string ::= character",
 /*  77 */ "character ::= CHAR",
 /*  78 */ "character ::= WCHAR",
 /*  79 */ "character ::= BYTE",
 /*  80 */ "datetime ::= TIME",
 /*  81 */ "datetime ::= DOSDATE",
 /*  82 */ "datetime ::= DOSTIME",
 /*  83 */ "datetime ::= OLETIME",
 /*  84 */ "datetime ::= FILETIME",
 /*  85 */ "scalar ::= UCHAR",
 /*  86 */ "scalar ::= UBYTE",
 /*  87 */ "scalar ::= SHORT",
 /*  88 */ "scalar ::= USHORT",
 /*  89 */ "scalar ::= INT32",
 /*  90 */ "scalar ::= UINT32",
 /*  91 */ "scalar ::= INT64",
 /*  92 */ "scalar ::= UINT64",
 /*  93 */ "scalar ::= HFLOAT",
 /*  94 */ "scalar ::= FLOAT",
 /*  95 */ "scalar ::= DOUBLE",
 /*  96 */ "struct_stms ::= struct_stms stm",
 /*  97 */ "struct_stms ::= stm",
 /*  98 */ "struct_stms ::=",
 /*  99 */ "stm ::= IF O_ROUND expr C_ROUND stm",
 /* 100 */ "stm ::= IF O_ROUND expr C_ROUND then_stm ELSE stm",
 /* 101 */ "stm ::= WHILE O_ROUND expr C_ROUND stm",
 /* 102 */ "stm ::= FOR O_ROUND arg SEMICOLON arg SEMICOLON arg C_ROUND stm",
 /* 103 */ "stm ::= normal_stm",
 /* 104 */ "then_stm ::= IF O_ROUND expr C_ROUND then_stm ELSE then_stm",
 /* 105 */ "then_stm ::= WHILE O_ROUND expr C_ROUND then_stm",
 /* 106 */ "then_stm ::= FOR O_ROUND arg SEMICOLON arg SEMICOLON arg C_ROUND then_stm",
 /* 107 */ "then_stm ::= normal_stm",
 /* 108 */ "normal_stm ::= DO stm WHILE O_ROUND expr C_ROUND SEMICOLON",
 /* 109 */ "normal_stm ::= SWITCH O_ROUND expr C_ROUND O_CURLY case_stms C_CURLY",
 /* 110 */ "normal_stm ::= var_decl",
 /* 111 */ "normal_stm ::= block",
 /* 112 */ "normal_stm ::= return_stm",
 /* 113 */ "normal_stm ::= expr SEMICOLON",
 /* 114 */ "normal_stm ::= BREAK SEMICOLON",
 /* 115 */ "normal_stm ::= CONTINUE SEMICOLON",
 /* 116 */ "normal_stm ::= SEMICOLON",
 /* 117 */ "return_stm ::= RETURN expr SEMICOLON",
 /* 118 */ "return_stm ::= RETURN SEMICOLON",
 /* 119 */ "arg ::= expr",
 /* 120 */ "arg ::=",
 /* 121 */ "case_stms ::= case_stms case_stm",
 /* 122 */ "case_stms ::= case_stm",
 /* 123 */ "case_stms ::=",
 /* 124 */ "case_stm ::= CASE value COLON stm_list",
 /* 125 */ "case_stm ::= DEFAULT COLON stm_list",
 /* 126 */ "block ::= O_CURLY stm_list C_CURLY",
 /* 127 */ "stm_list ::= stm_list stm",
 /* 128 */ "stm_list ::= stm",
 /* 129 */ "stm_list ::=",
 /* 130 */ "expr ::= expr COMMA op_assign",
 /* 131 */ "expr ::= op_assign",
 /* 132 */ "op_assign ::= op_if ASSIGN op_assign",
 /* 133 */ "op_assign ::= op_if ADD_ASSIGN op_assign",
 /* 134 */ "op_assign ::= op_if SUB_ASSIGN op_assign",
 /* 135 */ "op_assign ::= op_if MUL_ASSIGN op_assign",
 /* 136 */ "op_assign ::= op_if DIV_ASSIGN op_assign",
 /* 137 */ "op_assign ::= op_if XOR_ASSIGN op_assign",
 /* 138 */ "op_assign ::= op_if AND_ASSIGN op_assign",
 /* 139 */ "op_assign ::= op_if OR_ASSIGN op_assign",
 /* 140 */ "op_assign ::= op_if LS_ASSIGN op_assign",
 /* 141 */ "op_assign ::= op_if RS_ASSIGN op_assign",
 /* 142 */ "op_assign ::= op_if",
 /* 143 */ "op_if ::= op_or QUESTION op_if COLON op_if",
 /* 144 */ "op_if ::= op_or",
 /* 145 */ "op_or ::= op_or LOG_OR op_and",
 /* 146 */ "op_or ::= op_and",
 /* 147 */ "op_and ::= op_and LOG_AND op_binor",
 /* 148 */ "op_and ::= op_binor",
 /* 149 */ "op_binor ::= op_binor BIN_OR op_binxor",
 /* 150 */ "op_binor ::= op_binxor",
 /* 151 */ "op_binxor ::= op_binxor BIN_XOR op_binand",
 /* 152 */ "op_binxor ::= op_binand",
 /* 153 */ "op_binand ::= op_binand BIN_AND op_equate",
 /* 154 */ "op_binand ::= op_equate",
 /* 155 */ "op_equate ::= op_equate EQ op_compare",
 /* 156 */ "op_equate ::= op_equate NE op_compare",
 /* 157 */ "op_equate ::= op_compare",
 /* 158 */ "op_compare ::= op_compare LT op_shift",
 /* 159 */ "op_compare ::= op_compare GT op_shift",
 /* 160 */ "op_compare ::= op_compare LE op_shift",
 /* 161 */ "op_compare ::= op_compare GE op_shift",
 /* 162 */ "op_compare ::= op_shift",
 /* 163 */ "op_shift ::= op_shift LSL op_add",
 /* 164 */ "op_shift ::= op_shift LSR op_add",
 /* 165 */ "op_shift ::= op_add",
 /* 166 */ "op_add ::= op_add ADD op_mult",
 /* 167 */ "op_add ::= op_add SUB op_mult",
 /* 168 */ "op_add ::= op_mult",
 /* 169 */ "op_mult ::= op_mult MUL op_unary",
 /* 170 */ "op_mult ::= op_mult DIV op_unary",
 /* 171 */ "op_mult ::= op_mult MOD op_unary",
 /* 172 */ "op_mult ::= op_unary",
 /* 173 */ "op_unary ::= LOG_NOT op_unary",
 /* 174 */ "op_unary ::= BIN_NOT op_unary",
 /* 175 */ "op_unary ::= SUB op_unary",
 /* 176 */ "op_unary ::= INC op_unary",
 /* 177 */ "op_unary ::= DEC op_unary",
 /* 178 */ "op_unary ::= op_unary INC",
 /* 179 */ "op_unary ::= op_unary DEC",
 /* 180 */ "op_unary ::= O_ROUND type C_ROUND op_unary",
 /* 181 */ "op_unary ::= SIZEOF O_ROUND type C_ROUND",
 /* 182 */ "op_unary ::= SIZEOF O_ROUND op_assign C_ROUND",
 /* 183 */ "op_unary ::= op_pointer",
 /* 184 */ "op_pointer ::= op_pointer DOT id",
 /* 185 */ "op_pointer ::= op_pointer O_SQUARE expr C_SQUARE",
 /* 186 */ "op_pointer ::= value",
 /* 187 */ "value ::= O_ROUND expr C_ROUND",
 /* 188 */ "value ::= id O_ROUND expr C_ROUND",
 /* 189 */ "value ::= id O_ROUND C_ROUND",
 /* 190 */ "value ::= id",
 /* 191 */ "value ::= literal",
 /* 192 */ "literal ::= LITERAL_STRING",
 /* 193 */ "literal ::= boolean",
 /* 194 */ "literal ::= number",
 /* 195 */ "number ::= LITERAL_OCT",
 /* 196 */ "number ::= LITERAL_DEC",
 /* 197 */ "number ::= LITERAL_HEX",
 /* 198 */ "number ::= LITERAL_REAL",
 /* 199 */ "boolean ::= TRUE",
 /* 200 */ "boolean ::= FALSE",
 /* 201 */ "id ::= IDENTIFIER",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.  Return the number
** of errors.  Return 0 on success.
*/
static int yyGrowStack(yyParser *p){
  int newSize;
  int idx;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  idx = p->yytos ? (int)(p->yytos - p->yystack) : 0;
  if( p->yystack==&p->yystk0 ){
    pNew = malloc(newSize*sizeof(pNew[0]));
    if( pNew ) pNew[0] = p->yystk0;
  }else{
    pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  }
  if( pNew ){
    p->yystack = pNew;
    p->yytos = &p->yystack[idx];
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows from %d to %d entries.\n",
              yyTracePrompt, p->yystksz, newSize);
    }
#endif
    p->yystksz = newSize;
  }
  return pNew==0; 
}
#endif

/* Datatype of the argument to the memory allocated passed as the
** second argument to BTParserAlloc() below.  This can be changed by
** putting an appropriate #define in the %include section of the input
** grammar.
*/
#ifndef YYMALLOCARGTYPE
# define YYMALLOCARGTYPE size_t
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to BTParser and BTParserFree.
*/
void *BTParserAlloc(void *(*mallocProc)(YYMALLOCARGTYPE)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (YYMALLOCARGTYPE)sizeof(yyParser) );
  if( pParser ){
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyhwm = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yytos = NULL;
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    if( yyGrowStack(pParser) ){
      pParser->yystack = &pParser->yystk0;
      pParser->yystksz = 1;
    }
#endif
#ifndef YYNOERRORRECOVERY
    pParser->yyerrcnt = -1;
#endif
    pParser->yytos = pParser->yystack;
    pParser->yystack[0].stateno = 0;
    pParser->yystack[0].major = 0;
  }
  return pParser;
}

/* The following function deletes the "minor type" or semantic value
** associated with a symbol.  The symbol can be either a terminal
** or nonterminal. "yymajor" is the symbol code, and "yypminor" is
** a pointer to the value to be deleted.  The code used to do the 
** deletions is derived from the %destructor and/or %token_destructor
** directives of the input grammar.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  BTParserARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are *not* used
    ** inside the C code.
    */
/********* Begin destructor definitions ***************************************/
/********* End destructor definitions *****************************************/
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
*/
static void yy_pop_parser_stack(yyParser *pParser){
  yyStackEntry *yytos;
  assert( pParser->yytos!=0 );
  assert( pParser->yytos > pParser->yystack );
  yytos = pParser->yytos--;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yy_destructor(pParser, yytos->major, &yytos->minor);
}

/* 
** Deallocate and destroy a parser.  Destructors are called for
** all stack elements before shutting the parser down.
**
** If the YYPARSEFREENEVERNULL macro exists (for example because it
** is defined in a %include section of the input grammar) then it is
** assumed that the input pointer is never NULL.
*/
void BTParserFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
#ifndef YYPARSEFREENEVERNULL
  if( pParser==0 ) return;
#endif
  while( pParser->yytos>pParser->yystack ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  if( pParser->yystack!=&pParser->yystk0 ) free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int BTParserStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyhwm;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
*/
static unsigned int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yytos->stateno;
 
  if( stateno>=YY_MIN_REDUCE ) return stateno;
  assert( stateno <= YY_SHIFT_COUNT );
  do{
    i = yy_shift_ofst[stateno];
    assert( iLookAhead!=YYNOCODE );
    i += iLookAhead;
    if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        assert( yyFallback[iFallback]==0 ); /* Fallback loop must terminate */
        iLookAhead = iFallback;
        continue;
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD && iLookAhead>0
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead],
               yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
      return yy_default[stateno];
    }else{
      return yy_action[i];
    }
  }while(1);
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser){
   BTParserARG_FETCH;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
/******** Begin %stack_overflow code ******************************************/
#line 20 "bt_parser.y"

    btvm->error("Stack overflow");
#line 1888 "bt_parser.c"
/******** End %stack_overflow code ********************************************/
   BTParserARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Print tracing information for a SHIFT action
*/
#ifndef NDEBUG
static void yyTraceShift(yyParser *yypParser, int yyNewState){
  if( yyTraceFILE ){
    if( yyNewState<YYNSTATE ){
      fprintf(yyTraceFILE,"%sShift '%s', go to state %d\n",
         yyTracePrompt,yyTokenName[yypParser->yytos->major],
         yyNewState);
    }else{
      fprintf(yyTraceFILE,"%sShift '%s'\n",
         yyTracePrompt,yyTokenName[yypParser->yytos->major]);
    }
  }
}
#else
# define yyTraceShift(X,Y)
#endif

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  BTParserTOKENTYPE yyMinor        /* The minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yytos++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
    yypParser->yyhwm++;
    assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack) );
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yytos>=&yypParser->yystack[YYSTACKDEPTH] ){
    yypParser->yytos--;
    yyStackOverflow(yypParser);
    return;
  }
#else
  if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz] ){
    if( yyGrowStack(yypParser) ){
      yypParser->yytos--;
      yyStackOverflow(yypParser);
      return;
    }
  }
#endif
  if( yyNewState > YY_MAX_SHIFT ){
    yyNewState += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
  }
  yytos = yypParser->yytos;
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor.yy0 = yyMinor;
  yyTraceShift(yypParser, yyNewState);
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 121, 1 },
  { 103, 2 },
  { 103, 1 },
  { 122, 1 },
  { 122, 1 },
  { 122, 1 },
  { 122, 1 },
  { 122, 1 },
  { 122, 1 },
  { 122, 1 },
  { 123, 6 },
  { 123, 5 },
  { 102, 3 },
  { 102, 1 },
  { 102, 1 },
  { 112, 4 },
  { 112, 3 },
  { 112, 4 },
  { 112, 3 },
  { 128, 6 },
  { 124, 8 },
  { 125, 8 },
  { 126, 7 },
  { 126, 6 },
  { 107, 3 },
  { 107, 0 },
  { 105, 3 },
  { 105, 0 },
  { 127, 5 },
  { 127, 5 },
  { 127, 5 },
  { 127, 5 },
  { 127, 5 },
  { 127, 5 },
  { 113, 2 },
  { 113, 4 },
  { 114, 2 },
  { 114, 3 },
  { 114, 4 },
  { 114, 2 },
  { 130, 3 },
  { 130, 2 },
  { 130, 0 },
  { 97, 3 },
  { 97, 2 },
  { 97, 0 },
  { 98, 3 },
  { 98, 2 },
  { 98, 0 },
  { 100, 3 },
  { 100, 1 },
  { 133, 3 },
  { 133, 1 },
  { 117, 3 },
  { 117, 0 },
  { 106, 3 },
  { 106, 1 },
  { 115, 3 },
  { 115, 3 },
  { 118, 2 },
  { 118, 2 },
  { 118, 1 },
  { 118, 1 },
  { 118, 6 },
  { 118, 6 },
  { 118, 6 },
  { 118, 5 },
  { 118, 5 },
  { 118, 5 },
  { 118, 1 },
  { 118, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 0 },
  { 109, 1 },
  { 109, 1 },
  { 109, 1 },
  { 110, 1 },
  { 110, 1 },
  { 110, 1 },
  { 111, 1 },
  { 111, 1 },
  { 111, 1 },
  { 111, 1 },
  { 111, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 108, 1 },
  { 101, 2 },
  { 101, 1 },
  { 101, 0 },
  { 129, 5 },
  { 129, 7 },
  { 129, 5 },
  { 129, 9 },
  { 129, 1 },
  { 135, 7 },
  { 135, 5 },
  { 135, 9 },
  { 135, 1 },
  { 137, 7 },
  { 137, 7 },
  { 137, 1 },
  { 137, 1 },
  { 137, 1 },
  { 137, 2 },
  { 137, 2 },
  { 137, 2 },
  { 137, 1 },
  { 138, 3 },
  { 138, 2 },
  { 136, 1 },
  { 136, 0 },
  { 99, 2 },
  { 99, 1 },
  { 99, 0 },
  { 139, 4 },
  { 139, 3 },
  { 116, 3 },
  { 96, 2 },
  { 96, 1 },
  { 96, 0 },
  { 104, 3 },
  { 104, 1 },
  { 141, 3 },
  { 141, 3 },
  { 141, 3 },
  { 141, 3 },
  { 141, 3 },
  { 141, 3 },
  { 141, 3 },
  { 141, 3 },
  { 141, 3 },
  { 141, 3 },
  { 141, 1 },
  { 131, 5 },
  { 131, 1 },
  { 142, 3 },
  { 142, 1 },
  { 143, 3 },
  { 143, 1 },
  { 144, 3 },
  { 144, 1 },
  { 145, 3 },
  { 145, 1 },
  { 146, 3 },
  { 146, 1 },
  { 147, 3 },
  { 147, 3 },
  { 147, 1 },
  { 148, 3 },
  { 148, 3 },
  { 148, 3 },
  { 148, 3 },
  { 148, 1 },
  { 149, 3 },
  { 149, 3 },
  { 149, 1 },
  { 150, 3 },
  { 150, 3 },
  { 150, 1 },
  { 151, 3 },
  { 151, 3 },
  { 151, 3 },
  { 151, 1 },
  { 152, 2 },
  { 152, 2 },
  { 152, 2 },
  { 152, 2 },
  { 152, 2 },
  { 152, 2 },
  { 152, 2 },
  { 152, 4 },
  { 152, 4 },
  { 152, 4 },
  { 152, 1 },
  { 153, 3 },
  { 153, 4 },
  { 153, 1 },
  { 140, 3 },
  { 140, 4 },
  { 140, 3 },
  { 140, 1 },
  { 140, 1 },
  { 134, 1 },
  { 134, 1 },
  { 134, 1 },
  { 132, 1 },
  { 132, 1 },
  { 132, 1 },
  { 132, 1 },
  { 154, 1 },
  { 154, 1 },
  { 119, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  unsigned int yyruleno        /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  BTParserARG_FETCH;
  yymsp = yypParser->yytos;
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    yysize = yyRuleInfo[yyruleno].nrhs;
    fprintf(yyTraceFILE, "%sReduce [%s], go to state %d.\n", yyTracePrompt,
      yyRuleName[yyruleno], yymsp[-yysize].stateno);
  }
#endif /* NDEBUG */

  /* Check that the stack is large enough to grow by a single entry
  ** if the RHS of the rule is empty.  This ensures that there is room
  ** enough on the stack to push the LHS value */
  if( yyRuleInfo[yyruleno].nrhs==0 ){
#ifdef YYTRACKMAXSTACKDEPTH
    if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
      yypParser->yyhwm++;
      assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack));
    }
#endif
#if YYSTACKDEPTH>0 
    if( yypParser->yytos>=&yypParser->yystack[YYSTACKDEPTH-1] ){
      yyStackOverflow(yypParser);
      return;
    }
#else
    if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz-1] ){
      if( yyGrowStack(yypParser) ){
        yyStackOverflow(yypParser);
        return;
      }
      yymsp = yypParser->yytos;
    }
#endif
  }

  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
/********** Begin reduce actions **********************************************/
        YYMINORTYPE yylhsminor;
      case 0: /* program ::= decls */
#line 50 "bt_parser.y"
{ btvm->loadAST(new NBlock(*yymsp[0].minor.yy247)); delete yymsp[0].minor.yy247; }
#line 2230 "bt_parser.c"
        break;
      case 1: /* decls ::= decls decl */
      case 96: /* struct_stms ::= struct_stms stm */ yytestcase(yyruleno==96);
      case 121: /* case_stms ::= case_stms case_stm */ yytestcase(yyruleno==121);
      case 127: /* stm_list ::= stm_list stm */ yytestcase(yyruleno==127);
#line 52 "bt_parser.y"
{ yymsp[-1].minor.yy247->push_back(yymsp[0].minor.yy291); }
#line 2238 "bt_parser.c"
        break;
      case 2: /* decls ::= decl */
      case 50: /* enum_def ::= enum_val */ yytestcase(yyruleno==50);
      case 97: /* struct_stms ::= stm */ yytestcase(yyruleno==97);
      case 122: /* case_stms ::= case_stm */ yytestcase(yyruleno==122);
      case 128: /* stm_list ::= stm */ yytestcase(yyruleno==128);
      case 131: /* expr ::= op_assign */ yytestcase(yyruleno==131);
#line 53 "bt_parser.y"
{ yylhsminor.yy247 = new NodeList(); yylhsminor.yy247->push_back(yymsp[0].minor.yy291); }
#line 2248 "bt_parser.c"
  yymsp[0].minor.yy247 = yylhsminor.yy247;
        break;
      case 3: /* decl ::= func_decl */
      case 4: /* decl ::= struct_decl */ yytestcase(yyruleno==4);
      case 5: /* decl ::= union_decl */ yytestcase(yyruleno==5);
      case 6: /* decl ::= enum_decl */ yytestcase(yyruleno==6);
      case 7: /* decl ::= var_decl */ yytestcase(yyruleno==7);
      case 8: /* decl ::= typedef_decl */ yytestcase(yyruleno==8);
      case 9: /* decl ::= stm */ yytestcase(yyruleno==9);
      case 103: /* stm ::= normal_stm */ yytestcase(yyruleno==103);
      case 107: /* then_stm ::= normal_stm */ yytestcase(yyruleno==107);
      case 110: /* normal_stm ::= var_decl */ yytestcase(yyruleno==110);
      case 112: /* normal_stm ::= return_stm */ yytestcase(yyruleno==112);
      case 142: /* op_assign ::= op_if */ yytestcase(yyruleno==142);
      case 144: /* op_if ::= op_or */ yytestcase(yyruleno==144);
      case 146: /* op_or ::= op_and */ yytestcase(yyruleno==146);
      case 148: /* op_and ::= op_binor */ yytestcase(yyruleno==148);
      case 150: /* op_binor ::= op_binxor */ yytestcase(yyruleno==150);
      case 152: /* op_binxor ::= op_binand */ yytestcase(yyruleno==152);
      case 154: /* op_binand ::= op_equate */ yytestcase(yyruleno==154);
      case 157: /* op_equate ::= op_compare */ yytestcase(yyruleno==157);
      case 162: /* op_compare ::= op_shift */ yytestcase(yyruleno==162);
      case 165: /* op_shift ::= op_add */ yytestcase(yyruleno==165);
      case 168: /* op_add ::= op_mult */ yytestcase(yyruleno==168);
      case 172: /* op_mult ::= op_unary */ yytestcase(yyruleno==172);
      case 183: /* op_unary ::= op_pointer */ yytestcase(yyruleno==183);
      case 186: /* op_pointer ::= value */ yytestcase(yyruleno==186);
      case 191: /* value ::= literal */ yytestcase(yyruleno==191);
      case 193: /* literal ::= boolean */ yytestcase(yyruleno==193);
      case 194: /* literal ::= number */ yytestcase(yyruleno==194);
#line 55 "bt_parser.y"
{ yylhsminor.yy291 = yymsp[0].minor.yy291; }
#line 2281 "bt_parser.c"
  yymsp[0].minor.yy291 = yylhsminor.yy291;
        break;
      case 10: /* func_decl ::= type id O_ROUND params C_ROUND block */
#line 67 "bt_parser.y"
{ yylhsminor.yy291 = new NFunction(yymsp[-5].minor.yy49, yymsp[-4].minor.yy188, *yymsp[-2].minor.yy247, yymsp[0].minor.yy16); delete yymsp[-2].minor.yy247; }
#line 2287 "bt_parser.c"
  yymsp[-5].minor.yy291 = yylhsminor.yy291;
        break;
      case 11: /* func_decl ::= type id O_ROUND C_ROUND block */
#line 68 "bt_parser.y"
{ yylhsminor.yy291 = new NFunction(yymsp[-4].minor.yy49, yymsp[-3].minor.yy188, yymsp[0].minor.yy16); }
#line 2293 "bt_parser.c"
  yymsp[-4].minor.yy291 = yylhsminor.yy291;
        break;
      case 12: /* params ::= params COMMA param */
#line 70 "bt_parser.y"
{ yymsp[-2].minor.yy247->push_back(yymsp[0].minor.yy293); }
#line 2299 "bt_parser.c"
        break;
      case 13: /* params ::= param */
#line 71 "bt_parser.y"
{ yylhsminor.yy247 = new NodeList(); yylhsminor.yy247->push_back(yymsp[0].minor.yy293); }
#line 2304 "bt_parser.c"
  yymsp[0].minor.yy247 = yylhsminor.yy247;
        break;
      case 14: /* params ::= VOID */
#line 72 "bt_parser.y"
{ yymsp[0].minor.yy247 = new NodeList(); }
#line 2310 "bt_parser.c"
        break;
      case 15: /* param ::= type BIN_AND id array */
#line 74 "bt_parser.y"
{ yylhsminor.yy293 = new NArgument(yymsp[-3].minor.yy49, yymsp[-1].minor.yy188, yymsp[0].minor.yy291); yylhsminor.yy293->by_reference = true; }
#line 2315 "bt_parser.c"
  yymsp[-3].minor.yy293 = yylhsminor.yy293;
        break;
      case 16: /* param ::= type id array */
#line 75 "bt_parser.y"
{ yylhsminor.yy293 = new NArgument(yymsp[-2].minor.yy49, yymsp[-1].minor.yy188, yymsp[0].minor.yy291); }
#line 2321 "bt_parser.c"
  yymsp[-2].minor.yy293 = yylhsminor.yy293;
        break;
      case 17: /* param ::= id BIN_AND id array */
#line 76 "bt_parser.y"
{ yylhsminor.yy293 = new NArgument(yymsp[-3].minor.yy188, yymsp[-1].minor.yy188, yymsp[0].minor.yy291); yylhsminor.yy293->by_reference = true; }
#line 2327 "bt_parser.c"
  yymsp[-3].minor.yy293 = yylhsminor.yy293;
        break;
      case 18: /* param ::= id id array */
#line 77 "bt_parser.y"
{ yylhsminor.yy293 = new NArgument(yymsp[-2].minor.yy188, yymsp[-1].minor.yy188, yymsp[0].minor.yy291); }
#line 2333 "bt_parser.c"
  yymsp[-2].minor.yy293 = yylhsminor.yy293;
        break;
      case 19: /* typedef_decl ::= TYPEDEF type id array custom_var_decl SEMICOLON */
#line 83 "bt_parser.y"
{ yymsp[-5].minor.yy291 = new NTypedef(yymsp[-4].minor.yy49, yymsp[-3].minor.yy188, *yymsp[-1].minor.yy247); yymsp[-4].minor.yy49->size = yymsp[-2].minor.yy291; delete yymsp[-1].minor.yy247; }
#line 2339 "bt_parser.c"
        break;
      case 20: /* struct_decl ::= STRUCT id args_decl O_CURLY struct_stms C_CURLY custom_var_decl SEMICOLON */
#line 85 "bt_parser.y"
{ yymsp[-7].minor.yy291 = new NStruct(yymsp[-6].minor.yy188, *yymsp[-5].minor.yy247, *yymsp[-3].minor.yy247, *yymsp[-1].minor.yy247); delete yymsp[-5].minor.yy247; delete yymsp[-3].minor.yy247; delete yymsp[-1].minor.yy247; }
#line 2344 "bt_parser.c"
        break;
      case 21: /* union_decl ::= UNION id args_decl O_CURLY struct_stms C_CURLY custom_var_decl SEMICOLON */
#line 87 "bt_parser.y"
{ yymsp[-7].minor.yy291 = new NUnion(yymsp[-6].minor.yy188, *yymsp[-5].minor.yy247, *yymsp[-3].minor.yy247, *yymsp[-1].minor.yy247); delete yymsp[-5].minor.yy247; delete yymsp[-3].minor.yy247; delete yymsp[-1].minor.yy247; }
#line 2349 "bt_parser.c"
        break;
      case 22: /* enum_decl ::= ENUM enum_type id O_CURLY enum_def C_CURLY SEMICOLON */
#line 89 "bt_parser.y"
{ yymsp[-6].minor.yy291 = new NEnum(yymsp[-4].minor.yy188, *yymsp[-2].minor.yy247, yymsp[-5].minor.yy49); delete yymsp[-2].minor.yy247; }
#line 2354 "bt_parser.c"
        break;
      case 23: /* enum_decl ::= ENUM enum_type O_CURLY enum_def C_CURLY SEMICOLON */
#line 90 "bt_parser.y"
{ yymsp[-5].minor.yy291 = new NEnum(*yymsp[-2].minor.yy247, yymsp[-4].minor.yy49); delete yymsp[-2].minor.yy247; }
#line 2359 "bt_parser.c"
        break;
      case 24: /* custom_var_decl ::= LT custom_vars GT */
      case 26: /* args_decl ::= O_ROUND params C_ROUND */ yytestcase(yyruleno==26);
#line 92 "bt_parser.y"
{ yymsp[-2].minor.yy247 = yymsp[-1].minor.yy247; }
#line 2365 "bt_parser.c"
        break;
      case 25: /* custom_var_decl ::= */
      case 27: /* args_decl ::= */ yytestcase(yyruleno==27);
      case 45: /* var_list ::= */ yytestcase(yyruleno==45);
      case 48: /* var_list_no_assign ::= */ yytestcase(yyruleno==48);
      case 98: /* struct_stms ::= */ yytestcase(yyruleno==98);
      case 123: /* case_stms ::= */ yytestcase(yyruleno==123);
      case 129: /* stm_list ::= */ yytestcase(yyruleno==129);
#line 93 "bt_parser.y"
{ yymsp[1].minor.yy247 = new NodeList(); }
#line 2376 "bt_parser.c"
        break;
      case 28: /* var_decl ::= CONST type var var_list SEMICOLON */
#line 102 "bt_parser.y"
{ yymsp[-2].minor.yy85->type = yymsp[-3].minor.yy49; yymsp[-2].minor.yy85->is_const = true; yymsp[-2].minor.yy85->names = *yymsp[-1].minor.yy247; yymsp[-4].minor.yy291 = yymsp[-2].minor.yy85; delete yymsp[-1].minor.yy247; }
#line 2381 "bt_parser.c"
        break;
      case 29: /* var_decl ::= CONST id var var_list SEMICOLON */
#line 103 "bt_parser.y"
{ yymsp[-2].minor.yy85->type = new NType(yymsp[-3].minor.yy188); yymsp[-2].minor.yy85->is_const = true; yymsp[-2].minor.yy85->names = *yymsp[-1].minor.yy247; yymsp[-4].minor.yy291 = yymsp[-2].minor.yy85; delete yymsp[-1].minor.yy247; }
#line 2386 "bt_parser.c"
        break;
      case 30: /* var_decl ::= LOCAL type var var_list SEMICOLON */
#line 104 "bt_parser.y"
{ yymsp[-2].minor.yy85->type = yymsp[-3].minor.yy49; yymsp[-2].minor.yy85->is_local = true; yymsp[-2].minor.yy85->names = *yymsp[-1].minor.yy247; yymsp[-4].minor.yy291 = yymsp[-2].minor.yy85; delete yymsp[-1].minor.yy247; }
#line 2391 "bt_parser.c"
        break;
      case 31: /* var_decl ::= LOCAL id var var_list SEMICOLON */
#line 105 "bt_parser.y"
{ yymsp[-2].minor.yy85->type = new NType(yymsp[-3].minor.yy188); yymsp[-2].minor.yy85->is_local = true; yymsp[-2].minor.yy85->names = *yymsp[-1].minor.yy247; yymsp[-4].minor.yy291 = yymsp[-2].minor.yy85; delete yymsp[-1].minor.yy247; }
#line 2396 "bt_parser.c"
        break;
      case 32: /* var_decl ::= type var_no_assign var_list_no_assign custom_var_decl SEMICOLON */
#line 106 "bt_parser.y"
{ yymsp[-3].minor.yy85->type = yymsp[-4].minor.yy49; yymsp[-3].minor.yy85->custom_vars = *yymsp[-1].minor.yy247; yymsp[-3].minor.yy85->names = *yymsp[-2].minor.yy247; yylhsminor.yy291 = yymsp[-3].minor.yy85; delete yymsp[-2].minor.yy247; delete yymsp[-1].minor.yy247; }
#line 2401 "bt_parser.c"
  yymsp[-4].minor.yy291 = yylhsminor.yy291;
        break;
      case 33: /* var_decl ::= id var_no_assign var_list_no_assign custom_var_decl SEMICOLON */
#line 107 "bt_parser.y"
{ yymsp[-3].minor.yy85->type = new NType(yymsp[-4].minor.yy188); yymsp[-3].minor.yy85->names = *yymsp[-2].minor.yy247; yymsp[-3].minor.yy85->custom_vars = *yymsp[-1].minor.yy247; yylhsminor.yy291 = yymsp[-3].minor.yy85; delete yymsp[-2].minor.yy247; delete yymsp[-1].minor.yy247; }
#line 2407 "bt_parser.c"
  yymsp[-4].minor.yy291 = yylhsminor.yy291;
        break;
      case 34: /* var ::= id array */
      case 36: /* var_no_assign ::= id array */ yytestcase(yyruleno==36);
#line 109 "bt_parser.y"
{ yylhsminor.yy85 = new NVariable(yymsp[-1].minor.yy188, yymsp[0].minor.yy291); }
#line 2414 "bt_parser.c"
  yymsp[-1].minor.yy85 = yylhsminor.yy85;
        break;
      case 35: /* var ::= id array ASSIGN op_if */
#line 110 "bt_parser.y"
{ yylhsminor.yy85 = new NVariable(yymsp[-3].minor.yy188, yymsp[-2].minor.yy291); yylhsminor.yy85->value = yymsp[0].minor.yy291; }
#line 2420 "bt_parser.c"
  yymsp[-3].minor.yy85 = yylhsminor.yy85;
        break;
      case 37: /* var_no_assign ::= id COLON number */
#line 113 "bt_parser.y"
{ yylhsminor.yy85 = new NVariable(yymsp[-2].minor.yy188, NULL, yymsp[0].minor.yy291); }
#line 2426 "bt_parser.c"
  yymsp[-2].minor.yy85 = yylhsminor.yy85;
        break;
      case 38: /* var_no_assign ::= id O_ROUND expr C_ROUND */
#line 114 "bt_parser.y"
{ yylhsminor.yy85 = new NVariable(yymsp[-3].minor.yy188, NULL); yylhsminor.yy85->constructor = *yymsp[-1].minor.yy247; delete yymsp[-1].minor.yy247; }
#line 2432 "bt_parser.c"
  yymsp[-3].minor.yy85 = yylhsminor.yy85;
        break;
      case 39: /* var_no_assign ::= COLON number */
#line 115 "bt_parser.y"
{ yymsp[-1].minor.yy85 = new NVariable(yymsp[0].minor.yy291); }
#line 2438 "bt_parser.c"
        break;
      case 40: /* array ::= O_SQUARE expr C_SQUARE */
      case 187: /* value ::= O_ROUND expr C_ROUND */ yytestcase(yyruleno==187);
#line 117 "bt_parser.y"
{ yymsp[-2].minor.yy291 = new NBlock(*yymsp[-1].minor.yy247); delete yymsp[-1].minor.yy247; }
#line 2444 "bt_parser.c"
        break;
      case 41: /* array ::= O_SQUARE C_SQUARE */
#line 118 "bt_parser.y"
{ yymsp[-1].minor.yy291 = new NBlock(); }
#line 2449 "bt_parser.c"
        break;
      case 42: /* array ::= */
#line 119 "bt_parser.y"
{ yymsp[1].minor.yy291 = NULL; }
#line 2454 "bt_parser.c"
        break;
      case 43: /* var_list ::= var_list COMMA var */
      case 46: /* var_list_no_assign ::= var_list_no_assign COMMA var_no_assign */ yytestcase(yyruleno==46);
#line 121 "bt_parser.y"
{ yymsp[-2].minor.yy247->push_back(yymsp[0].minor.yy85); }
#line 2460 "bt_parser.c"
        break;
      case 44: /* var_list ::= COMMA var */
      case 47: /* var_list_no_assign ::= COMMA var_no_assign */ yytestcase(yyruleno==47);
#line 122 "bt_parser.y"
{ yymsp[-1].minor.yy247 = new NodeList(); yymsp[-1].minor.yy247->push_back(yymsp[0].minor.yy85); }
#line 2466 "bt_parser.c"
        break;
      case 49: /* enum_def ::= enum_def COMMA enum_val */
      case 130: /* expr ::= expr COMMA op_assign */ yytestcase(yyruleno==130);
#line 133 "bt_parser.y"
{ yymsp[-2].minor.yy247->push_back(yymsp[0].minor.yy291); }
#line 2472 "bt_parser.c"
        break;
      case 51: /* enum_val ::= id ASSIGN number */
#line 136 "bt_parser.y"
{ yylhsminor.yy291 = new NEnumValue(yymsp[-2].minor.yy188, yymsp[0].minor.yy291); }
#line 2477 "bt_parser.c"
  yymsp[-2].minor.yy291 = yylhsminor.yy291;
        break;
      case 52: /* enum_val ::= id */
#line 137 "bt_parser.y"
{ yylhsminor.yy291 = new NEnumValue(yymsp[0].minor.yy188); }
#line 2483 "bt_parser.c"
  yymsp[0].minor.yy291 = yylhsminor.yy291;
        break;
      case 53: /* enum_type ::= LT type GT */
#line 139 "bt_parser.y"
{ yymsp[-2].minor.yy49 = yymsp[-1].minor.yy49; }
#line 2489 "bt_parser.c"
        break;
      case 54: /* enum_type ::= */
#line 140 "bt_parser.y"
{ yymsp[1].minor.yy49 = NULL; }
#line 2494 "bt_parser.c"
        break;
      case 55: /* custom_vars ::= custom_vars COMMA custom_var */
#line 146 "bt_parser.y"
{ yymsp[-2].minor.yy247->push_back(yymsp[0].minor.yy82); }
#line 2499 "bt_parser.c"
        break;
      case 56: /* custom_vars ::= custom_var */
#line 147 "bt_parser.y"
{ yylhsminor.yy247 = new NodeList(); yylhsminor.yy247->push_back(yymsp[0].minor.yy82); }
#line 2504 "bt_parser.c"
  yymsp[0].minor.yy247 = yylhsminor.yy247;
        break;
      case 57: /* custom_var ::= IDENTIFIER ASSIGN id */
#line 149 "bt_parser.y"
{ yylhsminor.yy82 = new NCustomVariable(yymsp[-2].minor.yy0->value, yymsp[0].minor.yy188); }
#line 2510 "bt_parser.c"
  yymsp[-2].minor.yy82 = yylhsminor.yy82;
        break;
      case 58: /* custom_var ::= IDENTIFIER ASSIGN literal */
#line 150 "bt_parser.y"
{ yylhsminor.yy82 = new NCustomVariable(yymsp[-2].minor.yy0->value, yymsp[0].minor.yy291); }
#line 2516 "bt_parser.c"
  yymsp[-2].minor.yy82 = yylhsminor.yy82;
        break;
      case 59: /* type ::= sign scalar */
#line 152 "bt_parser.y"
{ if(yymsp[-1].minor.yy192 != -1) yymsp[0].minor.yy292->is_signed = yymsp[-1].minor.yy192; yylhsminor.yy49 = yymsp[0].minor.yy292; }
#line 2522 "bt_parser.c"
  yymsp[-1].minor.yy49 = yylhsminor.yy49;
        break;
      case 60: /* type ::= sign character */
#line 153 "bt_parser.y"
{ yymsp[-1].minor.yy49 = yymsp[0].minor.yy49; }
#line 2528 "bt_parser.c"
        break;
      case 61: /* type ::= string */
      case 62: /* type ::= datetime */ yytestcase(yyruleno==62);
      case 76: /* string ::= character */ yytestcase(yyruleno==76);
#line 154 "bt_parser.y"
{ yylhsminor.yy49 = yymsp[0].minor.yy49; }
#line 2535 "bt_parser.c"
  yymsp[0].minor.yy49 = yylhsminor.yy49;
        break;
      case 63: /* type ::= STRUCT id args_decl O_CURLY struct_stms C_CURLY */
#line 156 "bt_parser.y"
{ yymsp[-5].minor.yy49 = new NStruct(yymsp[-4].minor.yy188, *yymsp[-3].minor.yy247, *yymsp[-1].minor.yy247); delete yymsp[-3].minor.yy247; delete yymsp[-1].minor.yy247; }
#line 2541 "bt_parser.c"
        break;
      case 64: /* type ::= UNION id args_decl O_CURLY struct_stms C_CURLY */
#line 157 "bt_parser.y"
{ yymsp[-5].minor.yy49 = new NUnion(yymsp[-4].minor.yy188, *yymsp[-3].minor.yy247, *yymsp[-1].minor.yy247); delete yymsp[-3].minor.yy247; delete yymsp[-1].minor.yy247; }
#line 2546 "bt_parser.c"
        break;
      case 65: /* type ::= ENUM enum_type id O_CURLY enum_def C_CURLY */
#line 158 "bt_parser.y"
{ yymsp[-5].minor.yy49 = new NEnum(yymsp[-3].minor.yy188, *yymsp[-1].minor.yy247, yymsp[-4].minor.yy49); delete yymsp[-1].minor.yy247; }
#line 2551 "bt_parser.c"
        break;
      case 66: /* type ::= STRUCT args_decl O_CURLY struct_stms C_CURLY */
#line 159 "bt_parser.y"
{ yymsp[-4].minor.yy49 = new NStruct(*yymsp[-3].minor.yy247, *yymsp[-1].minor.yy247); delete yymsp[-3].minor.yy247; delete yymsp[-1].minor.yy247; }
#line 2556 "bt_parser.c"
        break;
      case 67: /* type ::= UNION args_decl O_CURLY struct_stms C_CURLY */
#line 160 "bt_parser.y"
{ yymsp[-4].minor.yy49 = new NUnion(*yymsp[-3].minor.yy247, *yymsp[-1].minor.yy247); delete yymsp[-3].minor.yy247; delete yymsp[-1].minor.yy247; }
#line 2561 "bt_parser.c"
        break;
      case 68: /* type ::= ENUM enum_type O_CURLY enum_def C_CURLY */
#line 161 "bt_parser.y"
{ yymsp[-4].minor.yy49 = new NEnum(*yymsp[-1].minor.yy247, yymsp[-3].minor.yy49); delete yymsp[-1].minor.yy247; }
#line 2566 "bt_parser.c"
        break;
      case 69: /* type ::= VOID */
#line 162 "bt_parser.y"
{ yylhsminor.yy49 = new NType(yymsp[0].minor.yy0->value); }
#line 2571 "bt_parser.c"
  yymsp[0].minor.yy49 = yylhsminor.yy49;
        break;
      case 70: /* type ::= BOOL */
#line 163 "bt_parser.y"
{ yylhsminor.yy49 = new NBooleanType(yymsp[0].minor.yy0->value); }
#line 2577 "bt_parser.c"
  yymsp[0].minor.yy49 = yylhsminor.yy49;
        break;
      case 71: /* sign ::= UNSIGNED */
#line 165 "bt_parser.y"
{ yymsp[0].minor.yy192 =  0; }
#line 2583 "bt_parser.c"
        break;
      case 72: /* sign ::= SIGNED */
#line 166 "bt_parser.y"
{ yymsp[0].minor.yy192 =  1; }
#line 2588 "bt_parser.c"
        break;
      case 73: /* sign ::= */
#line 167 "bt_parser.y"
{ yymsp[1].minor.yy192 = -1; }
#line 2593 "bt_parser.c"
        break;
      case 74: /* string ::= WSTRING */
      case 75: /* string ::= STRING */ yytestcase(yyruleno==75);
#line 169 "bt_parser.y"
{ yylhsminor.yy49 = new NStringType(yymsp[0].minor.yy0->value); }
#line 2599 "bt_parser.c"
  yymsp[0].minor.yy49 = yylhsminor.yy49;
        break;
      case 77: /* character ::= CHAR */
      case 78: /* character ::= WCHAR */ yytestcase(yyruleno==78);
      case 79: /* character ::= BYTE */ yytestcase(yyruleno==79);
#line 173 "bt_parser.y"
{ yylhsminor.yy49 = new NCharType(yymsp[0].minor.yy0->value); }
#line 2607 "bt_parser.c"
  yymsp[0].minor.yy49 = yylhsminor.yy49;
        break;
      case 80: /* datetime ::= TIME */
#line 177 "bt_parser.y"
{ yylhsminor.yy49 = new NTime(yymsp[0].minor.yy0->value); }
#line 2613 "bt_parser.c"
  yymsp[0].minor.yy49 = yylhsminor.yy49;
        break;
      case 81: /* datetime ::= DOSDATE */
#line 178 "bt_parser.y"
{ yylhsminor.yy49 = new NDosDate(yymsp[0].minor.yy0->value); }
#line 2619 "bt_parser.c"
  yymsp[0].minor.yy49 = yylhsminor.yy49;
        break;
      case 82: /* datetime ::= DOSTIME */
#line 179 "bt_parser.y"
{ yylhsminor.yy49 = new NDosTime(yymsp[0].minor.yy0->value); }
#line 2625 "bt_parser.c"
  yymsp[0].minor.yy49 = yylhsminor.yy49;
        break;
      case 83: /* datetime ::= OLETIME */
#line 180 "bt_parser.y"
{ yylhsminor.yy49 = new NOleTime(yymsp[0].minor.yy0->value); }
#line 2631 "bt_parser.c"
  yymsp[0].minor.yy49 = yylhsminor.yy49;
        break;
      case 84: /* datetime ::= FILETIME */
#line 181 "bt_parser.y"
{ yylhsminor.yy49 = new NFileTime(yymsp[0].minor.yy0->value); }
#line 2637 "bt_parser.c"
  yymsp[0].minor.yy49 = yylhsminor.yy49;
        break;
      case 85: /* scalar ::= UCHAR */
      case 86: /* scalar ::= UBYTE */ yytestcase(yyruleno==86);
#line 183 "bt_parser.y"
{ yylhsminor.yy292 = new NScalarType(yymsp[0].minor.yy0->value, 8);  yylhsminor.yy292->is_signed = false; }
#line 2644 "bt_parser.c"
  yymsp[0].minor.yy292 = yylhsminor.yy292;
        break;
      case 87: /* scalar ::= SHORT */
#line 185 "bt_parser.y"
{ yylhsminor.yy292 = new NScalarType(yymsp[0].minor.yy0->value, 16); }
#line 2650 "bt_parser.c"
  yymsp[0].minor.yy292 = yylhsminor.yy292;
        break;
      case 88: /* scalar ::= USHORT */
#line 186 "bt_parser.y"
{ yylhsminor.yy292 = new NScalarType(yymsp[0].minor.yy0->value, 16); yylhsminor.yy292->is_signed = false; }
#line 2656 "bt_parser.c"
  yymsp[0].minor.yy292 = yylhsminor.yy292;
        break;
      case 89: /* scalar ::= INT32 */
#line 187 "bt_parser.y"
{ yylhsminor.yy292 = new NScalarType(yymsp[0].minor.yy0->value, 32); }
#line 2662 "bt_parser.c"
  yymsp[0].minor.yy292 = yylhsminor.yy292;
        break;
      case 90: /* scalar ::= UINT32 */
#line 188 "bt_parser.y"
{ yylhsminor.yy292 = new NScalarType(yymsp[0].minor.yy0->value, 32); yylhsminor.yy292->is_signed = false; }
#line 2668 "bt_parser.c"
  yymsp[0].minor.yy292 = yylhsminor.yy292;
        break;
      case 91: /* scalar ::= INT64 */
#line 189 "bt_parser.y"
{ yylhsminor.yy292 = new NScalarType(yymsp[0].minor.yy0->value, 64); }
#line 2674 "bt_parser.c"
  yymsp[0].minor.yy292 = yylhsminor.yy292;
        break;
      case 92: /* scalar ::= UINT64 */
#line 190 "bt_parser.y"
{ yylhsminor.yy292 = new NScalarType(yymsp[0].minor.yy0->value, 64); yylhsminor.yy292->is_signed = false; }
#line 2680 "bt_parser.c"
  yymsp[0].minor.yy292 = yylhsminor.yy292;
        break;
      case 93: /* scalar ::= HFLOAT */
#line 191 "bt_parser.y"
{ yylhsminor.yy292 = new NScalarType(yymsp[0].minor.yy0->value, 16); yylhsminor.yy292->is_fp = true; }
#line 2686 "bt_parser.c"
  yymsp[0].minor.yy292 = yylhsminor.yy292;
        break;
      case 94: /* scalar ::= FLOAT */
#line 192 "bt_parser.y"
{ yylhsminor.yy292 = new NScalarType(yymsp[0].minor.yy0->value, 32); yylhsminor.yy292->is_fp = true; }
#line 2692 "bt_parser.c"
  yymsp[0].minor.yy292 = yylhsminor.yy292;
        break;
      case 95: /* scalar ::= DOUBLE */
#line 193 "bt_parser.y"
{ yylhsminor.yy292 = new NScalarType(yymsp[0].minor.yy0->value, 64); yylhsminor.yy292->is_fp = true; }
#line 2698 "bt_parser.c"
  yymsp[0].minor.yy292 = yylhsminor.yy292;
        break;
      case 99: /* stm ::= IF O_ROUND expr C_ROUND stm */
#line 203 "bt_parser.y"
{ yymsp[-4].minor.yy291 = new NConditional(new NBlock(*yymsp[-2].minor.yy247), yymsp[0].minor.yy291); delete yymsp[-2].minor.yy247; }
#line 2704 "bt_parser.c"
        break;
      case 100: /* stm ::= IF O_ROUND expr C_ROUND then_stm ELSE stm */
      case 104: /* then_stm ::= IF O_ROUND expr C_ROUND then_stm ELSE then_stm */ yytestcase(yyruleno==104);
#line 204 "bt_parser.y"
{ yymsp[-6].minor.yy291 = new NConditional(new NBlock(*yymsp[-4].minor.yy247), yymsp[-2].minor.yy291, yymsp[0].minor.yy291); delete yymsp[-4].minor.yy247; }
#line 2710 "bt_parser.c"
        break;
      case 101: /* stm ::= WHILE O_ROUND expr C_ROUND stm */
      case 105: /* then_stm ::= WHILE O_ROUND expr C_ROUND then_stm */ yytestcase(yyruleno==105);
#line 205 "bt_parser.y"
{ yymsp[-4].minor.yy291 = new NWhile(new NBlock(*yymsp[-2].minor.yy247), yymsp[0].minor.yy291); delete yymsp[-2].minor.yy247; }
#line 2716 "bt_parser.c"
        break;
      case 102: /* stm ::= FOR O_ROUND arg SEMICOLON arg SEMICOLON arg C_ROUND stm */
      case 106: /* then_stm ::= FOR O_ROUND arg SEMICOLON arg SEMICOLON arg C_ROUND then_stm */ yytestcase(yyruleno==106);
#line 206 "bt_parser.y"
{ yymsp[-8].minor.yy291 = new NFor(yymsp[-6].minor.yy291, yymsp[-4].minor.yy291, yymsp[-2].minor.yy291, yymsp[0].minor.yy291); }
#line 2722 "bt_parser.c"
        break;
      case 108: /* normal_stm ::= DO stm WHILE O_ROUND expr C_ROUND SEMICOLON */
#line 214 "bt_parser.y"
{ yymsp[-6].minor.yy291 = new NDoWhile(yymsp[-5].minor.yy291, new NBlock(*yymsp[-2].minor.yy247)); delete yymsp[-2].minor.yy247; }
#line 2727 "bt_parser.c"
        break;
      case 109: /* normal_stm ::= SWITCH O_ROUND expr C_ROUND O_CURLY case_stms C_CURLY */
#line 215 "bt_parser.y"
{ yymsp[-6].minor.yy291 = new NSwitch(new NBlock(*yymsp[-4].minor.yy247), *yymsp[-1].minor.yy247); delete yymsp[-4].minor.yy247, delete yymsp[-1].minor.yy247; }
#line 2732 "bt_parser.c"
        break;
      case 111: /* normal_stm ::= block */
#line 217 "bt_parser.y"
{ yylhsminor.yy291 = yymsp[0].minor.yy16; }
#line 2737 "bt_parser.c"
  yymsp[0].minor.yy291 = yylhsminor.yy291;
        break;
      case 113: /* normal_stm ::= expr SEMICOLON */
#line 219 "bt_parser.y"
{ yylhsminor.yy291 = new NBlock(*yymsp[-1].minor.yy247); delete yymsp[-1].minor.yy247; }
#line 2743 "bt_parser.c"
  yymsp[-1].minor.yy291 = yylhsminor.yy291;
        break;
      case 114: /* normal_stm ::= BREAK SEMICOLON */
#line 220 "bt_parser.y"
{ yymsp[-1].minor.yy291 = new NVMState(VMState::Break); }
#line 2749 "bt_parser.c"
        break;
      case 115: /* normal_stm ::= CONTINUE SEMICOLON */
#line 221 "bt_parser.y"
{ yymsp[-1].minor.yy291 = new NVMState(VMState::Continue); }
#line 2754 "bt_parser.c"
        break;
      case 116: /* normal_stm ::= SEMICOLON */
#line 222 "bt_parser.y"
{ yymsp[0].minor.yy291 = new NBlock(); }
#line 2759 "bt_parser.c"
        break;
      case 117: /* return_stm ::= RETURN expr SEMICOLON */
#line 224 "bt_parser.y"
{ yymsp[-2].minor.yy291 = new NReturn(new NBlock(*yymsp[-1].minor.yy247)); delete yymsp[-1].minor.yy247; }
#line 2764 "bt_parser.c"
        break;
      case 118: /* return_stm ::= RETURN SEMICOLON */
#line 225 "bt_parser.y"
{ yymsp[-1].minor.yy291 = new NReturn(new NBlock()); }
#line 2769 "bt_parser.c"
        break;
      case 119: /* arg ::= expr */
#line 227 "bt_parser.y"
{ yylhsminor.yy291 = new NBlock(*yymsp[0].minor.yy247); delete yymsp[0].minor.yy247; }
#line 2774 "bt_parser.c"
  yymsp[0].minor.yy291 = yylhsminor.yy291;
        break;
      case 120: /* arg ::= */
#line 228 "bt_parser.y"
{ yymsp[1].minor.yy291 = new NBlock(); }
#line 2780 "bt_parser.c"
        break;
      case 124: /* case_stm ::= CASE value COLON stm_list */
#line 234 "bt_parser.y"
{ yymsp[-3].minor.yy291 = new NCase(yymsp[-2].minor.yy291, new NBlock(*yymsp[0].minor.yy247)); delete yymsp[0].minor.yy247; }
#line 2785 "bt_parser.c"
        break;
      case 125: /* case_stm ::= DEFAULT COLON stm_list */
#line 235 "bt_parser.y"
{ yymsp[-2].minor.yy291 = new NCase(new NBlock(*yymsp[0].minor.yy247)); delete yymsp[0].minor.yy247; }
#line 2790 "bt_parser.c"
        break;
      case 126: /* block ::= O_CURLY stm_list C_CURLY */
#line 237 "bt_parser.y"
{ yymsp[-2].minor.yy16 = new NBlock(*yymsp[-1].minor.yy247); delete yymsp[-1].minor.yy247; }
#line 2795 "bt_parser.c"
        break;
      case 132: /* op_assign ::= op_if ASSIGN op_assign */
      case 133: /* op_assign ::= op_if ADD_ASSIGN op_assign */ yytestcase(yyruleno==133);
      case 134: /* op_assign ::= op_if SUB_ASSIGN op_assign */ yytestcase(yyruleno==134);
      case 135: /* op_assign ::= op_if MUL_ASSIGN op_assign */ yytestcase(yyruleno==135);
      case 136: /* op_assign ::= op_if DIV_ASSIGN op_assign */ yytestcase(yyruleno==136);
      case 137: /* op_assign ::= op_if XOR_ASSIGN op_assign */ yytestcase(yyruleno==137);
      case 138: /* op_assign ::= op_if AND_ASSIGN op_assign */ yytestcase(yyruleno==138);
      case 139: /* op_assign ::= op_if OR_ASSIGN op_assign */ yytestcase(yyruleno==139);
      case 140: /* op_assign ::= op_if LS_ASSIGN op_assign */ yytestcase(yyruleno==140);
      case 141: /* op_assign ::= op_if RS_ASSIGN op_assign */ yytestcase(yyruleno==141);
      case 145: /* op_or ::= op_or LOG_OR op_and */ yytestcase(yyruleno==145);
      case 147: /* op_and ::= op_and LOG_AND op_binor */ yytestcase(yyruleno==147);
      case 149: /* op_binor ::= op_binor BIN_OR op_binxor */ yytestcase(yyruleno==149);
      case 151: /* op_binxor ::= op_binxor BIN_XOR op_binand */ yytestcase(yyruleno==151);
      case 153: /* op_binand ::= op_binand BIN_AND op_equate */ yytestcase(yyruleno==153);
      case 163: /* op_shift ::= op_shift LSL op_add */ yytestcase(yyruleno==163);
      case 164: /* op_shift ::= op_shift LSR op_add */ yytestcase(yyruleno==164);
      case 166: /* op_add ::= op_add ADD op_mult */ yytestcase(yyruleno==166);
      case 167: /* op_add ::= op_add SUB op_mult */ yytestcase(yyruleno==167);
      case 169: /* op_mult ::= op_mult MUL op_unary */ yytestcase(yyruleno==169);
      case 170: /* op_mult ::= op_mult DIV op_unary */ yytestcase(yyruleno==170);
      case 171: /* op_mult ::= op_mult MOD op_unary */ yytestcase(yyruleno==171);
#line 250 "bt_parser.y"
{ yylhsminor.yy291 = new NBinaryOperator(yymsp[-2].minor.yy291, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy291); }
#line 2821 "bt_parser.c"
  yymsp[-2].minor.yy291 = yylhsminor.yy291;
        break;
      case 143: /* op_if ::= op_or QUESTION op_if COLON op_if */
#line 262 "bt_parser.y"
{ yylhsminor.yy291 = new NConditional(yymsp[-4].minor.yy291, yymsp[-2].minor.yy291, yymsp[0].minor.yy291); }
#line 2827 "bt_parser.c"
  yymsp[-4].minor.yy291 = yylhsminor.yy291;
        break;
      case 155: /* op_equate ::= op_equate EQ op_compare */
      case 156: /* op_equate ::= op_equate NE op_compare */ yytestcase(yyruleno==156);
      case 158: /* op_compare ::= op_compare LT op_shift */ yytestcase(yyruleno==158);
      case 159: /* op_compare ::= op_compare GT op_shift */ yytestcase(yyruleno==159);
      case 160: /* op_compare ::= op_compare LE op_shift */ yytestcase(yyruleno==160);
      case 161: /* op_compare ::= op_compare GE op_shift */ yytestcase(yyruleno==161);
#line 280 "bt_parser.y"
{ yylhsminor.yy291 = new NCompareOperator(yymsp[-2].minor.yy291, yymsp[0].minor.yy291, yymsp[-1].minor.yy0->value); }
#line 2838 "bt_parser.c"
  yymsp[-2].minor.yy291 = yylhsminor.yy291;
        break;
      case 173: /* op_unary ::= LOG_NOT op_unary */
      case 174: /* op_unary ::= BIN_NOT op_unary */ yytestcase(yyruleno==174);
      case 175: /* op_unary ::= SUB op_unary */ yytestcase(yyruleno==175);
      case 176: /* op_unary ::= INC op_unary */ yytestcase(yyruleno==176);
      case 177: /* op_unary ::= DEC op_unary */ yytestcase(yyruleno==177);
#line 303 "bt_parser.y"
{ yylhsminor.yy291 = new NUnaryOperator(yymsp[-1].minor.yy0->value, yymsp[0].minor.yy291, true); }
#line 2848 "bt_parser.c"
  yymsp[-1].minor.yy291 = yylhsminor.yy291;
        break;
      case 178: /* op_unary ::= op_unary INC */
      case 179: /* op_unary ::= op_unary DEC */ yytestcase(yyruleno==179);
#line 308 "bt_parser.y"
{ yylhsminor.yy291 = new NUnaryOperator(yymsp[0].minor.yy0->value, yymsp[-1].minor.yy291, false); }
#line 2855 "bt_parser.c"
  yymsp[-1].minor.yy291 = yylhsminor.yy291;
        break;
      case 180: /* op_unary ::= O_ROUND type C_ROUND op_unary */
#line 310 "bt_parser.y"
{ yymsp[-3].minor.yy291 = new NCast(yymsp[-2].minor.yy49, yymsp[0].minor.yy291); }
#line 2861 "bt_parser.c"
        break;
      case 181: /* op_unary ::= SIZEOF O_ROUND type C_ROUND */
#line 311 "bt_parser.y"
{ yymsp[-3].minor.yy291 = new NSizeOf(yymsp[-1].minor.yy49); }
#line 2866 "bt_parser.c"
        break;
      case 182: /* op_unary ::= SIZEOF O_ROUND op_assign C_ROUND */
#line 312 "bt_parser.y"
{ yymsp[-3].minor.yy291 = new NSizeOf(yymsp[-1].minor.yy291); }
#line 2871 "bt_parser.c"
        break;
      case 184: /* op_pointer ::= op_pointer DOT id */
#line 315 "bt_parser.y"
{ yylhsminor.yy291 = new NDotOperator(yymsp[-2].minor.yy291, yymsp[0].minor.yy188); }
#line 2876 "bt_parser.c"
  yymsp[-2].minor.yy291 = yylhsminor.yy291;
        break;
      case 185: /* op_pointer ::= op_pointer O_SQUARE expr C_SQUARE */
#line 316 "bt_parser.y"
{ yylhsminor.yy291 = new NIndexOperator(yymsp[-3].minor.yy291, new NBlock(*yymsp[-1].minor.yy247)); delete yymsp[-1].minor.yy247; }
#line 2882 "bt_parser.c"
  yymsp[-3].minor.yy291 = yylhsminor.yy291;
        break;
      case 188: /* value ::= id O_ROUND expr C_ROUND */
#line 324 "bt_parser.y"
{ yylhsminor.yy291 = new NCall(yymsp[-3].minor.yy188, *yymsp[-1].minor.yy247); delete yymsp[-1].minor.yy247; }
#line 2888 "bt_parser.c"
  yymsp[-3].minor.yy291 = yylhsminor.yy291;
        break;
      case 189: /* value ::= id O_ROUND C_ROUND */
#line 325 "bt_parser.y"
{ yylhsminor.yy291 = new NCall(yymsp[-2].minor.yy188); }
#line 2894 "bt_parser.c"
  yymsp[-2].minor.yy291 = yylhsminor.yy291;
        break;
      case 190: /* value ::= id */
#line 326 "bt_parser.y"
{ yylhsminor.yy291 = yymsp[0].minor.yy188; }
#line 2900 "bt_parser.c"
  yymsp[0].minor.yy291 = yylhsminor.yy291;
        break;
      case 192: /* literal ::= LITERAL_STRING */
#line 329 "bt_parser.y"
{ yylhsminor.yy291 = new NString(yymsp[0].minor.yy0->value); }
#line 2906 "bt_parser.c"
  yymsp[0].minor.yy291 = yylhsminor.yy291;
        break;
      case 195: /* number ::= LITERAL_OCT */
#line 333 "bt_parser.y"
{ yylhsminor.yy291 = new NInteger(VMFunctions::string_to_number(yymsp[0].minor.yy0->value, 8)); }
#line 2912 "bt_parser.c"
  yymsp[0].minor.yy291 = yylhsminor.yy291;
        break;
      case 196: /* number ::= LITERAL_DEC */
#line 334 "bt_parser.y"
{ yylhsminor.yy291 = new NInteger(VMFunctions::string_to_number(yymsp[0].minor.yy0->value, 10)); }
#line 2918 "bt_parser.c"
  yymsp[0].minor.yy291 = yylhsminor.yy291;
        break;
      case 197: /* number ::= LITERAL_HEX */
#line 335 "bt_parser.y"
{ yylhsminor.yy291 = new NInteger(VMFunctions::string_to_number(yymsp[0].minor.yy0->value, 16)); }
#line 2924 "bt_parser.c"
  yymsp[0].minor.yy291 = yylhsminor.yy291;
        break;
      case 198: /* number ::= LITERAL_REAL */
#line 336 "bt_parser.y"
{ yylhsminor.yy291 = new NReal(VMFunctions::string_to_number(yymsp[0].minor.yy0->value)); }
#line 2930 "bt_parser.c"
  yymsp[0].minor.yy291 = yylhsminor.yy291;
        break;
      case 199: /* boolean ::= TRUE */
#line 338 "bt_parser.y"
{ yymsp[0].minor.yy291 = new NBoolean(true); }
#line 2936 "bt_parser.c"
        break;
      case 200: /* boolean ::= FALSE */
#line 339 "bt_parser.y"
{ yymsp[0].minor.yy291 = new NBoolean(false); }
#line 2941 "bt_parser.c"
        break;
      case 201: /* id ::= IDENTIFIER */
#line 341 "bt_parser.y"
{ yylhsminor.yy188 = new NIdentifier(yymsp[0].minor.yy0->value); }
#line 2946 "bt_parser.c"
  yymsp[0].minor.yy188 = yylhsminor.yy188;
        break;
      default:
        break;
/********** End reduce actions ************************************************/
  };
  assert( yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact <= YY_MAX_SHIFTREDUCE ){
    if( yyact>YY_MAX_SHIFT ){
      yyact += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
    }
    yymsp -= yysize-1;
    yypParser->yytos = yymsp;
    yymsp->stateno = (YYACTIONTYPE)yyact;
    yymsp->major = (YYCODETYPE)yygoto;
    yyTraceShift(yypParser, yyact);
  }else{
    assert( yyact == YY_ACCEPT_ACTION );
    yypParser->yytos -= yysize;
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  BTParserARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
/************ Begin %parse_failure code ***************************************/
/************ End %parse_failure code *****************************************/
  BTParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  BTParserTOKENTYPE yyminor         /* The minor type of the error token */
){
  BTParserARG_FETCH;
#define TOKEN yyminor
/************ Begin %syntax_error code ****************************************/
#line 15 "bt_parser.y"

    VMUnused(yymajor); // Silence compiler warnings
    btvm->syntaxError(TOKEN->value, TOKEN->line);
#line 3010 "bt_parser.c"
/************ End %syntax_error code ******************************************/
  BTParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  BTParserARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  assert( yypParser->yytos==yypParser->yystack );
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
/*********** Begin %parse_accept code *****************************************/
/*********** End %parse_accept code *******************************************/
  BTParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "BTParserAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void BTParser(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  BTParserTOKENTYPE yyminor       /* The value for the token */
  BTParserARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  unsigned int yyact;   /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  yypParser = (yyParser*)yyp;
  assert( yypParser->yytos!=0 );
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  BTParserARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput '%s'\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact <= YY_MAX_SHIFTREDUCE ){
      yy_shift(yypParser,yyact,yymajor,yyminor);
#ifndef YYNOERRORRECOVERY
      yypParser->yyerrcnt--;
#endif
      yymajor = YYNOCODE;
    }else if( yyact <= YY_MAX_REDUCE ){
      yy_reduce(yypParser,yyact-YY_MIN_REDUCE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
      yyminorunion.yy0 = yyminor;
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminor);
      }
      yymx = yypParser->yytos->major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor, &yyminorunion);
        yymajor = YYNOCODE;
      }else{
        while( yypParser->yytos >= yypParser->yystack
            && yymx != YYERRORSYMBOL
            && (yyact = yy_find_reduce_action(
                        yypParser->yytos->stateno,
                        YYERRORSYMBOL)) >= YY_MIN_REDUCE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yytos < yypParser->yystack || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
          yypParser->yyerrcnt = -1;
#endif
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          yy_shift(yypParser,yyact,YYERRORSYMBOL,yyminor);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor, yyminor);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor, yyminor);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
        yypParser->yyerrcnt = -1;
#endif
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yytos>yypParser->yystack );
#ifndef NDEBUG
  if( yyTraceFILE ){
    yyStackEntry *i;
    char cDiv = '[';
    fprintf(yyTraceFILE,"%sReturn. Stack=",yyTracePrompt);
    for(i=&yypParser->yystack[1]; i<=yypParser->yytos; i++){
      fprintf(yyTraceFILE,"%c%s", cDiv, yyTokenName[i->major]);
      cDiv = ' ';
    }
    fprintf(yyTraceFILE,"]\n");
  }
#endif
  return;
}
